// Code generated by go-bindata.
// sources:
// assets/css/custom.css
// assets/tmpl/config/action.tmpl
// assets/tmpl/config/filter.tmpl
// assets/tmpl/config.tmpl
// assets/tmpl/header.tmpl
// assets/tmpl/index.tmpl
// assets/tmpl/log.tmpl
// assets/tmpl/navbar.tmpl
// assets/tmpl/status.tmpl
// assets/tmpl/twitter_setup.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssCustomCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5d\x6a\xeb\x40\x0c\x46\xdf\xbd\x0a\x6d\x60\x4c\x20\x17\x6e\x99\x40\xf6\x22\x8f\x14\x67\x5a\x47\x1a\x64\x25\x4d\x5a\xba\xf7\x62\xc7\x31\x53\x28\xa1\x7e\xf0\xd3\xd1\xd1\xcf\x37\x9d\xd2\x0d\x3e\x1b\x58\xbe\x82\x44\x59\xfa\xe0\x5a\x22\xfc\xdf\x94\xeb\xae\xf9\x6a\x9a\xf6\xf5\x7c\xea\xd4\x4d\xa5\x42\x3b\x4c\x6f\xbd\xe9\x59\x28\x24\x1d\xd4\x22\xb8\xa1\x8c\x05\x8d\xc5\x77\x2b\xe6\x7c\xf5\x80\x43\xee\x25\x42\x62\x71\xb6\xbb\x32\xa9\x38\x66\x61\xab\x94\x27\xbc\x86\xf7\x4c\x7e\x8c\xf0\xb2\x79\x34\xa7\x7c\xa9\xfa\x23\x8c\x05\xa5\x3d\x60\x55\x76\x50\xf1\x30\xe6\x0f\x8e\xf0\xef\x51\x55\x8c\xeb\x59\xd5\x88\x2d\x82\xa8\xf0\xee\xaf\x1b\x4c\x53\x1e\x30\x60\xf2\x7c\xa9\x65\x0b\x4b\x4a\x3d\x5b\x37\x9c\x79\x45\x0b\x8e\xe3\xaf\x6c\x6f\x7c\x9b\x29\xc7\x6e\x60\xd8\x83\x1f\x19\xe9\xe9\x31\x71\xc8\x89\x57\xfb\x5c\xd7\xce\xff\x30\xba\xe5\xc2\x34\x59\xe6\xf4\xf6\xe0\xd6\x12\x0f\xec\x5c\x2b\xb5\x60\xca\x7e\x8b\xb0\x69\xb7\xcf\x76\x5e\x67\x9b\x0e\xed\xd8\x85\x29\x19\x16\xff\x91\x8b\xf5\x59\xee\x8f\x62\xbb\x5c\xf8\x3b\x00\x00\xff\xff\x0a\xc5\xa6\x4c\x39\x02\x00\x00")

func assetsCssCustomCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssCustomCss,
		"assets/css/custom.css",
	)
}

func assetsCssCustomCss() (*asset, error) {
	bytes, err := assetsCssCustomCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/custom.css", size: 569, mode: os.FileMode(420), modTime: time.Unix(1503580372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplConfigActionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xc9\x6e\xdb\x30\x10\x86\xef\x7e\x0a\x62\x80\x00\xc9\xa1\x52\x8b\xb4\x37\x49\x40\x1b\xb4\xb7\xa2\x41\x62\xa0\xc7\x98\x16\x47\x31\x11\x99\x54\x49\xc6\x0b\x0c\xbd\x7b\x21\x2e\x89\x9d\x48\xae\x14\x2b\x40\x8f\xe6\x32\xf3\xff\x9f\x67\x48\x6a\xb7\x63\x58\x70\x81\x04\x68\x6e\xb8\x14\x77\xb9\x14\x05\xbf\x87\xba\x9e\x24\x8c\xaf\x48\x5e\x52\xad\x53\x30\x74\x5e\xe2\x07\x85\xba\x92\x42\xf3\x15\x42\x36\x21\x84\x90\xc4\x8e\x1f\x2c\x22\x6e\xa9\x36\x8a\x57\xc8\xfc\xaf\xb9\x54\x0c\x15\x32\xbf\xcd\x6d\x5d\x20\x65\xcf\xbf\xdd\x98\x3a\x1c\x70\x83\x2c\x4b\x62\xc3\xda\x67\x04\x5d\x62\xf7\xec\x8a\x96\x8f\x2d\xd3\x49\xbc\x9f\x28\x89\x5f\x48\x49\xcc\x5c\xb2\xed\xe1\x96\xdd\x8e\x17\x44\x2a\x72\x8e\x7f\x48\x34\xdd\x56\x48\x40\x97\x34\x7f\x80\x8b\xfd\xa1\x35\xce\x17\x52\x3e\xc0\x45\x5d\xf7\x32\x46\x94\x5c\xeb\x8a\x8a\x14\x3e\x41\x36\x5d\x73\x63\x50\x75\xbb\x31\x6b\x44\xd3\x3d\xfd\x6a\xd0\xe9\xce\x17\x98\x3f\xcc\xe5\x86\x44\x5f\xed\x3f\x1c\xf9\x3c\xd1\xb4\x09\x47\xce\x2b\xc5\x85\x29\x08\x9c\xe9\x33\x0d\x24\xba\x56\x58\xf0\x0d\x81\xc8\xd5\x43\x64\xfc\x6a\x9b\xfc\x95\x31\xcf\xef\x28\x5f\x27\x03\x05\x7b\xb1\xd7\x22\x7d\x66\xe7\x13\xc1\x60\x74\x97\x3d\xd0\x29\x1c\x19\xde\x8d\x0b\xd8\x1b\x9f\x17\xf0\x66\x80\x9d\xad\x51\xd0\x95\x54\xdc\x1c\x69\x82\xa1\xd6\x7e\xf8\x88\xbd\xbd\x05\x09\xe3\x9b\xcb\x65\x59\xa2\x4d\xa6\x07\xfb\x2b\xb9\x36\x53\xdc\x98\x36\x8b\x57\xcf\x71\x7b\xbb\xdc\xd3\xf2\x9e\x6d\xe0\x4e\x95\xc1\x4d\xf0\x19\xb2\xdb\x66\x67\x37\xa6\x8a\x8b\xd3\x6b\xc4\xe6\x88\xae\xb9\xf8\x27\x36\xeb\x23\xaa\xb8\x18\xbf\x2a\xb4\xa1\x47\x5a\x7d\x98\x95\x5b\x43\x55\x4f\x2f\x4d\xda\xf1\xcd\x28\xa4\x23\x16\xb8\x33\x75\x13\x62\xf6\x74\xf6\xa4\x61\xd4\xc2\x6e\xb5\xdc\x72\x8f\x86\x83\xbf\xd7\x4d\x4a\x5a\x2e\xce\x23\x85\xdf\xa6\x2b\x60\xcd\x17\x54\x08\x2c\xc7\x04\x7f\xe5\x43\xf6\xe4\x1e\x14\x8c\x5e\x55\x07\xe7\xc2\xaf\x47\x73\x2f\xb9\xb8\x27\xbf\x1d\xd3\x6e\xbf\x28\x58\x25\xb9\x18\x7a\x4d\x26\x5c\x54\x8f\x86\x14\x52\x2d\x53\x90\x2b\x54\x6b\x7b\x1b\x10\xb3\xad\x30\x05\x83\x1b\x03\xa4\x79\xa7\xa5\xb0\xdb\x79\x2e\xb3\x86\xcb\xec\x89\xcb\x2c\x70\x91\x5e\xeb\x9d\xff\xff\xa3\x20\x69\x56\xd7\x40\xec\x73\xae\x89\x12\xa8\x07\x6b\xde\x59\xf4\xdd\xaf\xae\x6b\x68\xd1\x7f\x4a\x9b\x2e\xd1\x2c\x24\xfb\x8f\xc0\x38\x41\xfd\xb0\xfc\xb4\x6b\xc7\x87\xd2\x3c\x93\x87\x22\x69\x5c\x53\x85\xf4\x35\x95\xb7\x92\x68\x54\x58\x0e\xb9\x2c\x75\x0a\x97\x1f\xc1\x96\x7f\x0a\x5f\x20\xeb\x66\xf2\x4d\xb2\x6d\x5d\x27\x71\xd0\x33\x32\x1a\x83\xcb\xaa\xa4\x83\x9f\x65\xef\x80\x27\x28\x19\x8e\x68\xea\x77\x9e\x86\x29\x89\xf7\x3e\xa7\x92\xd8\x7e\x10\x66\x93\x24\x66\x7c\x95\x4d\xc2\xf9\xfc\x37\x00\x00\xff\xff\xba\x58\x2a\x70\x87\x0e\x00\x00")

func assetsTmplConfigActionTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplConfigActionTmpl,
		"assets/tmpl/config/action.tmpl",
	)
}

func assetsTmplConfigActionTmpl() (*asset, error) {
	bytes, err := assetsTmplConfigActionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/config/action.tmpl", size: 3719, mode: os.FileMode(420), modTime: time.Unix(1503125362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplConfigFilterTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4d\x6f\xdb\x3c\x0c\xbe\xe7\x57\xf0\x15\x50\xe0\xdd\x21\x0e\x50\x14\xdb\x0e\x8e\x81\xee\x90\xb5\x43\x8a\x05\x6d\xb7\x6b\xa2\xc4\xb4\xa3\x56\x96\x3c\x49\xf9\x82\x91\xff\x3e\xc8\x5f\x69\xda\xa4\xb1\x33\x1b\xe8\xad\x91\x45\xf2\x79\x1e\xd2\x24\xeb\x24\xf1\x31\x60\x02\x81\x04\x8c\x1b\x54\xe3\x99\x14\x01\x0b\xc9\x76\xdb\x71\x7d\xb6\x84\x19\xa7\x5a\xf7\x89\xa1\x53\x8e\x5d\x85\x3a\x96\x42\xb3\x25\x12\xaf\x03\x00\xe0\xa6\xe7\x7b\x97\x20\xbb\xaa\x8d\x62\x31\xfa\xf9\xaf\xa9\x54\x3e\x2a\xf4\x73\xb3\xcc\x74\x8e\xd4\xdf\xfd\xce\xce\xd4\xfe\x41\x76\xe8\x7b\x6e\xcf\xf8\x75\x9f\x08\x1a\xe1\xf1\xa7\x4b\xca\x17\x07\x1e\xbb\xbd\x97\x10\xdc\xde\x2b\x90\xae\x99\x4a\x7f\x53\x01\x74\x92\xb0\x00\xf0\x0f\x38\x8f\x9b\x18\x81\x98\x15\x33\x06\x95\x55\xf5\x00\x18\x50\x72\xa5\x63\x2a\xfa\xe4\x0b\x81\x99\xe4\xd9\xdf\x97\xc4\xfb\x8e\x02\x15\xe5\x87\x59\x24\x09\x72\x8d\xb0\x17\x47\x73\x3a\x7b\x3e\x19\xe5\xb2\x5e\x14\xe1\x1f\x76\xe8\xc5\xd4\x92\x12\xfa\xb8\xca\x6f\x0e\x33\x97\x9c\x69\xf3\x88\x6b\x33\x95\x6b\x70\x06\x69\xdd\x39\xa3\xdc\x19\xfc\x1f\x2b\x26\x4c\x00\xe4\x42\x5f\x68\x02\xce\x48\x61\xc0\xd6\x40\x9c\xac\x40\x9d\x22\x2a\xf9\x74\x08\xd6\x89\x8c\xc2\x7b\x55\x36\xa7\x1a\x22\xf4\x19\xad\x4d\x68\x2a\x25\x7f\x40\x8e\xb3\x3d\x4a\x37\x54\xdf\x59\x77\x27\x29\xcd\xa9\x1e\xa7\x81\xcf\xe6\x54\xad\xde\x8e\x32\x5f\x28\x0e\x8d\x66\xf3\xd7\xfd\xb0\x72\x42\x17\x8a\x8f\xdb\x4b\xaa\x42\xb3\x42\x34\xe8\x37\x94\xd4\xfb\xc2\xdf\x49\x5e\x65\xe4\xe6\x49\x05\x74\x29\x15\x33\x08\x66\xae\x50\xcf\x25\xaf\xcf\xce\x64\x19\xfb\x19\xdc\x0a\x33\x32\xaa\xe4\x37\xc8\x5d\x3f\x16\x9e\x4f\xf2\x2c\xc0\x8c\x4b\x30\x2d\x66\xb1\x05\xc6\x65\x46\xab\x53\x2e\xe1\xb4\xc9\x99\x53\x11\xd6\x24\xe9\x32\x11\x2f\x0c\x04\x52\x45\x7d\x22\x97\xa8\x56\x36\x31\x04\xcc\x26\xc6\x3e\xb1\x02\x10\xb0\x73\xb1\x4f\x92\x24\xa7\x38\xb1\x14\x27\x25\xc5\x49\x41\xd1\x46\x9f\x6c\xb7\x04\xd2\x49\x69\x0d\x0a\xbd\x86\x54\x84\xdb\x2d\x39\x00\xab\x52\xa3\x7a\x3b\x4f\xdc\xff\xba\x5d\xf8\xcd\x34\x93\x02\xae\x47\xb7\xd0\xed\x56\x53\x68\x37\xd1\xbe\x12\x2f\xb3\x3f\xaa\xd7\xde\xc4\x1b\xd2\x29\x1e\x99\x77\x35\xfb\x5c\x16\xd5\x49\x1d\x9e\xac\x9a\x65\x76\x99\xdb\xcb\x8d\x97\xcb\x4e\x8c\x2b\xe2\x0d\xe8\xec\x9d\xdd\x87\x8a\x10\x15\x70\xf6\x8c\x9c\xcd\xa5\xac\xfb\x26\x35\x58\x64\xb9\x22\x01\x9d\xa1\x93\xa2\x1a\xef\x50\x1d\x2e\xbe\x5c\x70\x4b\xd0\xb9\xb6\x16\xc3\xd2\xe0\xec\x9a\x3c\xfa\x06\x4e\xf9\x42\x29\xf4\x3f\x9c\x54\x39\xae\x57\x62\x4d\xde\x57\xeb\x5b\x66\xd4\xa6\x5e\x76\x59\x5e\x21\xfd\x78\xb5\x55\x00\xab\x55\x5e\x37\xb9\x51\x9b\x8a\x3d\xc9\xcd\x87\x13\xeb\x49\x6e\x6a\xe9\xf4\x43\x6e\x5a\x94\x68\xaf\x71\xdb\xf6\xdb\x64\xdf\xb6\xc7\x55\xdb\x76\xaa\x67\xe3\x5d\x7b\x7f\x2c\x09\x3f\xa2\xea\xb9\xd9\xc9\x94\xf9\xac\x3e\x9c\xb2\xfb\x2d\x33\x95\xa1\x6c\x94\xa5\x0c\x65\x65\x86\x32\x94\xe7\xb3\xb3\xab\x8a\x5d\x80\x16\x34\xc4\x33\x97\x95\x57\xff\x7e\x17\xde\x8e\xeb\x11\x31\x01\x1a\x85\x61\x11\x8a\xfa\xe5\x5f\xae\xbd\x03\x2e\xa9\xf9\x7c\xf5\x72\xf5\x2d\x62\x3b\x77\x4c\x3c\x14\x11\x4e\x0a\xc9\x0b\xab\x88\x89\x71\x09\xac\xf9\x05\x38\xa2\xeb\xd6\x79\xd3\xf5\x39\xbc\xe9\xfa\x1f\x79\xbb\xbd\x17\x5f\x92\xdc\x5e\xfa\x95\xcc\xeb\xb8\x3d\x9f\x2d\xbd\x4e\xb1\x23\xff\x0d\x00\x00\xff\xff\x1e\xb5\x5e\x46\x9c\x13\x00\x00")

func assetsTmplConfigFilterTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplConfigFilterTmpl,
		"assets/tmpl/config/filter.tmpl",
	)
}

func assetsTmplConfigFilterTmpl() (*asset, error) {
	bytes, err := assetsTmplConfigFilterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/config/filter.tmpl", size: 5020, mode: os.FileMode(420), modTime: time.Unix(1503125362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x6f\x1b\xb9\x11\xfe\xee\x5f\x31\x65\x83\x28\xc1\x45\xd2\xe5\x82\x7e\xb9\x68\x05\x1c\x92\x1c\x1a\xa0\xc9\xa5\xb6\x83\xa2\x28\x0a\x83\xda\x1d\x49\x6c\xb8\xa4\x4a\x52\x92\x0d\x41\xff\xfd\xc0\x25\x77\xb5\xda\x37\xad\x6c\xcb\xaf\xd2\x87\x8b\xb5\x3b\x1c\x3e\x9c\x57\x3e\x93\x73\x56\xab\x08\xc7\x4c\x20\x90\x50\x8a\x31\x9b\x90\xf5\xfa\x64\xf0\x97\x8f\x7f\x7c\x38\xff\xf7\xb7\x4f\x30\x35\x31\x1f\x9e\x0c\xec\x1f\xc0\xa9\x98\x04\x04\x05\x19\x9e\xac\x56\x06\xe3\x19\xa7\x06\x81\x4c\x91\x46\xa8\x08\xf4\xec\xc2\x91\x8c\xae\x86\x27\x00\x00\x03\x1d\x2a\x36\x33\xee\x8b\xfd\x8c\xe7\x22\x34\x4c\x0a\x88\x90\xa3\xc1\x53\xb9\x7c\x35\x9a\x1b\x23\xc5\x1b\x88\x65\x44\xf9\x6b\x58\x65\xb2\xf6\xb3\xa0\x0a\x8c\x82\x00\x9c\x54\x6f\x46\x15\x0a\xf3\x55\x46\x98\xfb\xf1\xfd\xd6\x12\x36\x86\x57\x46\xf5\x42\x4e\xb5\xfe\x4a\x63\x84\x20\x08\xa0\xe3\xf6\x8b\x3a\xc5\x0d\x12\x50\x52\xc1\x2b\xbb\x13\x83\x00\x7e\x7e\x0f\x0c\x06\x60\x35\x4c\x19\x8f\xac\x7e\xdd\xe3\x28\x26\x66\xfa\x1e\xd8\x4f\x3f\x55\x29\x48\x91\x26\x2b\x20\xd8\x5e\xfc\x1f\xf6\xdf\xca\x05\x16\x67\x22\xd5\x33\x57\x33\x8f\x72\xca\xa2\x08\x45\x07\x5e\xbe\x74\xba\x7a\x42\x46\xb8\x39\xc4\xe7\xaf\xdf\xbe\x9f\x57\x1e\x21\xfd\xb8\x55\x0b\xca\xe7\x08\x01\x74\xc6\x94\x6b\xec\xbc\xaf\x15\xdf\xb6\x13\x74\x1a\x44\xbd\x03\x98\x10\xa8\xfe\x7e\xfe\xe5\x1f\x56\xfc\x63\x62\xd4\x9a\x45\xeb\xd2\xd3\xed\x27\x6b\x40\xae\xf1\x59\xb9\xc3\xa8\xf9\x3e\xde\x48\x63\x76\x3f\xa7\x9c\xe2\x02\x95\xb9\xae\x53\x4e\xb6\x7f\x1a\xf4\xf3\x19\x3c\x88\xd8\x02\x12\x88\x81\x2d\x14\x86\x32\x81\x8a\x6c\xb2\x3b\x5f\x11\x04\x5d\x8c\xa8\xaf\x08\x99\x40\x5e\xc1\xff\xe6\xf1\x48\x1a\x25\x45\x4e\x41\x22\x33\x7d\x3b\xfc\x90\x54\xa1\xb9\xa2\xb6\x56\x0c\xfa\xd3\xb7\x45\x91\x5f\x52\x2d\x1c\x69\x44\x32\x79\x84\x2b\x39\x57\x20\x97\x02\x46\xd2\x74\x34\x68\x39\x57\x21\xea\x37\x30\x66\xdc\xa0\xd2\x40\x45\x04\x34\x29\x41\x7a\xd0\x9f\xfe\x52\xd0\x3b\x96\x2a\x06\x16\x05\x44\x2e\x50\x2d\x15\x33\x48\xbc\x74\x40\xfa\xae\x34\xf6\x09\xc4\x68\xa6\x32\x0a\xc8\x4c\x6a\x43\x00\x45\x68\x23\x26\x20\xf1\x9c\x1b\x36\xa3\xca\xf4\xad\x9a\x6e\x44\x0d\x25\xc3\x41\xf2\xa5\xb0\x0d\x13\xb3\xb9\xb1\x71\x1e\x6f\xed\xe4\xd4\xe8\xf9\x28\x66\x86\x40\x12\x35\x01\x39\xa3\x0b\x24\xe9\x69\x47\x46\xc0\xc8\x88\x2e\x9f\x24\x7f\xcc\x14\x8b\xa9\xba\x22\xa0\xcd\x15\xc7\x80\x44\x4c\xcf\x38\xbd\xfa\x95\x09\xce\x04\x92\xe1\x49\xc5\xe9\x8a\xc7\x19\x33\x8e\xb9\x33\x4d\xd0\xd4\xab\x2b\xc6\x8e\x3f\x48\x25\xee\x8f\x72\x29\xb8\xa4\xd1\x2e\xec\x05\xd3\x78\x73\xed\x0f\xbc\x85\x33\x6e\xe5\x5c\xdf\x67\xfb\x9f\xaa\xa4\xd3\x62\x27\x20\x68\x6c\x91\x5e\x8d\xa4\xe9\xf9\xbe\xdb\x0a\x62\x31\xa6\x06\xfd\x88\x2d\x72\x36\x5b\xad\xd8\x18\x7a\x5f\x50\x6b\x3a\xc1\xf5\xba\x32\xfb\x28\x47\x65\x20\xf9\x6f\x37\xa2\x62\x62\xf3\x78\xb5\xda\x2c\xf2\x3a\x37\x2a\x51\x44\x36\x93\x37\xca\xa6\xef\x86\xe7\x4b\x66\x0c\x2a\x38\x67\x31\x5a\x9c\x36\xa5\xde\x0d\x2b\xf7\x33\x74\xc4\xb1\xab\x50\xcf\xa4\xd0\x6c\x51\x3a\x52\xf2\x7e\x4b\x18\xdc\x12\x6d\x14\x9b\x61\xe4\xbf\x8d\xa4\x8a\x50\x61\x54\x65\x60\x63\x2f\x21\xe5\xe7\xee\x9d\xaa\x7e\xe1\x5e\x46\x43\x1d\x2a\x44\x91\x78\x44\x0f\xfa\xa6\x46\x4d\x2a\x8d\x97\x21\x9f\x47\x08\x0a\x67\x9c\xb5\x59\xc0\x84\x5f\x60\x5a\x08\x87\x72\x2e\xcc\x6e\x31\x69\xa6\xa8\x5a\xa8\xab\x97\x18\xf4\xab\xcc\x32\xe8\xd7\x18\x72\x60\x36\x17\xbb\xe2\x67\xb5\x52\x36\x88\xe0\x05\x13\x11\x5e\xbe\x81\x17\xc6\x87\x04\xfc\x1a\x40\xcf\x95\xe7\x9e\x0f\x97\x5e\x16\x2e\xeb\x72\x3b\x82\x9d\xde\x6a\x2c\x9e\xae\x63\xa7\xa9\x65\xfc\x86\x29\x18\xdd\xf3\x2d\x35\xcb\xe6\xe4\x82\x44\xfa\xcd\x16\xac\x7d\xe9\x4e\xce\x99\x36\xe7\x78\x69\x46\xf2\x72\x73\xee\xde\x59\x12\x51\xb6\x95\x6b\xa8\x00\xe2\x02\xee\x22\x09\x38\x52\x63\x07\x70\xde\xd8\xe1\xdf\x1d\xe8\x46\x52\xf2\x33\xe4\x18\x16\xf0\x7d\x72\x31\x7c\xea\x42\xb8\x0a\xa2\x8f\xf2\x0b\x1f\xe5\xf7\x82\xf2\xb3\x4b\x9c\x53\x53\x89\xd0\xa7\xd5\x85\x32\x87\x45\x67\x9c\x77\xff\x18\x7f\x16\xe6\x9b\x51\x39\x7c\x1f\x6c\xae\x56\x41\x4b\x92\xf8\x80\xa0\x06\xee\xea\xe7\xc3\xde\x7d\x29\x35\x25\x26\xc6\x92\x80\xed\x7d\x5d\x23\x27\x13\xdb\x58\x12\x96\x95\x3e\xa3\x6a\x82\x26\x20\x7f\xf5\xf0\xbb\x19\xfc\xae\xbb\x2e\x5d\xac\x56\x2e\xa1\xd7\xeb\x8a\x82\x5b\xfc\x44\x68\x28\xe3\x1a\xa6\xa8\xb0\x19\x7b\xdf\xe1\x6d\x38\xfe\x1d\x18\xc7\x77\x3d\x90\x22\xe4\x2c\xfc\x11\x90\x0d\x25\x35\x53\xa6\xdf\x40\xa7\x85\x59\x3a\xaf\xc9\xd0\xb1\xa0\x9b\x1c\xaa\xba\x10\x43\xae\xef\x56\x9b\x61\x47\x53\x6b\xb6\x51\xe5\xa5\x2a\x3b\x6a\x9f\x46\x51\xe1\x72\xb5\x3b\x02\x9a\xee\x4d\x5f\x71\x59\x72\x41\x7a\x5b\x6a\xa8\xbf\x50\x71\xdf\x29\xbf\xbf\x7e\x0f\x7c\x28\x12\xb5\xbd\xb8\xdc\x73\x07\xfd\xe4\x2e\xd4\x74\xff\xbb\x85\x66\x9c\xbf\xbc\x25\x45\x03\xc6\x34\x42\x92\xb0\xa3\x36\xf5\xc2\x5e\xd8\x92\x9f\x03\xd2\x7d\x4b\x40\x49\x77\xad\xa5\x5c\x4e\x08\x50\xc5\x68\x97\xd3\x11\x72\x8e\xd1\xe8\xaa\x95\xc6\xae\x61\x86\x57\xde\xd6\x8b\x48\xbb\xe9\x36\x7e\x53\x19\xce\x63\x14\x75\x01\x5c\x5e\x6e\xa9\x6d\xbd\x7c\xf5\x1a\x3f\x00\xbb\x41\x5d\x0a\xb9\xd4\xe8\x2b\x73\xc4\x74\xcc\x32\xe5\x64\xf8\xd2\xda\x45\xbf\xdf\x5d\x63\xc0\xdd\xcc\xb7\xb1\x39\xc3\xb5\xf5\x5c\x6a\xe7\x8f\xae\x9c\x6f\x5f\xe9\x4b\x7b\x6d\xd3\x84\xdd\x76\xb2\xe1\xbc\xcb\x4a\xd3\x77\xc3\xdf\x13\x54\xcd\x7b\x43\x61\xe2\xe0\x4f\x92\x32\xa9\x57\x02\x97\x5f\xe8\x0c\xc8\xf9\xd5\x0c\x49\xd6\xa3\x09\x10\xa7\x9c\xe4\xda\xb8\x7b\x02\xe4\x9b\xc2\x31\xbb\x24\x15\x0d\x9d\xbc\x6e\xe8\xe5\x29\xea\xdf\x42\x3f\xaf\xd8\x03\xb5\xab\xc0\x2d\x50\x3b\xe5\x79\xd4\xee\xc9\xb5\x51\xef\xed\xbb\xb1\x94\xe6\x66\x31\x9e\xf5\x5e\x1c\xd3\x39\x37\x35\xd1\xfe\xc1\x66\x42\x9b\x7e\x5a\x8b\xbf\xe6\x55\xc5\xe3\x3a\x9e\x9b\xbd\xcf\xd1\xdc\xdf\xe9\x42\x5a\xb2\xf1\x5c\x68\xee\x93\x20\xa2\x63\xef\xb4\xaa\xde\x97\x39\xf4\xae\x88\x68\x0a\xe6\x0e\x88\x68\xba\x55\x35\x11\xdd\x00\xb9\x33\x22\x5a\x22\x51\x19\xc2\x02\x89\xda\x60\x7b\x94\x24\x2a\x83\x7f\x24\x51\x79\x12\xd5\x60\x96\xa7\x46\xa2\xb2\xa3\x1e\x49\x54\x7b\x89\x83\x12\xa0\xeb\x34\x81\x36\x04\xa8\x29\xd7\xaf\x47\x80\x1a\x34\x1e\x09\xd0\x2d\x12\xa0\x16\x76\x7e\x06\x04\x28\x6b\xc1\xb5\x04\x28\xb3\xd3\x03\x22\x40\x19\xea\x5a\x02\xd4\x0e\xf5\x91\x00\xed\x49\x80\xce\x90\xaa\x70\xfa\x88\xf9\xcf\xff\xe7\xa8\x5a\xfd\x85\x9d\x42\x3d\xe7\xae\x09\x3f\x13\x9e\xa4\x13\xdf\x56\x35\xc8\xd4\xeb\x77\x45\x92\xb4\xdf\xef\xf0\x1c\xc9\xed\xd4\xfb\xa7\x8b\x0a\x28\x23\xf0\xf1\x72\x50\x5e\xa4\x37\x7f\xed\xe5\xf1\x9c\x26\xc1\x67\xeb\x5f\x05\x24\x17\x99\x17\xc6\x55\x47\x02\x44\x61\x68\x7b\x35\x90\x98\x5d\x5a\x63\x91\x99\x9c\xcd\x39\x55\x77\x4b\xe6\x3c\xf4\x02\x95\xcb\x50\x3f\x4a\x26\x97\xa2\x3f\x12\xb9\x3c\x91\xab\xb7\xca\x53\xe3\x71\xe9\x49\x8f\x34\xee\x36\x25\x0e\x4a\xf4\xf6\xee\x62\x6d\x58\x5e\x43\x1d\xb8\x1e\xc9\xab\x57\x78\xe4\x78\xb7\xc8\xf1\x76\x9b\xf9\x19\x50\x3c\xdf\x98\x6b\x09\x5e\x6a\xa4\x07\xc4\xef\x3c\xe4\x5a\x76\xd7\x0a\xf2\x91\xdc\xed\x49\xee\xbe\x71\x1a\x22\x7c\x95\x86\x8d\x59\x48\xcb\x7e\x7e\x44\x34\x8f\x72\x2e\x97\xa0\x91\x8f\x77\x37\xaa\xb9\x6e\x24\x65\xb7\x48\xb9\x6e\x76\x45\x59\xad\xc2\x29\x86\x3f\x2c\x4f\x28\xb6\xb6\xbc\xcf\x7a\x89\x1b\x7b\xbf\x59\x0b\x9c\x21\x1f\x6f\xb2\x46\xe4\xa5\x66\x89\x54\x62\xa7\x0b\x6b\xa7\x83\x92\x85\x3c\xe7\x6a\x81\xfd\xbb\xf5\x48\x23\xee\xc4\x67\xd7\x83\x7c\x9b\xb7\x8f\x7c\xf6\x7c\x16\x06\x15\xad\x28\x8f\xc7\xb4\xd9\x7a\xfa\x80\xd2\x26\xe7\xb2\xaa\x7c\x61\xb9\xd7\x0f\x20\x51\xf2\x68\x0b\x19\x92\x47\xfa\x50\x52\xe3\x1a\x73\x9f\xc8\xff\xbe\x4f\x46\x93\x56\xab\xa2\x11\x3e\x7a\x91\x84\x81\x6f\xe5\xe1\x19\xa7\xe1\x0f\xf0\xbf\xbe\xf0\x78\x07\x94\xe1\x94\x0a\x81\xfc\x46\x53\xc2\xdd\x12\x87\x9c\x23\xc6\x7a\x92\xa7\x5f\x89\x5f\xd2\x5f\x2b\x39\xf8\x08\x51\x27\xbb\xc5\x7e\xb7\xc3\x0f\x10\x63\x3d\xe9\x7d\xf0\x2e\x83\xe2\xee\xa9\x2f\x1f\xcb\xd8\x2b\x81\xdf\x4d\xe1\x1f\x87\x5e\xfa\x0d\x74\x76\xd9\xe4\xa9\x8d\xbc\xd2\x93\xde\xe9\xc8\x2b\x21\xed\x7e\xe7\xae\xc0\x65\xd7\xbb\xeb\x41\x8f\xc2\x0e\x3a\xc6\xda\xa7\x88\x36\x4d\xb0\x76\xa6\xf4\x7e\xf3\xab\x5d\xea\x8e\xd3\xab\x5b\x98\x5e\xb5\x35\xf2\x53\x9b\x5d\x25\xe7\xce\x4f\xae\x6c\x73\x2d\x8d\xad\xb6\x7b\xec\x7d\x0d\xad\x52\xac\xd9\xc8\xca\x62\x2d\xcd\xab\xf6\xc0\x7a\x9c\x56\xb5\x9c\x56\x7d\x16\xa1\x8c\x99\x98\xc0\xbf\x70\x34\x95\xf2\xc7\xe3\xbd\xea\xa3\x88\x66\x92\xb5\xf9\x1f\x07\xd2\xb0\x7c\xbc\xa4\x80\x89\x7c\x3b\x4b\x7d\x98\xba\xf0\xd0\xac\x80\xf9\xfd\x2e\x96\x7e\xc3\x03\x10\x83\x66\x3c\x06\x2f\x4d\x3d\x9a\x34\x12\x72\xc4\xf7\x05\x13\xbd\x4f\xfe\x71\xe3\xcd\xfb\xa6\xd7\x64\x8b\x8c\x2a\xa4\x65\xe4\x75\x68\xd3\x68\x24\x10\x4a\xae\x03\xf2\xee\x67\xdb\xc5\x97\x3a\x20\x7f\x23\x43\x87\xfc\xdc\x8b\xac\xd7\x83\x7e\xba\xc1\xfd\xde\xf4\xdb\x72\xa0\xd2\x71\x8f\x34\xc8\xd2\xa0\x16\x66\x79\x6a\x4c\x28\x3d\xf2\x3d\x50\xa1\x74\xeb\x47\xc3\x85\x76\x4b\x1c\x94\x2d\xed\xd5\x5d\x9a\xe8\x52\x9b\xec\xdf\x8f\x31\xb5\xd0\x78\x24\x4d\xb7\x40\x9a\xf6\xb0\xf3\xbd\xf2\xa6\x03\x70\x11\x7f\xe2\x3c\x1b\x61\xa2\x4c\x46\x4a\x16\x3a\xf2\x91\x5d\x8f\x9b\xf8\x88\x7f\x37\xe8\xbb\x02\x36\xe8\xbb\x7f\x24\x31\x95\xf9\x33\x00\x00\xff\xff\xad\xbe\x0c\xb9\x51\x51\x00\x00")

func assetsTmplConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplConfigTmpl,
		"assets/tmpl/config.tmpl",
	)
}

func assetsTmplConfigTmpl() (*asset, error) {
	bytes, err := assetsTmplConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/config.tmpl", size: 20817, mode: os.FileMode(420), modTime: time.Unix(1503586286, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x5d\x4f\xe3\x3a\x10\x86\xef\xfb\x2b\x22\xdf\x9e\x53\x9b\x7e\x1c\xda\xb3\x6a\x2a\xb1\xb0\x94\xc2\xf2\xb1\x50\x40\xec\x9d\xeb\x4c\x12\x87\xd8\x0e\x9e\x49\xd3\x6e\xd5\xff\xbe\x6a\xca\xb6\x88\x05\x89\x0b\xee\x3c\x33\xf2\x3b\xf3\xce\x23\xcd\x72\x19\x41\xac\x2d\x04\x2c\x05\x19\x81\x67\xab\x55\x63\xb0\x7e\x0e\x1b\x41\x10\x04\x03\x03\x24\x03\x95\x4a\x8f\x40\x21\xbb\x9d\x1c\x37\xfb\xec\x65\xc9\x4a\x03\x21\x9b\x69\xa8\x0a\xe7\x89\x05\xca\x59\x02\x4b\x21\xab\x74\x44\x69\x18\xc1\x4c\x2b\x68\xd6\xc1\xbf\x81\xb6\x9a\xb4\xcc\x9b\xa8\x64\x0e\x61\x8b\x0d\x1b\x1b\x25\xd2\x94\xc3\xf0\x7c\x31\x75\x34\x10\x9b\xe0\xb9\x92\x6b\xfb\x18\x78\xc8\x43\x86\xb4\xc8\x01\x53\x00\x62\x41\xea\x21\x0e\x59\x4a\x54\xe0\x17\x21\x8c\x9c\xab\xc8\xf2\xa9\x73\x84\xe4\x65\xb1\x0e\x94\x33\x62\x9b\x10\x1d\xde\xe1\x3d\xa1\x10\x77\x39\x6e\xb4\xe5\x0a\x91\x05\xda\x12\x24\x5e\xd3\x22\x64\x98\xca\x4e\xbf\xdb\xfc\x7a\xf7\xa0\xf5\xcd\xf8\x18\xce\x5a\xd1\xc8\x9c\x5e\x1f\x3c\x2e\x54\x79\x72\x70\x72\x9d\x74\xda\x97\xe6\x56\x55\x55\xcf\xd9\xce\xf5\x43\x94\x74\xef\xe4\x3f\x57\xe6\x66\x82\xbf\xc4\xd9\x7e\x7f\x36\x8d\xbe\x65\x69\xb7\x64\x81\xf2\x0e\xd1\x79\x9d\x68\x1b\x32\x69\x9d\x5d\x18\x57\xe2\x9f\xc5\x7d\xc4\x94\x8a\x6c\x86\x5c\xe5\xae\x8c\xe2\x5c\x7a\xa8\x1d\xc9\x4c\xce\x45\xae\xa7\x28\x62\x67\xa9\x29\x2b\x40\x67\x40\x74\xf9\x3e\xef\xd4\xf6\x5e\xa6\xb7\x0e\x3f\xd0\x55\x48\x44\x20\xac\x35\x54\x89\xe4\xcc\xf3\xcf\xcd\x57\x54\x5e\x17\x14\xa0\x57\xbb\x01\xd7\xb3\xf0\xc4\xb9\x24\x07\x59\x68\x7c\x35\x5f\xf6\x54\x82\x5f\x88\x16\x6f\xb5\x79\xf7\x39\xaa\x07\xca\x90\x0d\x07\x62\x23\x38\x7c\x5f\xfd\xa3\x4c\xb3\xd7\x48\xb3\x37\x89\x4e\xd4\x7f\xe3\x1f\x7a\xba\xd7\xee\x3d\xcd\x16\xd9\xcd\x79\x7c\x92\x5d\x9e\xcb\xef\x8f\x71\x79\x7f\x37\xff\x39\xbf\xbd\xb2\x87\xa7\x07\xbd\xbc\x6d\x0e\xef\x2f\xc6\xc5\xe8\x7f\x33\x3a\x3c\xea\x57\xa3\x8b\xb1\xba\x3a\xea\x4d\xe6\xf2\x7d\xa2\x3b\x2f\x9f\xc6\x76\x6b\xa8\x49\x32\x41\x6d\x8b\x92\xc4\x1e\xef\xf3\xbd\xb7\x2a\x2f\x09\xbf\xb5\xc8\x4f\xed\xf5\x37\xc0\xf7\x1b\x17\xb9\xa4\xd8\x79\xc3\xa9\xd2\x44\xe0\xeb\xc6\x95\x8e\x12\x20\xac\x29\x6d\x8f\x4a\x49\xf1\xfa\xa8\xec\x44\x07\x62\x73\x80\x96\x4b\xb0\xd1\x6a\xd5\xf8\x1d\x00\x00\xff\xff\xd2\x55\x52\x1a\xa4\x04\x00\x00")

func assetsTmplHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplHeaderTmpl,
		"assets/tmpl/header.tmpl",
	)
}

func assetsTmplHeaderTmpl() (*asset, error) {
	bytes, err := assetsTmplHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/header.tmpl", size: 1188, mode: os.FileMode(420), modTime: time.Unix(1503507913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x8f\xdb\x36\x0c\x7e\xbf\xbf\x82\xd3\xfa\xb0\x01\x75\x8c\xb6\xc0\x1e\x0a\x45\x40\xd1\x16\x5b\x81\xeb\x56\x74\xdd\x80\x3d\x32\x16\x63\xab\x27\x8b\x81\xa4\xe4\x96\x19\xf9\xdf\x07\xd9\xcd\x0f\xe7\xec\xe4\x92\x0e\xeb\x3d\xdc\xd9\x27\x92\x1f\x45\x7e\x9f\x28\x37\x8d\xa6\xb9\x71\x04\xc2\x38\x4d\x7f\x8b\xcd\xe6\x46\x7e\xf7\xe6\xb7\xd7\x9f\xfe\xfa\xf0\x16\xaa\x58\x5b\x75\x23\xd3\x1f\xb0\xe8\xca\xa9\x20\x27\xd4\x4d\xd3\x44\xaa\x17\x16\x23\x81\xa8\x08\x35\x79\x01\x93\xe4\x38\x63\xbd\x56\x37\x00\x00\x52\x9b\x15\x14\x16\x43\x98\x8a\x82\x5d\x44\xe3\xc8\x8b\x6e\x2d\xfd\x1c\x86\x70\xb8\x9a\xe1\x97\x10\x3b\x83\xc3\x00\x9f\x97\xf5\x8c\xa3\x67\x77\x10\xa0\xb5\xa9\x9e\xa9\xf7\xeb\x19\x47\x99\x57\xcf\x8e\x97\x9e\x6f\xbd\x2d\xa1\x16\x0a\x97\x91\x6b\x8c\xa6\x40\x6b\xd7\x50\xb0\xb5\x54\x44\x40\xa7\x61\xe6\x19\x75\x81\x21\xbd\xad\xe1\xce\x38\x1d\x80\xe7\x60\xdc\x9c\x7d\xf2\x60\x07\x73\xf6\xb0\xe6\xa5\xcc\xab\xe7\x7b\x18\x99\x6b\xb3\x52\x07\x19\x2f\xed\x16\xd2\xe1\x0a\x1c\xae\xb2\x85\xb1\x36\xb4\x4f\x9f\x97\x21\x9a\xb9\x21\xdd\xdb\x82\xb4\x06\x3c\x5b\x9a\x8a\x85\xa7\x40\x2e\xb6\x70\x62\x1b\x06\x8b\x68\x56\x24\x94\x44\xd0\x18\x31\x8b\x5c\x96\xc9\x38\xe2\x4c\x40\xe5\x69\x3e\x15\xdf\x57\x5c\x93\x50\xbf\x70\x4d\x32\x47\x25\x73\x6b\x0e\x01\x9a\xc6\xa3\x2b\x09\x9e\xdc\xd1\xfa\x29\x3c\x59\xa1\x85\x97\x53\x98\xbc\xee\xb6\x6f\xd8\xbd\xc7\xc5\x66\x73\x3e\xa3\x93\x29\x34\x4d\x0a\xbf\xd9\x08\xb5\x7d\x1a\x4e\x85\x9c\x3e\xc0\x92\xf9\xd2\xaa\xe1\x7e\x47\x9c\x65\x89\x34\xe4\xe2\x71\xc7\x93\x95\xd1\x53\xd1\x6e\xfb\xd0\x7e\x81\x8e\x60\x8e\x9a\xc0\x38\xd8\x16\xae\xe7\x7b\x8c\x92\x3c\x2c\xb4\xbf\x33\x9d\xaa\xe4\x07\x1c\x06\x9d\xb2\x44\x7a\xe3\xca\x11\xfb\x8e\x7f\x2f\xfa\x2e\xd1\x44\xdb\xb5\xb2\xab\x5a\x6e\xb9\xcc\x85\x7a\xeb\x3d\x7b\xb8\xe5\xb2\x2b\x59\xf5\x62\x24\x85\x8e\x6b\x43\x4b\x4d\x63\xe6\x30\xb9\xe5\xb2\xd7\xc7\x73\x3b\x48\x4a\x15\x4a\x2e\x3c\x29\x59\xb0\x26\xd5\x34\x5d\x0c\x99\xb7\xaf\x32\x6f\x97\x4e\xc1\x92\x0d\x34\x82\x39\x86\x37\x9e\x20\xd5\xea\x57\x8e\x95\x71\x25\x44\x86\x50\xf1\xbd\xcc\xa9\xbe\xa2\x18\x7d\x92\x9d\x71\x19\xa3\x43\xd2\xfe\xff\x49\x86\x2a\xc6\x45\x78\x99\xe7\xf1\x9e\x28\x6a\x2a\xee\x26\xf1\xde\xc4\x48\x7e\x52\x70\x2d\xd4\xa7\xee\x05\xf6\xb2\x0d\x57\xd3\xe5\xe2\xd6\x74\xfc\x1a\x3f\x31\x8e\xc2\x27\x51\x8f\x2d\xc2\x35\x27\xd2\x00\x46\xff\x60\x19\x31\xda\xd6\xb6\x69\x12\xc8\xf1\xe9\x74\x1a\x20\x3f\x87\x30\xc6\xb3\x7d\x84\x53\x75\x38\xa9\x1d\xb8\x54\x0e\xe7\xf2\x19\xe3\xfe\x37\x95\x44\xc7\xaa\x77\x35\x96\xf4\xca\xa1\x5d\x07\x13\xde\x60\x3c\x59\x93\x11\x11\xfd\xcc\x5c\x5a\x82\x3f\x4d\x48\x93\xfa\xd5\x87\x77\xf0\x91\xc2\xd2\x46\xf8\xa1\x69\x86\x00\x7e\x1c\x97\x0d\x3c\xaa\x37\x17\xe6\x71\x16\xee\xd2\xc6\xc1\xf5\x2a\x6e\xcb\xf1\xc7\xc7\xdb\x47\x8e\x0a\xcf\xf7\x27\x42\x1e\x5b\x17\x6c\xb3\x5a\x67\x3f\x9d\x71\x81\xbe\x38\xbb\x9c\x7e\xe7\xa5\x2f\x28\x89\x54\x9a\xba\x84\xe0\x8b\xfd\x5a\x9b\xef\x6e\xd6\x9b\xba\xcc\x3c\x85\x05\xbb\x90\x46\xfc\x53\x40\x1b\xa7\xa2\x35\x04\x4c\x8d\xfe\x87\x34\xcc\xd6\xf0\xa0\x1d\x42\x3d\x42\xf7\xa3\x05\xff\xda\x0d\xf7\x06\x6d\x8f\x95\x1d\x4b\x8e\x06\xef\xd7\xa4\x79\xf5\xd0\xbe\xe4\xd0\xf9\x6f\x0e\x9c\x81\x7f\x5d\x31\x1f\x76\x97\xc2\xdd\x45\x74\xf0\x62\x38\x74\x1d\xc4\x9d\x65\x37\x62\xb3\xd2\x1b\x2d\x1e\x4c\x8e\x07\xcc\x19\x4c\xfc\xf8\x7e\xbb\xff\x3c\xf8\xf2\x2c\xf3\xee\x03\x49\xe6\xdd\x87\xd5\xd6\xe5\xdf\x00\x00\x00\xff\xff\x8f\xa9\x1a\x4d\x84\x0d\x00\x00")

func assetsTmplIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplIndexTmpl,
		"assets/tmpl/index.tmpl",
	)
}

func assetsTmplIndexTmpl() (*asset, error) {
	bytes, err := assetsTmplIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/index.tmpl", size: 3460, mode: os.FileMode(420), modTime: time.Unix(1503577504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplLogTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x3d\x6f\xc2\x30\x10\x86\xf7\xfc\x8a\xab\x97\x4e\x10\xc1\x6c\xbc\xd0\x6e\xa8\xed\xd0\xa5\xa3\x13\x1f\xb1\x5b\xe7\x2e\x72\x0c\x14\x45\xfc\xf7\x2a\x98\x8f\xc8\x25\x43\x6c\xeb\xbd\xe7\xbd\x0f\xdd\x30\x18\xdc\x3a\x42\x10\x9e\x1b\x71\x3a\x15\xf2\xe9\xe5\x7d\xfd\xf9\xf5\xf1\x0a\x36\xb6\x5e\x15\x72\x3c\xc0\x6b\x6a\x56\x02\x49\xa8\x62\x18\x22\xb6\x9d\xd7\x11\x41\x58\xd4\x06\x83\x80\xf9\x08\x56\x6c\x8e\xaa\x00\x00\x90\xc6\xed\xa1\xf6\xba\xef\x57\xa2\x66\x8a\xda\x11\x06\x91\xb4\xf1\x9b\x5a\x90\xde\x57\xfa\x62\x71\xd5\xa7\xfc\xf7\xae\xad\x38\x06\xa6\x09\x7f\x8e\xb1\x0b\xb5\xe1\xa6\x97\xa5\x5d\xe4\xca\xf2\x0a\x7b\xd4\x46\xa8\xb5\xc5\xfa\x07\x8e\xbc\x0b\xc0\x07\x82\x8a\xe3\x73\x0f\x3e\xb1\xcb\x3b\x2b\x4b\xe3\xf6\xea\x61\x11\x9d\x26\xf4\x70\xfe\xcf\xba\xe0\x5a\x1d\x8e\x79\x39\x79\xf4\x6c\x1c\x47\x16\x94\x7a\x77\x5b\x98\x6f\xb8\x99\xf4\x7b\x33\xe9\x02\xaa\x61\x48\xaa\x2c\xc7\xd7\x03\x1e\x7d\x8f\x8f\x60\xbb\x98\xb6\x0d\x11\x7f\xe3\xac\x46\x8a\x18\xd2\xfd\x56\xf8\x1b\x47\xeb\xa8\x81\xc8\xd0\x5b\x3e\xfc\x9f\xe0\x25\x0f\x99\x2c\x4d\x3e\xa1\xfb\xf3\x72\x95\x65\x5a\x02\x59\xa6\xe5\xb9\x9a\xfc\x05\x00\x00\xff\xff\xbc\x4b\x6b\x86\x66\x02\x00\x00")

func assetsTmplLogTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplLogTmpl,
		"assets/tmpl/log.tmpl",
	)
}

func assetsTmplLogTmpl() (*asset, error) {
	bytes, err := assetsTmplLogTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/log.tmpl", size: 614, mode: os.FileMode(420), modTime: time.Unix(1503125362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplNavbarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\xcd\x72\x9b\x30\x10\x80\xef\x7e\x0a\x8d\x7a\xc6\xba\x77\x6c\x0e\xed\x35\xc9\xa5\x4f\xb0\xa0\x05\xef\x44\x96\x08\x5a\x48\x3a\x4c\xde\xbd\x23\x81\x1c\x07\xe3\x8c\xc7\x6e\x33\xcd\xc5\xa0\xfd\xd5\x7e\x5a\x2d\x1e\x06\x8d\x15\x59\x14\xd2\x42\x5f\x40\x2b\x5f\x5f\x57\x1b\x0b\xbd\x28\x0d\x78\xbf\x9d\xa4\x62\x7c\x64\x1a\x2b\xe8\x0c\xa7\x25\xd9\x1e\x5b\x8f\x69\x59\xd1\x0b\xea\x8c\x5d\x23\xf3\x95\x10\x42\x6c\x34\x1d\xe2\x94\xce\x32\x90\xc5\x76\xd2\xcd\xf5\x53\x88\x1d\x82\x7e\x67\x13\xed\x8a\x8e\xd9\xd9\x99\x29\xbb\xba\x36\x28\x4a\x67\x0c\x34\x1e\xb5\x14\x1a\x18\x26\x71\x48\x38\xca\x93\x18\xda\x1a\x79\x2b\xbf\x8d\xde\xf7\x68\x3b\x2f\x05\xb4\x04\x19\xbe\x34\x60\x35\xea\xad\xac\xc0\x78\x9c\x25\x8f\x1b\xf0\x0d\x1c\xd2\x53\xe9\x6c\x16\x48\xe5\x1b\x15\xe4\x9f\x69\xbe\x51\x23\x8a\x99\x14\x66\x68\x8a\x16\xac\x96\x62\xd7\x62\xb5\x95\x4a\xe6\xf7\xbf\x0b\xc7\x1b\x05\x47\xe8\x95\xa6\xfe\xc3\x93\x48\xfc\xc4\x1b\x48\xd2\x49\x3b\xe2\x9b\xed\xa2\x33\x47\x21\x52\x4f\x58\xe8\x17\x80\x0e\x03\x55\x02\x9f\xc4\xfa\x21\x5a\x3d\xc0\x1e\x85\xfc\xe9\x6c\x45\x75\x68\xc0\x13\x42\x86\x8e\x42\x67\xc4\xb8\x17\x50\x32\xf5\x4b\x87\x35\x0c\x68\x3c\x5e\x16\x65\xd9\xdd\xea\x05\xef\x13\xd0\x99\x21\xfb\x78\x80\x5c\xc6\xcd\x2b\x99\x8f\x55\xbc\x83\xfd\x06\xdd\x50\xbe\xba\x0c\xc6\x9d\xfb\xaa\x24\x8c\x0b\x18\xee\xdc\xed\x0c\x7e\x31\x70\xe7\xbf\x28\x06\x1f\x37\xaf\x64\x3e\x56\xf1\x01\x8c\xf7\x92\xce\xcc\xf0\x9c\xbd\x57\xe9\xb5\xa5\x7a\xc7\xe7\x2e\xd9\xfa\x87\xe3\x40\xf3\xea\xf2\xa7\x32\xc7\xaa\x76\xcc\x8d\xff\xae\x14\x3f\x13\x33\xb6\xeb\xd2\xed\xd5\x30\xbc\xe5\x90\x29\x60\xc1\x56\x14\x6c\x33\x53\xc7\x87\x77\x25\x81\xc9\xc2\x70\x8b\xeb\xc9\xff\x4c\x3a\x31\x1f\x8a\x15\x88\x0a\x42\xac\x0a\x92\x6b\x78\x4d\x27\x7e\x6e\xb0\x8e\x40\x2f\xe2\x2e\x6e\xef\x93\x45\x50\xd0\x34\x7e\x7d\x44\xeb\x73\x01\x35\xe0\xfd\x5f\x26\xb4\x78\x15\x6e\x00\x54\x3a\xeb\x9d\xc1\xb5\xc6\x1e\x8d\x6b\xb0\xf5\xeb\xda\xb9\xda\x60\xec\x2d\x68\xc8\x87\x1f\xd5\x93\x27\x67\x27\x55\x90\x46\xf5\x53\xe7\x18\xfc\xa5\x4c\x47\xe7\x6b\x90\x8e\x9e\xff\xa0\xe5\x6e\x00\x57\x13\xef\xba\x22\x62\xa0\x67\x60\x78\x04\xb5\x0f\x9f\xf9\x8b\x69\x44\xff\xab\x68\x44\xcf\xff\x83\x46\xf8\xda\xb8\x8e\xd3\x40\x92\x27\xe3\xf8\x8a\xfa\x3c\xd5\x36\x73\x1d\x1f\xea\x12\x77\x31\xc9\x2d\xe5\xcd\xe6\xfa\xd1\xdf\xaf\xe9\x75\xa3\x2c\xf4\xf9\x2a\xdd\xb0\x3f\x01\x00\x00\xff\xff\x4c\x74\x85\xed\x97\x0b\x00\x00")

func assetsTmplNavbarTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplNavbarTmpl,
		"assets/tmpl/navbar.tmpl",
	)
}

func assetsTmplNavbarTmpl() (*asset, error) {
	bytes, err := assetsTmplNavbarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/navbar.tmpl", size: 2967, mode: os.FileMode(420), modTime: time.Unix(1503580412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplStatusTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x41\x8b\xdb\x3c\x10\x86\xef\xfe\x15\xf3\xe9\xfe\xad\xd9\x3d\x16\xad\xa1\x6c\x0a\xa5\x74\x69\x20\xe9\xa1\x47\xd9\x9a\xac\xd5\xc8\x92\xd1\xc8\x2e\x21\xec\x7f\x2f\xb2\x22\xe2\x66\xed\x6e\xb3\x4d\x6f\xc9\x25\xd8\xef\xcc\x3b\x23\x3d\x63\x98\xfd\x5e\xe2\x46\x19\x04\x46\x5e\xf8\x8e\xd8\xf3\x73\xc6\xff\x5b\x7c\x79\x58\x7f\x5b\x7e\x80\xda\x37\xba\xc8\x78\xf8\x03\x2d\xcc\xd3\x3d\x43\xc3\x8a\x6c\xbf\xf7\xd8\xb4\x5a\x78\x04\x56\xa3\x90\xe8\x18\xdc\x84\xc4\xd2\xca\x5d\x91\x01\x00\x70\xa9\x7a\xa8\xb4\x20\xba\x67\x95\x35\x5e\x28\x83\x8e\x45\x2d\xfc\xc6\x16\x46\xf4\xa5\x38\x58\x24\x7d\x9c\xff\xbd\x6b\x4a\xeb\x9d\x35\xa3\xfc\x21\xa6\xbe\x2d\x96\xce\x56\x48\x04\xab\xa1\x7b\x9e\xd7\xb7\xa7\x31\x77\xc9\x46\xa3\x90\xac\x78\xa8\xb1\xda\x42\x7b\x48\x8b\x87\x46\x02\x61\x24\x78\xb1\x45\x68\x50\x50\xe7\x90\x40\x6d\x40\x98\x5d\x88\x2c\x35\x36\xc1\xfa\xee\x68\xcd\x73\xa9\xfa\x62\xb2\x5b\x2f\x4a\x8d\xff\x3b\xa4\xd6\x1a\x52\x3d\x9e\x36\x3d\xe8\xbf\x04\x43\x4c\x21\xef\x54\x8b\xf2\xf0\x54\x5a\x27\xd1\xa1\x3c\x49\x8f\x16\xe1\xd2\x5f\xbe\x8f\x9a\x9b\x16\xa2\x28\xd3\x85\xf1\xdc\xcf\x38\xa4\xc0\x74\xa3\x73\x71\x3c\x9f\x2a\xc5\xf3\x99\xe6\xb8\x3f\x0e\xc7\xd9\x4d\xaf\x7f\x28\xef\xd1\xc1\x42\x39\xac\x3c\x3c\x22\x91\x78\x42\xf8\xac\xc8\xa3\x41\xf7\xfa\x61\x66\x45\x18\x66\x51\x6d\xe0\xe6\x50\x23\x7a\x2e\x1e\xe3\xf1\x47\x13\x39\x69\x4d\xad\x30\x40\x7e\xa7\x31\x8c\xb9\xb6\xee\x5d\xa9\x3b\x64\xc5\xfb\xca\xab\x1e\x79\x1e\xf4\xd7\x8a\xa3\x26\x3c\xbf\xce\x30\x1a\x2b\x6f\xdb\x3f\x2c\x62\xe4\x6f\x6a\x9c\x4b\x19\xce\x81\xf6\x95\xd0\xfd\x43\x54\xc1\x9e\xae\xb4\x92\xf2\xb7\xb4\x96\xe8\x94\x95\xaa\x82\x4f\xb6\xbc\x08\xac\x88\x26\x31\xbb\x82\x4a\xca\x5b\x41\xad\xb4\xa8\xb6\x97\xfd\x9e\x06\xcb\xe4\x78\x25\x94\x94\xb7\x12\xfa\xb8\x5e\x2f\x2f\x0c\x28\x7e\x43\x2b\x74\xfd\x15\xd0\x51\x99\xde\x3f\x5e\xee\x19\x3c\x1f\x76\xaa\xf9\xf5\xad\xd3\x45\x36\x12\xc3\xe3\x28\x8c\xe7\xd1\x92\xe7\x71\x1f\x4e\x3d\xff\x0c\x00\x00\xff\xff\x25\x3a\xbf\xc5\x3c\x0b\x00\x00")

func assetsTmplStatusTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplStatusTmpl,
		"assets/tmpl/status.tmpl",
	)
}

func assetsTmplStatusTmpl() (*asset, error) {
	bytes, err := assetsTmplStatusTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/status.tmpl", size: 2876, mode: os.FileMode(420), modTime: time.Unix(1503125362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplTwitter_setupTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x31\x6f\xdb\x3c\x10\xdd\xfd\x2b\xee\xbb\xdd\x26\x92\xf1\x03\xa5\x25\xed\x14\x04\x2d\x10\x2f\x9d\x82\x93\x78\xb6\xd8\x50\x24\x41\x9e\x1c\x08\x82\xff\x7b\x21\xc9\x4e\x1c\xc7\x0e\x32\x14\xa8\x07\x4b\xc4\xbb\xf7\xf8\xf8\xee\xc4\x61\x30\xbc\xb1\x9e\x01\xe5\xc5\x8a\x70\x7a\xca\x2c\x5d\xc4\xfd\x7e\xa1\xff\xfb\xf6\xe3\x6e\xfd\xeb\xe7\x77\x68\xa4\x75\xe5\x42\x8f\x0f\x70\xe4\xb7\x05\xb2\xc7\x72\x31\x0c\xc2\x6d\x74\x24\x0c\xd8\x30\x19\x4e\x08\xab\x91\x58\x05\xd3\x97\x0b\x00\x00\x6d\xec\x0e\x6a\x47\x39\x17\x58\x07\x2f\x64\x3d\x27\x9c\xb1\xf1\x77\x2a\xe1\x69\x57\xd1\x41\xe2\x88\x9f\xf2\x7f\x77\x6d\x15\x24\x05\x7f\xc2\x9f\x6a\x9a\x9b\x72\x3d\x9b\x87\xc7\xd1\xbc\x56\xcd\xcd\x79\xc9\xed\x51\xc5\x31\x19\x2c\xd7\x8d\xcd\x60\x33\x48\xc3\xb0\xb1\x29\x0b\x64\xe1\x08\x12\xa0\xcb\x0c\x0f\x7d\x15\x44\xab\xe6\xf6\x4c\x65\x13\x52\x0b\xd6\x14\x38\x67\x04\x54\x8b\x0d\xbe\x40\x35\xad\xd5\x21\x41\x85\xd0\xb2\x34\xc1\x14\x18\x43\x16\x04\xf6\xb5\xf4\x91\x0b\x6c\x3b\x27\x36\x52\x12\x35\x2a\x2d\x0d\x09\x61\xa9\xa7\xc5\xd9\x4e\xd6\xc7\x4e\x60\x04\x5e\x37\x9b\x25\x72\x57\xb5\x56\x10\x76\xe4\x3a\x2e\xf0\x91\x76\x8c\xc7\xa3\x55\xe2\xa1\x12\xbf\x8c\xc9\xb6\x94\xfa\xe9\xdd\x6d\x4f\xd2\xd2\xca\xd8\xdd\x69\xf8\x76\x03\xab\x07\xce\x99\xb6\x7c\x25\x74\x72\x9c\x04\xa6\xff\xa5\x21\xbf\x1d\xbb\x37\x0c\x6f\xa4\x0f\x92\xec\xcd\x17\xa4\xac\xdf\x84\xf3\x36\x12\x34\x89\x37\x05\x36\x22\x31\xff\xaf\x14\xc5\x98\x57\x87\x4c\x57\x75\x68\x11\x84\xd2\x96\xa5\xc0\xa7\xca\x91\x7f\xc6\x72\x1d\xa0\x4e\x4c\xc2\xaa\x6e\xb8\x7e\x86\x3e\x74\x09\xc2\x8b\x87\xe3\x38\x50\x8c\xce\xd6\x34\x76\x09\xb6\x61\x6c\x6f\xc3\x89\xb5\xa2\xab\x99\x9c\x1a\x16\xaa\x1c\x2f\x13\xe7\x18\x7c\xb6\x3b\x3e\x37\x3c\xe1\xef\x8a\x61\xa6\x64\x49\x36\xb2\x39\xac\xaa\x90\x0c\x27\x36\x67\xf4\x59\xe2\xed\x53\xf9\x88\xa5\xcb\xc0\x0c\x9a\xf2\x2e\xf8\xdc\xb5\x9c\xe0\x9e\x7b\xad\xc4\x7c\x5e\x7d\x15\x84\x4f\xe7\x2d\x52\xce\x2f\x21\x19\x04\x4f\x2d\x17\xef\x6f\x89\x55\x7d\xb0\xf0\xf4\xcc\xfd\xeb\x4c\x0e\xc3\xea\x68\xed\x9e\xfb\xfd\xfe\xc2\xb9\x5f\xf7\xbd\x6a\x5b\xab\x6b\xc7\xff\x7a\x2e\x8f\x5c\x27\x96\x7f\x1d\x4d\x9e\x5c\x5c\x4a\x67\xf6\xf7\x57\x03\xd2\xea\xc2\x44\x69\x35\x0d\xe2\xc5\x99\x3f\xbc\x6a\x35\xd3\xb4\x9a\xef\xfa\xe3\x77\xfc\x27\x00\x00\xff\xff\x29\xfb\xad\xe7\x1f\x06\x00\x00")

func assetsTmplTwitter_setupTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplTwitter_setupTmpl,
		"assets/tmpl/twitter_setup.tmpl",
	)
}

func assetsTmplTwitter_setupTmpl() (*asset, error) {
	bytes, err := assetsTmplTwitter_setupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/twitter_setup.tmpl", size: 1567, mode: os.FileMode(420), modTime: time.Unix(1503208015, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/custom.css": assetsCssCustomCss,
	"assets/tmpl/config/action.tmpl": assetsTmplConfigActionTmpl,
	"assets/tmpl/config/filter.tmpl": assetsTmplConfigFilterTmpl,
	"assets/tmpl/config.tmpl": assetsTmplConfigTmpl,
	"assets/tmpl/header.tmpl": assetsTmplHeaderTmpl,
	"assets/tmpl/index.tmpl": assetsTmplIndexTmpl,
	"assets/tmpl/log.tmpl": assetsTmplLogTmpl,
	"assets/tmpl/navbar.tmpl": assetsTmplNavbarTmpl,
	"assets/tmpl/status.tmpl": assetsTmplStatusTmpl,
	"assets/tmpl/twitter_setup.tmpl": assetsTmplTwitter_setupTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"custom.css": &bintree{assetsCssCustomCss, map[string]*bintree{}},
		}},
		"tmpl": &bintree{nil, map[string]*bintree{
			"config": &bintree{nil, map[string]*bintree{
				"action.tmpl": &bintree{assetsTmplConfigActionTmpl, map[string]*bintree{}},
				"filter.tmpl": &bintree{assetsTmplConfigFilterTmpl, map[string]*bintree{}},
			}},
			"config.tmpl": &bintree{assetsTmplConfigTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{assetsTmplHeaderTmpl, map[string]*bintree{}},
			"index.tmpl": &bintree{assetsTmplIndexTmpl, map[string]*bintree{}},
			"log.tmpl": &bintree{assetsTmplLogTmpl, map[string]*bintree{}},
			"navbar.tmpl": &bintree{assetsTmplNavbarTmpl, map[string]*bintree{}},
			"status.tmpl": &bintree{assetsTmplStatusTmpl, map[string]*bintree{}},
			"twitter_setup.tmpl": &bintree{assetsTmplTwitter_setupTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

