// Code generated by go-bindata.
// sources:
// assets/css/custom.css
// assets/tmpl/config.tmpl
// assets/tmpl/header.tmpl
// assets/tmpl/index.tmpl
// assets/tmpl/log.tmpl
// assets/tmpl/navbar.tmpl
// assets/tmpl/status.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssCustomCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xdb\x6a\xeb\x30\x10\x7c\xf7\x57\x08\xce\xb3\x4c\x20\x07\xce\xc1\x81\xfe\xcb\x5a\xbb\x56\xd4\x28\x5a\xb1\xde\xdc\x5a\xfa\xef\x95\x73\x31\x0a\x29\xa6\x7a\xb0\x0d\x9e\xd9\x99\xd1\x4e\xcf\x78\x31\x9f\x8d\xb9\x9f\x0c\x88\x21\x79\xab\x9c\x3b\xf3\x6f\x95\xcf\x9b\xe6\xab\x69\xda\xf7\xc3\xbe\x67\x15\x4e\x15\xb4\x07\xb7\xf3\xc2\x87\x84\xd6\x71\x64\xe9\x8c\x0a\xa4\x31\x83\x50\xd2\xcd\x0c\x53\x3a\xab\x85\x18\x7c\xea\x8c\x2b\x7f\x48\x6e\x23\x1d\x27\x85\x90\x48\xaa\x91\x7b\x38\xdb\x53\x40\xdd\x76\xe6\xff\xea\x21\x8e\xe1\x58\xe9\x83\x29\x0a\xa9\x1d\xa0\xa2\x0d\x65\x94\x1d\xc3\x07\x75\xe6\xef\x83\x95\x85\x6a\xaf\x2c\x48\xc5\x61\xe2\x44\x9b\xdf\x26\x98\x5c\x3e\xe9\xbc\xe2\x4f\xdb\xa0\x34\xee\x79\x47\x0f\xb8\xd5\x53\xd0\x12\x72\xfa\x04\xa7\xe1\x58\xdb\xb8\xb3\xfe\xac\xcb\x19\x86\x99\xe2\x99\x7d\xa4\x45\xc6\x30\x4c\x9c\x99\x91\x61\x1c\x7f\x04\x7a\xa1\x4b\x65\x85\x48\x91\xdc\xee\x15\xd7\xc7\x92\x65\xe9\x26\x90\xd1\x93\xf4\xf1\x70\x4b\xa6\xd0\x47\x32\x6f\x46\xb7\x04\xb8\x78\x25\x65\xd5\x8e\x9e\x79\xed\xf5\x69\x47\x95\x90\x09\xa7\x29\xd7\xd6\x95\xb7\xb4\x48\x91\x94\xea\x91\x9c\xc1\x05\xbd\x74\x66\xd5\xae\x97\x1c\xce\x51\xa7\x82\x14\x05\x3b\x35\xaa\x2c\xee\xa9\x4f\xe2\x43\xba\x95\x79\x7d\x6f\xc6\x77\x00\x00\x00\xff\xff\xcd\xb5\xec\x4e\xf1\x02\x00\x00")

func assetsCssCustomCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssCustomCss,
		"assets/css/custom.css",
	)
}

func assetsCssCustomCss() (*asset, error) {
	bytes, err := assetsCssCustomCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/custom.css", size: 753, mode: os.FileMode(436), modTime: time.Unix(1484404079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x6f\x23\xb7\x11\xff\xdf\x9f\x82\xdd\x06\x71\x82\xc4\xeb\x26\x29\xfa\x47\xce\x12\x70\xbd\xcb\xe1\xae\xf0\x5d\x5c\xdb\x57\xa0\x28\x0a\x81\xd2\x52\xd2\xe6\xa8\xa5\xba\x4b\xf9\x01\xc1\xdf\xbd\x43\xee\x43\xfb\x20\xb9\x94\xac\xc7\xca\x47\x21\x88\x2d\xed\xcc\xec\x70\x7e\xc3\xe1\x90\xda\xdf\x79\xb9\x0c\xc8\x38\x8c\x08\xf2\x46\x2c\x1a\x87\x13\xef\xe9\xe9\xe4\xe2\x4f\x6f\x7f\x7f\x73\xfb\xef\xab\xdf\xd0\x94\xcf\x68\xff\xe4\x42\xfc\x40\x14\x47\x93\x9e\x47\x22\xaf\x7f\xb2\x5c\x72\x32\x9b\x53\xcc\x41\x6d\x4a\x70\x40\x62\x0f\xf9\x42\x71\xc8\x82\xc7\xfe\x09\x82\xd7\x45\x32\x8a\xc3\x39\x4f\xdf\x88\xd7\x78\x11\x8d\x78\xc8\x22\x14\x10\x4a\x38\xb9\x66\xf7\xdf\x0d\x17\x9c\xb3\xe8\x47\x34\x63\x01\xa6\xdf\xa3\x65\x21\x2b\x5e\x77\x38\x46\x3c\x46\x3d\x94\x4a\xf9\x73\x1c\x93\x88\x7f\x62\x01\x29\xfd\xfa\xaa\xa2\x12\x8e\xd1\x77\x3c\xf6\x47\x14\x27\xc9\x27\x3c\x23\xa8\xd7\xeb\xa1\xd3\xf4\x7e\xc1\x69\xfd\x06\xd2\x29\x16\xa3\xef\xc4\x9d\x42\xb8\xd1\x5f\x5e\xc1\x8f\x0b\x24\x2c\x4c\x43\x1a\x08\xfb\x89\x4f\x49\x34\xe1\x53\xb8\xf2\xc3\x0f\x2a\x03\xb9\xa7\x52\x03\x6c\x54\x94\xff\x13\xfe\x57\xa9\x20\xfc\x94\x52\x3e\x7f\x9c\x67\x5e\x4e\xc3\x20\x20\xd1\x29\xfa\xf6\xdb\xd4\x96\x1f\x81\x85\xd5\x20\x3e\x7c\xba\xfa\x7c\xab\x1c\x42\xfe\x4a\xb5\xee\x30\x5d\x80\x0a\x3a\x1d\x63\x9a\x90\xd3\x57\x5a\xf1\x6a\x9c\xd0\xa9\x41\x34\x03\x20\x8c\x22\x12\xbf\xbf\xfd\x78\x29\xc4\xdf\xca\xa0\x6a\x94\x9e\x1a\x9f\x56\x3f\x79\x42\x04\x9c\xfb\xaa\xe0\xe0\xf1\x62\x1d\x34\xf2\x9c\x5d\x0f\x94\x6b\x72\x47\x62\xbe\x29\x28\x27\xd5\xdf\x2e\xce\xcb\x33\xf8\x22\x08\xef\x90\x74\xb1\x27\x0a\x05\xc7\x50\x32\x62\x6f\x35\xbb\xcb\x15\x21\xc2\x77\x43\x9c\x55\x84\x42\xa0\x6c\xe0\x8f\xc5\x6c\xc8\x78\xcc\xa2\x92\x01\x29\x33\xfd\xa9\xff\x46\x56\xa1\x45\x8c\x45\xad\xb8\x38\x87\x4f\x6a\x22\x3f\xe7\x56\x28\x14\x1e\xaf\x90\x27\xe8\x91\x2d\x62\xc4\xee\x23\x04\xb6\x4f\x13\x94\xc0\xdb\x11\x49\x7e\x44\xe3\x90\x72\x12\x27\x08\x47\x01\xc2\xb2\x04\x25\x60\xf7\xe7\x9a\x5d\x48\xbd\x19\x0a\x83\x9e\xc7\x20\x86\xf7\x71\xc8\x89\x97\x49\xf7\xbc\xf3\xb4\x34\x9e\x7b\x68\x46\xf8\x94\x81\xd0\x9c\x25\xdc\x43\x04\x2a\x1a\x64\x4c\xcf\x9b\x2d\x28\x0f\xa1\x2a\xf1\x73\x61\xe6\x2c\xc0\x1c\x7b\xfd\x0b\xf9\xa6\x76\x9b\x30\x9a\x2f\xb8\xc8\xf3\x59\xe5\x4e\xa9\x99\x64\x31\x9c\x85\x60\x57\x66\x4d\xcf\xbb\xc1\x77\x70\x29\x1b\xed\x90\xc3\xc0\x78\x74\x46\x27\xf2\xc7\x3c\x0e\x67\x38\x7e\xf4\x50\xc2\x1f\x29\xc8\x06\x61\x02\xd1\x7f\xfc\x35\x8c\x28\x20\x03\x71\x55\x8c\xae\x3e\x1c\x08\x0c\x29\x8d\x69\x42\xb8\xde\x5c\x3d\x77\xb2\x81\x28\xfd\x7e\x0b\x20\x50\x06\xe0\xb4\xf8\x5e\x0b\x4d\x16\xae\xf5\x1d\xb7\x00\x63\x2b\xe3\xfa\x3c\x5f\x7f\x54\x0d\x9b\xc2\x77\x0f\x45\x30\xcf\xc1\xd3\x47\x48\x55\x3f\x5b\x77\xad\x5c\xac\xe7\xd4\xc5\x39\x4c\xab\x52\xcc\x96\x4b\x28\x66\xfe\x47\x92\x24\x78\x42\x9e\x9e\x94\xb3\x0f\x53\x28\x12\x48\xfe\x1f\x82\x13\x4d\xc4\x3c\x5e\x2e\x57\x4a\x99\xcd\x95\x49\x12\x05\x62\x26\xaf\x8c\x4d\x7f\xe9\xdf\xde\x87\x1c\x66\x15\xba\x0d\x67\x44\xf8\x29\xa6\xd4\x2f\x7d\xe5\xfd\x38\x1e\x52\x72\x16\x93\x64\x0e\x33\x2f\xbc\x6b\x0c\x49\x5e\xaf\x08\xa3\x54\x25\xe1\x50\x7f\x48\x90\xbd\x1b\xb2\x18\xfa\x0c\x12\xa8\x02\xcc\x45\x13\xd2\xfc\x3c\xbd\x16\xab\x2f\xa4\x17\x83\x3e\x54\x39\x42\x22\x89\x08\x0c\x82\x6b\xcc\xe4\xd2\xe4\x61\x44\x17\x01\x41\x31\x99\xd3\xd0\x46\x21\x8c\x32\x05\x6e\x21\x3c\x62\x8b\x88\xb7\x8b\x31\x18\x6f\x6c\x61\x4e\x2f\x01\x57\x14\x61\x81\x4f\xd5\x81\xbc\xe0\xab\xc6\xae\xfe\x5a\x2e\x63\x91\x44\xe8\x9b\x30\x0a\xc8\xc3\x8f\xe8\x1b\x9e\xa5\x04\xfa\xb5\x87\xfc\xb4\x3c\xfb\x59\xba\xf8\x45\xba\x3c\x35\x97\xa3\xf4\x46\x26\xb4\x8c\xc5\x33\x5d\xb1\xf3\xa9\xc5\xb3\x1b\xe6\xce\x24\x7e\xb6\xa4\x16\xb3\x59\x36\x48\xde\xb9\x39\x82\xda\x8b\xe9\xc8\x69\x98\xf0\x5b\xf2\x00\xd1\x79\x58\x8d\xdb\xbf\x91\x19\x25\x96\xf2\x04\x29\x1c\x49\x13\x6e\x20\x13\xce\xd3\xc4\x41\xde\xbf\x15\xdf\x16\xef\x86\x8c\xd1\x1b\x18\xf5\xa8\xe6\xdf\x6f\x69\x0e\x5f\xa7\x29\xac\x72\x31\xcb\xf2\x41\x96\xe5\x07\xf1\xf2\x43\x3a\x71\xae\xb9\xd2\xc3\x6c\x5a\x0d\x60\x5a\xed\xd4\x3b\x9e\xa2\xfb\xfb\xf8\x43\xc4\xaf\x60\x3b\xb2\xf2\xef\x8d\x98\xab\x2a\xd7\xe4\x24\xde\xa1\x53\x17\x69\xeb\x97\xa5\x7d\xfa\xa6\xb1\x28\x85\xd1\x98\x79\x48\xac\x7d\x67\x9c\x4d\x26\x62\x61\x91\xbb\xac\xfc\x33\x1c\xc3\x72\xdf\xf3\xfe\x9c\xb9\x7f\x56\xb8\x7f\x96\xb6\x4b\x83\xe5\x32\x9d\xd0\x4f\x4f\x8a\x82\x5b\x7f\x05\x04\x1a\x42\x9a\x20\x28\x4b\xc4\xec\xfb\x79\xea\xaf\x61\xf8\x7b\x08\x4e\xb6\xea\x21\x06\x49\x14\x8e\xbe\xc0\x9a\x5b\x6c\x49\xf9\x34\x84\x96\xf1\xd4\x22\x2c\xa7\xdf\x7b\xfd\x74\x17\xf4\x9c\x41\xa9\x0b\xb1\x78\xe5\xeb\xae\x3a\x0c\x2d\x8b\x9a\x39\x46\xca\xa6\xaa\x18\xea\x39\x0e\x82\x5a\x73\xd5\x9e\x01\xa6\xbe\xe9\x13\xb9\x6f\x40\x90\x77\x4b\x86\xfa\x2b\xcd\x2a\x7a\xe8\xea\xf5\xcd\xd7\xc0\xae\x48\x68\xd7\xe2\xe6\x9a\x0b\x1f\x8a\x5e\xc8\xd4\xff\x6d\x61\x31\x2e\x37\x6f\xb2\x68\xa0\x31\x0e\x60\x9d\x15\xbb\x23\x9b\x7a\x21\x1a\x36\xf9\x7b\xcf\x3b\xfb\xc9\x43\x31\x4b\xdb\x5a\x4c\x19\x74\xb9\x38\x0e\xf1\x19\xc5\x43\x42\x29\x09\x86\x8f\x56\x16\xe1\x1a\xa7\xca\x6e\xbd\xee\xe9\x59\x7e\x9b\xec\xa6\x6c\xb4\x98\x91\x48\x97\xc0\x4d\x75\xb1\xb5\xd5\xcb\xab\x75\xb2\x03\xb0\x67\xd4\xa5\x11\x65\xd0\x8a\xa4\x95\x19\xda\xff\x59\x58\x18\xf7\xfa\xdf\x8a\xb8\x24\xaf\xda\x6b\x8c\xbc\xcb\xf4\x97\xaa\x6f\x69\xe0\x6c\x91\xcb\xe3\xfc\x36\x2d\xe7\xd5\x96\xbe\x71\xaf\xea\x36\xa1\x3d\x4e\x22\x9d\xdb\xa2\x04\x37\x7c\x27\xbd\x32\xdf\xbb\x7e\x83\x96\x2d\x86\x52\xfd\xf9\xdb\x0e\xb5\x59\xfd\x56\x44\x2d\x6f\xa8\xe4\x6a\x85\xa0\x2f\x5a\x47\x73\xc5\xd1\x69\xca\x8a\xbc\x9e\xaa\x7e\x85\x52\x48\xda\x0f\xde\xb4\xa5\x50\xcb\x6f\x10\xa8\x39\x16\x29\x1f\xb5\x6c\x95\x74\xda\x6b\x29\x88\x97\x6e\x43\x90\xa6\xb4\x7f\x95\x79\xa3\x6a\x1a\xd3\xb9\xe8\xe7\x0e\x9b\xda\x47\xa5\xbb\x3b\x82\x54\x4a\x6f\x12\xf9\x45\x4c\x51\xb7\xa2\xff\xf9\xfa\xd2\x02\x00\xf0\x7b\xf0\x62\x40\x98\xe2\x04\xfa\x38\x58\x12\xf7\x86\x80\x6e\x33\x97\x61\xf0\x1e\x27\x1f\x85\x3f\x06\x00\xc0\xe7\x81\xf4\xf9\x45\x44\x1f\xd2\xa9\x43\xb1\x87\x29\xd0\x12\x79\xf0\xf7\xe8\xe3\x1e\x13\x7e\x4f\xc4\x51\x4f\x57\x22\x7f\x9d\x3b\x64\x08\x7e\xe1\xf4\xd1\x87\x7f\x8c\xef\x98\x38\x97\x43\x7c\x0a\x0d\xd9\x94\xd1\xfd\xe1\xa0\x3f\xac\xc9\x90\x78\x97\xf9\x76\x9b\xbb\x66\x40\x24\x1f\xc7\xa0\x18\xc7\xd1\x43\x53\x24\x59\x17\xb1\x29\x66\x89\x0d\x38\xc5\x48\x5e\x10\x3a\xe2\xf9\x8a\x3d\xc1\x61\x3e\x49\x17\x50\xe9\xcf\xd1\x33\x04\x84\xb7\xc5\x09\x0f\x6c\x21\xeb\x70\x5e\xc2\x75\xab\xb3\xc3\x8a\x5f\xbb\xdb\x99\xd8\xed\x36\x1a\x07\x2c\x6a\x21\xe3\xce\x57\x8a\x14\x1b\x59\xff\x5f\x61\x92\x7e\x93\xed\xf6\xb3\x6a\x05\xb7\x9f\xb5\x54\x10\x25\x62\x48\xf6\xd7\x50\x1a\xb7\x53\x69\x5a\xc3\x34\x07\x8f\x0c\x85\xfa\x2e\x15\x93\x8e\x1f\x7d\x85\x1e\xe3\x11\x41\xf2\xbb\x03\x44\xc3\x2f\x30\xd0\x29\x63\xfb\x5a\x41\xb7\x50\xb2\x33\x2c\xc4\x28\x7c\x39\x8a\xc1\x6a\x14\xa6\x52\x9e\x41\xfd\x4e\xe8\xbd\x16\x7a\x97\x85\x5a\x67\x2a\xbc\x94\xde\x18\xd3\x21\x5d\xc4\x50\x13\x8f\x1e\xd5\x6c\x1c\x1b\xe0\xfa\xf7\x54\xf3\xc5\x21\x2b\x0a\xf8\x3d\xc1\xc7\x3f\x61\xf3\x81\x6c\x80\xed\xfb\x4c\xf5\xc5\x81\xfb\x07\x7b\x3c\x7a\x5c\x61\x0c\x1b\x40\xfa\x0f\xf6\xf8\x92\xd0\x14\x51\xeb\x54\x5b\x23\xae\xb7\x77\x35\x12\xec\x63\x6f\x6a\x60\x23\x17\xcc\x70\xfc\xa5\x53\xf1\xbf\xcc\x9c\xb2\xe9\x2c\x53\xc9\xe3\xc7\x81\x4d\x58\xb7\x30\x00\x87\x2c\xe2\x0f\x52\x5d\x89\xfd\x21\xb7\xf9\xe2\xbc\x63\x81\x27\xc4\x6d\xf4\xb5\x0a\x6e\xa3\x6f\xa9\x10\xf4\x67\x61\x84\x12\x12\x89\x49\xd7\xf6\x40\xb0\xce\xc4\x73\xce\x68\xdf\x51\x86\xf9\xdf\xfe\xaa\x3c\xa7\xcd\x13\xdd\xff\x18\x46\x37\xb9\x8b\x86\x3a\x41\x73\x79\x18\xd3\xa0\x18\x53\x57\x4a\x86\x94\xde\x08\x21\xfc\xd0\x7d\x84\xf0\xc3\x7a\x08\xe1\x87\xee\x21\x74\x90\xa2\xfe\x7a\xc4\xdd\xa1\xad\x49\xc1\xd5\x72\x4b\x85\xe2\x5b\xb7\xbd\xd5\x88\xd1\x94\x8c\xbe\x54\x1b\xbb\x34\x9d\xf3\xaf\xd8\x54\xa5\x20\x7d\x1a\x38\xff\x5e\xad\x2b\x73\x5f\x4a\x3f\xe7\x4b\xe8\x0e\x04\x3d\xff\xce\xd9\x10\xf5\xdc\xdb\xe3\x0f\x3b\xa3\x94\xdd\x77\x21\xe8\xd2\x11\x53\xc8\xa5\xc0\xd1\x07\x7c\x04\xc3\x20\x39\xa7\xf5\xa0\x7b\xc7\x2c\xf0\x6f\x56\x0e\x19\xa2\x5f\x72\xbb\x2b\x10\xec\xb5\xcd\x58\xfb\xd9\xe9\x31\x63\xfc\x79\xcf\x98\x17\xdc\x17\x32\xc6\x0b\xca\x35\x4f\x9b\xbf\x11\x4f\xa2\xdb\xf0\x59\xb4\xfe\x6b\x2e\x29\x3e\xd6\xf1\x4c\x8b\xeb\x25\x9a\x69\x5e\x44\xbf\x16\x9a\xe9\x8b\x20\x82\x16\x4f\x82\x29\xb8\x27\x05\xa0\xfb\x22\x82\xe6\xce\xec\x81\x08\x9a\xdf\x4a\x4d\x04\x5d\x39\xb2\x37\x22\x68\xe3\xd9\xab\xc2\xc3\x1a\x89\x71\xe5\xdb\x51\x92\x18\x0b\xf7\x1d\x89\xb1\x4c\x62\x34\x84\xe5\xa5\x91\x18\x8b\xa1\x3a\x12\xa3\xbd\xc4\x4e\x09\x88\x9b\x2c\x02\x36\x04\x44\xd3\x5c\xdf\x8c\x80\x68\xb0\xe8\x08\x88\x5b\x24\x20\x5a\xc4\xd9\x11\x10\xdd\xd9\xdf\x4a\xed\x88\xcf\xfe\x0e\x4b\x81\x2b\xda\x3c\x2d\x01\x71\xd5\xf0\x39\x02\x62\xdd\xc2\xb6\xa3\xaf\x24\x20\x36\x00\x70\x04\xc4\x95\xfa\x06\x08\xd4\xa8\x58\x75\x0c\x9a\x04\xc4\x06\x00\x8e\x80\xb8\xbb\xd8\x57\x08\x88\xca\xc8\x3b\x02\xe2\x0e\x22\xaf\x20\x20\x36\x82\xef\x08\x88\x75\x3b\x1b\xe0\xa0\x3f\x68\x69\x27\x20\x36\x10\x71\x04\x44\xbd\xa1\x5d\x60\x63\x22\x20\xea\xa7\xcb\x0b\x42\xa7\xd3\x04\xc4\x06\x02\x75\x02\x62\x1d\x4e\x47\x40\x74\x04\x44\x3b\x05\xb7\x9f\xb5\x54\x38\x28\x01\xb1\x3e\xbf\xd5\x04\xc4\x46\x99\x70\x04\x44\xb5\xa9\x43\x94\x6c\x5b\x02\xa2\x06\x6a\x47\x40\x6c\x35\x76\x68\x54\xcd\x04\x44\x13\xae\x8e\x80\xd8\x62\xed\xd0\xd0\xb6\x10\x10\x4d\xd8\x3a\x02\xa2\xc1\xd0\xa1\x71\xd5\x13\x10\x4d\x90\x3a\x02\x22\xda\x69\x5b\x53\x25\x20\xea\x00\x74\x04\xc4\xdd\xb5\x95\x75\x02\xa2\xbe\xb3\x74\x04\xc4\x75\x14\xc4\xcb\x12\x83\x0a\x01\x51\x1b\x7f\x47\x40\x74\x04\x44\x3b\x05\xb7\xd1\xb7\x54\xe8\x14\x01\x51\x75\xb0\x67\x20\x20\x2a\x0f\x0a\x1d\x01\x51\x65\x62\xf7\x08\x29\x09\x88\x06\x84\x1c\x01\x11\x21\x47\x40\xb4\x51\x70\xb5\xdc\x52\xe1\x90\x04\xc4\xa2\x30\xe8\x08\x88\xab\x52\xe0\x08\x88\x25\xed\xad\x06\xbd\x49\x40\x6c\x44\xdd\x11\x10\xb7\x1e\xf4\x1a\x01\xb1\x19\x72\x47\x40\xdc\xee\xde\xd1\x44\x40\x6c\x44\xdf\x11\x10\x1d\x01\x71\x2d\x02\xe2\x0d\xc1\x31\xcc\xf6\xe3\xe5\x1f\xfe\x6f\x41\x62\xab\x3f\x58\x09\x23\x00\x78\x24\x86\x5f\x09\x4f\x31\x91\xd8\xaa\x08\x2a\x39\xea\xfb\x22\x29\x26\xd9\xfd\x76\xcf\x51\x4c\xef\xe4\xff\x33\xcd\x0a\xd4\xf4\x20\xcb\x97\x9d\xf2\x12\x93\xd5\x23\x8b\x99\x3f\xd7\x32\xf9\x6e\xc5\x9f\xe1\x6e\xba\x94\x66\xe6\x40\x04\xd0\x43\x1e\xfc\x17\x93\x91\xd8\x27\x22\x6f\x16\x3e\x88\x60\x79\x73\x36\x5f\x50\x1c\xef\x97\x4c\x99\xb9\x5e\xa3\x52\x16\x5e\x1f\x25\x93\x32\xf7\xde\x11\x29\xcb\x44\x4a\x7d\x54\x5e\x1a\x8f\x32\x1f\xa9\xa3\x51\x6e\x53\x62\xa7\x44\xcb\xb5\x57\x31\x1b\x96\xa5\xa1\x0e\x6c\x46\xb2\xd4\x1b\x74\x1c\xcb\x2d\x72\x2c\xdb\xc3\xec\x28\x96\xee\x74\x73\xa5\x76\xc4\xa7\x9b\x87\x25\xf9\x65\xcd\x9f\x96\x60\x59\xb4\x81\x8e\x5f\x59\xb7\xb0\xdd\xd0\x2b\xd9\x95\xf5\xe8\x3b\x72\xe5\x4a\x7d\x83\xf0\xd7\x68\x66\x55\x00\x9a\xd4\xca\x7a\xf4\x1d\xb3\x72\x57\x81\xaf\xf0\x2a\x55\x61\x77\xb4\xca\xad\x87\x5d\x41\xaa\xac\x47\xde\x71\x2a\xeb\x76\x36\x00\x41\x77\xde\xd2\xce\xa8\xac\xc3\xe1\x08\x95\x7a\x43\xdb\x07\xc6\x44\xa7\xd4\x4e\x94\x17\x04\x4d\xa7\xd9\x94\x75\x00\xea\x64\xca\x2a\x94\x8e\x4a\xe9\xa8\x94\x76\x0a\x6e\xdf\x6a\xa9\x70\x50\x2a\x65\x75\x76\xab\x89\x94\xf5\x0a\xe1\x78\x94\x6a\x53\x07\x28\xd6\xb6\x34\x4a\x25\xcc\x8e\x44\xd9\x6a\xec\xc0\x90\x9a\x39\x94\x7a\x50\x1d\x83\xb2\xc5\xda\x81\x71\x6d\x21\x50\xea\x81\x75\xf4\x49\x83\xa1\x03\x83\xaa\x67\x4f\xea\xf1\x74\xdc\x49\xb4\xc3\x3e\xa6\xca\x9c\xd4\x60\xe7\x88\x93\xbb\x6a\x22\xeb\xb4\x49\x6d\x1f\xe9\x58\x93\xeb\x28\x88\x97\x15\x00\x15\xce\xa4\x2e\xf8\x8e\x32\xe9\x28\x93\x76\x0a\x6e\x43\x6f\xa9\xd0\x29\xca\x64\xf3\xf8\xce\x40\x98\x54\x9d\x05\x3a\xbe\xa4\xca\xc4\xae\xe1\x51\xb2\x25\xf5\xf0\x38\xb2\x24\x42\x8e\x2c\x69\xa3\xe0\xaa\xb8\xa5\xc2\x21\xc9\x92\x59\x55\xd0\x51\x25\x8b\x3a\xe0\x98\x92\x25\xed\x2d\x46\xbc\xc9\x93\xac\x87\xdc\xd1\x24\xb7\x1c\xf1\x1a\x49\xb2\x11\x6f\xc7\x91\xdc\xe6\x4e\xd1\xc4\x90\xac\x87\xde\x11\x24\x1d\x41\x72\x2d\x82\xe4\x15\x15\x27\xba\x9f\x18\x0f\xc7\xe1\x08\x37\xfb\xb1\x23\xa2\x4a\x62\x59\x95\x12\x42\xc7\xed\x64\x8f\x45\x62\x24\x36\x6e\x91\xb6\xf8\x3c\x9a\x4f\xa9\x08\xd7\xe9\x21\x65\xcc\x7c\x09\xa3\xff\x5a\x44\xe0\x06\x02\xb0\x2a\x10\x51\x59\x6a\x2e\xa5\x64\x9c\x06\x22\x4e\x3b\x25\xdc\x95\x4b\x99\x85\xef\x9f\x05\x22\x46\xbf\x25\x66\x9b\xb9\xbc\x4d\x06\x8f\x98\x3d\x1f\x22\xf0\x11\x2b\xb6\x2f\x6e\xba\x54\x3e\xed\xc0\x74\x29\x41\x55\x9e\x1f\x61\xe9\xe3\x03\x4e\x88\xb2\x77\xd9\x0c\x28\x7b\xd6\xa1\x94\xbf\x64\x13\x97\xea\xdd\x4e\x75\x80\xa8\x9c\xe2\x14\xde\x1e\x30\xb5\x85\x37\x59\x4a\x0b\x4f\x3a\x94\xca\x37\x24\xbe\xab\xd3\xd8\x8e\x28\x9b\xdb\xcf\x84\x24\xd7\x81\x25\x16\xff\xc2\xc3\x9c\xc5\x16\x52\x80\x1f\x92\x7f\x08\xfe\x08\xe6\x85\xfd\x73\x02\x89\x4c\x03\x5f\xbc\x29\x3d\x00\x90\xa7\x6f\x9a\x24\xbe\xf8\x2b\xd0\xc6\xef\xfa\x9f\x39\x77\xd6\x76\x57\xe0\xaa\x77\xf7\x3d\x5c\x3d\x9c\xbb\xd1\x62\x36\x14\x94\xfc\x8a\xc3\x22\xc5\xf4\x0e\x5f\xc1\xd5\x8e\x39\x0c\xd9\x3e\x90\xd9\xae\xf7\x1a\x6a\xdb\xa5\x90\xd8\xd0\xf3\x2d\x14\xb4\xd2\xaf\xb0\xab\x94\x6a\x50\xd0\xf8\x8c\xf6\x4f\xf2\xfd\xde\xff\x03\x00\x00\xff\xff\xdd\x01\x04\x1f\x23\xc2\x00\x00")

func assetsTmplConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplConfigTmpl,
		"assets/tmpl/config.tmpl",
	)
}

func assetsTmplConfigTmpl() (*asset, error) {
	bytes, err := assetsTmplConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/config.tmpl", size: 49699, mode: os.FileMode(436), modTime: time.Unix(1484404079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xcb\x52\xdb\x30\x14\xdd\xf3\x15\x1e\x6f\xba\x68\x23\x35\x8f\x92\xb4\x13\x33\x43\xa1\x84\x40\x79\x14\x12\x18\xba\x53\xe4\x6b\x5b\x46\x0f\xa3\x2b\xc7\x71\x33\xfc\x7b\x15\x07\x08\xc3\xc0\x4c\xbc\xf2\x7d\x1d\x9d\xa3\xa3\xbb\x5c\xc6\x90\x08\x0d\x41\x98\x01\x8b\xc1\x86\x8f\x8f\x3b\xc3\xd5\xef\xde\x4e\xe0\xbf\xa1\x02\xc7\x02\x9e\x31\x8b\xe0\xa2\x70\x3a\x39\x6a\x0d\xc2\xd7\x25\xcd\x14\x44\xe1\x5c\x40\x55\x18\xeb\xc2\x80\x1b\xed\x40\xfb\xd6\x4a\xc4\x2e\x8b\x62\x98\x0b\x0e\xad\x26\xf8\x12\x08\x2d\x9c\x60\xb2\x85\x9c\x49\x88\xda\x1e\xa8\x41\x5a\x2e\x45\x12\x90\x29\x82\x3d\xf7\x68\x9e\x40\x03\xef\x84\x93\xb0\xb7\x5c\xbe\x2a\x7c\xc2\x60\x66\xdc\x90\xae\x4b\x4f\xb3\x20\xf1\xcd\xcc\x59\xfd\x4e\x97\x8e\x7d\xd3\xba\x4b\x0a\x7d\x1f\x58\x90\x51\x88\xae\x96\x80\x19\x80\x67\x9e\x59\x48\xa2\x30\x73\xae\xc0\x1f\x94\x2a\xb6\xe0\xb1\x26\x33\x63\x1c\x3a\xcb\x8a\x55\xc0\x8d\xa2\x2f\x09\xda\x25\x5d\xd2\xa7\x1c\x71\x93\x23\x4a\xf8\x2e\xc4\xd0\x2b\x75\x90\x5a\xe1\x6a\x7f\x46\xc6\xba\x83\x5e\xeb\xe7\xcd\x9d\x10\xd7\xe3\x23\x38\x6d\xc7\x23\x75\x72\xb5\x7f\x5f\xf3\xf2\x78\xff\xf8\x2a\xed\x76\x2e\xd4\x94\x57\x55\xdf\xe8\xee\xd5\x5d\x9c\xf6\x6e\xd8\xe7\x4b\x75\x3d\xc1\x7f\xf4\x74\x77\x30\x9f\xc5\xbf\xf2\xac\x57\xfa\xab\xb5\x06\xd1\x58\x91\x0a\x1d\x85\x4c\x1b\x5d\x2b\x53\xe2\xb3\x1b\xdb\x88\xf2\x22\x72\x24\x5c\x9a\x32\x4e\x24\xb3\xd0\x28\x62\x39\x5b\x50\x29\x66\x48\x13\xef\x5d\x8b\x55\x80\x46\x01\xed\x91\x5d\xd2\x6d\xe4\xbd\x4e\xbf\x28\xdc\xe2\x54\xca\xd0\x3f\x1a\x6c\x30\x78\x89\xce\xa8\xa7\xc9\xf5\x28\x72\x2b\x0a\x17\xa0\xe5\x1b\x82\x2b\x2e\x24\x35\x26\x95\xc0\x0a\x81\x6f\xf8\xe5\x0f\x25\xd8\x9a\xb6\x49\xbb\x43\x7a\x4f\x51\x43\x28\xf7\xa8\x43\xba\x06\xdc\xfb\x18\x7d\x5b\x4f\xf3\xb7\x96\xe6\xef\x3a\x3a\xe1\xdf\xc6\x7f\xc4\xec\x6b\xa7\xff\x30\xaf\xf3\xeb\xb3\xe4\x38\xbf\x38\x63\xbf\xef\x93\xf2\xf6\x66\xf1\x77\x31\xbd\xd4\x07\x27\xfb\x7d\xd9\x51\x07\xb7\xe7\xe3\x62\xf4\x5d\x8d\x0e\x0e\x07\xd5\xe8\x7c\xcc\x2f\x0f\xfb\x93\x05\xfb\xd8\xd1\x8d\x96\x8f\xc5\x14\x92\xb9\xc4\x58\x45\x5c\x25\x9c\x03\xdb\x28\xf1\x7b\x96\xfa\x2b\x6f\x08\xbf\x2c\x6d\xe9\x92\xd5\xd2\x6e\x40\x87\x74\xbd\xe0\xcf\x5b\xf1\x3f\x00\x00\xff\xff\xf8\x1d\xf8\x44\x04\x04\x00\x00")

func assetsTmplHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplHeaderTmpl,
		"assets/tmpl/header.tmpl",
	)
}

func assetsTmplHeaderTmpl() (*asset, error) {
	bytes, err := assetsTmplHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/header.tmpl", size: 1028, mode: os.FileMode(436), modTime: time.Unix(1484404079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\x6d\xaf\xd3\x36\x14\xfe\x7e\x7f\xc5\x59\x86\xb4\x4d\x22\x8d\x06\xd2\x3e\xa0\x34\x12\x03\xb4\x21\x01\x43\x0c\x26\xed\xa3\x1b\xbb\x89\xb9\x4e\x9c\xd9\x4e\xef\xba\x88\xff\xbe\x63\xbb\x49\xd3\xbc\xb5\xbd\xb0\x51\xa9\x6d\x9a\xf3\xf6\xf8\xf8\x9c\xe7\x38\x6d\x1a\xca\xb6\xbc\x64\x10\xf0\x92\xb2\xbf\x83\x4f\x9f\x6e\xe2\x6f\x9e\xff\xf6\xec\xfd\x9f\x6f\x5f\x40\x6e\x0a\x91\xdc\xc4\xf6\x0b\x04\x29\xb3\x75\xc0\xca\x20\xb9\x69\x1a\xc3\x8a\x4a\x10\x83\x56\x39\x23\x94\xa9\x00\x56\xd6\x70\x23\xe9\x3e\xb9\x01\x7c\xc5\x94\xef\x20\x15\x44\xeb\x75\x90\xca\xd2\x10\x0c\xa1\x02\x2f\xb3\xaf\xbe\x8b\x92\xec\x36\xe4\xe0\xa2\x53\xe8\x3b\xf8\x58\x17\x1b\x69\x94\x2c\x7b\x0e\xbc\x13\xbe\x85\xd5\x07\xcd\xd4\x1b\x52\x30\xb4\xee\x0b\xe3\xfc\xc7\xa4\x69\x7a\xd2\xef\x34\xa0\x97\x38\xc2\xfb\x03\x2f\x4c\xe8\x29\xeb\xd7\xfb\x39\xfd\x92\x8e\xd4\x1f\xb5\x60\x05\x26\x24\x48\x48\x6d\x64\x41\x0c\x4f\x89\x10\x7b\x48\xa5\x10\x2c\x35\x40\x4a\x0a\x1b\x25\x09\x4d\x89\xb6\xbf\xf6\x70\x8b\x59\xd7\x20\xb7\xc0\xcb\xad\x54\xd6\x42\x96\x80\x57\xb0\x97\x35\x86\x7e\x34\xb5\xe0\x9f\xa5\x99\x5a\x2f\x81\x5c\xb1\xed\x3a\xc8\x8d\xa9\xf4\x93\x28\x32\x77\xdc\x18\xa6\x56\xa9\x2c\x22\x4c\x44\x67\x15\xb4\x48\x37\xa6\x04\x7c\x87\x22\x73\x5f\x5a\xa6\x9c\x88\x90\xe3\x76\xb9\xdf\x07\xfb\x20\x89\x75\x45\xca\xd6\x68\x4b\x60\x4b\x5a\x99\xbd\x24\xa9\xe1\x3b\x86\x5a\x91\x55\xc3\x2f\x72\x49\x7a\x87\x60\x49\x55\xe9\x55\x0f\xf1\x17\x06\x59\xe1\xed\x73\x28\xc7\x9b\x3a\xce\x28\x63\x86\xb2\xf4\xf6\x3f\x44\xda\xc5\x98\xc7\x3a\xc2\x85\x21\xb4\x14\x6c\x45\xd9\x8e\x09\x59\x31\xa5\x57\x99\x94\x19\xde\xb1\x7b\x4f\x2a\xae\xed\x47\xb4\xe3\x1a\xab\xeb\x20\xb2\x77\x9d\xf8\xaf\x5a\x1a\xa2\x2f\x5d\x85\x37\x9e\x5c\x84\x17\x5d\x52\x12\xa3\x05\x64\xdc\xe4\xf5\xc6\xc1\xe1\x77\xc4\x90\x5b\x12\x15\xb6\xf9\x2e\x46\xe5\xec\xa7\x51\x39\xd1\x39\x54\x71\x84\x74\x93\xf4\xd8\xa7\x16\xad\x1b\x64\x27\xc0\x77\x58\x71\x21\xb4\xbb\xfa\x58\x6b\xc3\xb7\x9c\xd1\x13\x3a\x8a\x05\x07\x85\xbb\xb0\x0e\x2a\xc5\x34\x43\xca\xb3\xbd\xdc\xad\xa0\x8b\x4e\x80\xe2\x0a\x43\x23\xb3\xcc\x2a\x1b\xb2\x09\x0e\xd9\xf8\x36\x97\x05\x6a\xfc\x8a\x9f\x16\x5c\x1c\x09\xde\x0f\xd0\x34\x0a\x29\x98\xc1\x83\x5b\xb6\x7f\x08\x0f\x76\x44\xc0\x93\x35\xac\x9e\x79\x6e\xc1\x58\xaf\x49\x75\x52\xc1\x33\x88\x16\x21\x34\x8d\x75\x8f\x24\x91\xb4\x57\xd3\x50\x4e\xbb\x25\x8e\x6a\x91\x4c\x73\x37\x3a\x0f\xed\x00\xc0\xf0\x03\xf6\x76\x5a\x9c\x62\x15\xd8\x65\xf7\xf5\x71\x7b\x6c\x1d\x51\x86\xac\x08\x6d\xe2\x4e\x6c\x87\x51\xac\x85\x00\xf7\x19\x52\x9b\x25\x35\x61\x30\x69\x14\xda\x01\xc6\xcb\x6c\x46\xdf\xd9\xe4\x8f\x4f\x4d\x0c\x37\xc2\x6f\xa5\xcf\x5a\x24\x64\x16\x05\xc9\x0b\xa5\x90\xb8\x5f\xc9\xcc\xa7\x2c\x7f\x3c\x03\xc1\xd7\xda\x94\xc8\xf3\x3b\x7a\x18\x30\xd1\xf2\x0a\xec\xd4\x45\x34\xb8\xc9\x49\x9c\x4a\xca\xec\xd8\x73\x3e\xe2\xc8\xfd\x8c\x23\x27\x5a\x0a\x3b\x41\xd1\xe7\xe2\xcd\x03\x64\x45\xf2\x46\x9a\x1c\x93\x0a\x46\x82\xce\xe5\x5d\x1c\xe1\xbd\xeb\x93\x31\xa6\xe4\x05\x93\xb9\x72\xb0\x83\xf5\xff\x2c\x86\xe5\x61\x91\xbc\x3f\x50\xfd\xb1\x6d\xf5\xbd\xcb\xe5\xea\xad\xf1\xf5\x35\xcf\x18\x03\xf7\xb6\xa9\xe7\x84\xde\xdd\x95\x8c\x34\x11\xe3\x94\x58\x66\x94\xda\xdc\x22\x27\x61\x90\x21\x3b\x2d\x07\x88\xce\x45\x98\xab\xb3\xa3\x87\xa5\x3c\x2c\xf6\x8e\x33\xbf\xa6\x1d\xce\xe1\x99\xab\xfd\xaf\xda\x12\xbe\xaa\x5e\x16\x24\x63\x4f\x4b\x22\xf6\x9a\xeb\xe7\x78\xb0\x5f\xca\xc9\x4c\x13\xfd\xe2\x8f\x10\x7f\xb8\x83\x0a\x3c\x7d\xfb\x12\xde\x31\x5d\x0b\x03\xdf\x23\xa5\x4d\x04\xf8\x61\xbe\x6d\x3c\xb0\x73\x7b\x73\x25\x8e\xb3\xe1\xae\xdd\x38\x27\xba\x5f\x17\xbb\x74\x7c\x78\xf7\xea\xc2\x51\xa1\xe4\xdd\x82\xcb\xa1\x36\x3e\xb0\x84\x05\x0d\x7f\x3a\x63\xe2\xcc\x8e\xcd\xe9\x31\xfd\x2e\x6b\x95\xda\xe7\x8c\x24\xe6\x45\x06\x5a\xa5\x47\x99\xc3\xdb\xcd\x7a\x14\x87\x78\x32\xa9\x90\x03\xed\x88\x7f\x08\x44\x98\x75\xe0\x14\xf1\xe1\x08\x37\xfa\x1f\x86\xcf\x4b\x7b\x18\x6d\x47\x30\x3e\x53\x8e\x60\xcd\x27\xfc\x73\x17\x7c\x32\x68\x4f\xaa\xd2\x57\xc9\x60\xf0\x7e\x0e\xcc\x7b\x0f\xed\x6b\x48\xe7\xcb\x10\xce\xc4\xad\x7b\xcc\x87\xee\x50\xd8\x1d\x44\x27\x0f\x86\x53\xc7\x41\xd2\x69\xfa\x11\x1b\x66\x8a\xd3\x60\x34\x39\xc6\x4f\x23\x53\xc0\x87\xe7\xdb\xe3\xe3\xc1\xe1\x3a\x8e\xfc\x9f\x1d\x48\x09\xee\x4f\x92\xd6\xe4\xdf\x00\x00\x00\xff\xff\x13\x7d\x73\xaa\x50\x11\x00\x00")

func assetsTmplIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplIndexTmpl,
		"assets/tmpl/index.tmpl",
	)
}

func assetsTmplIndexTmpl() (*asset, error) {
	bytes, err := assetsTmplIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/index.tmpl", size: 4432, mode: os.FileMode(436), modTime: time.Unix(1484404079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplLogTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\x41\x73\xb3\x20\x10\x86\xef\xfe\x8a\xfd\xb8\x7c\xa7\xc4\x49\xce\x84\x4b\xda\x5b\xa7\xed\xa1\x97\x1e\x51\x37\x62\x8b\xe0\x00\x49\xea\x30\xf9\xef\x45\xd1\xc4\xa1\x72\xd0\x65\x76\x9f\x77\xdf\xdd\xc1\xfb\x0a\x4f\x8d\x42\x20\x52\xd7\xe4\x76\xcb\xe8\xbf\xa7\xb7\xe3\xc7\xe7\xfb\x33\x08\xd7\x4a\x96\xd1\xe1\x07\x92\xab\xfa\x40\x50\x11\x96\x79\xef\xb0\xed\x24\x77\x81\x11\xc8\x2b\x34\x04\xb6\x03\x58\xe8\xaa\x67\x19\x84\x43\xab\xe6\x02\xa5\xe4\xd6\x1e\x48\xa9\x95\xe3\xa1\x81\x21\x31\x37\x9c\xa5\x84\xe2\x97\x82\x4f\x12\x73\x7e\xc9\x7f\x9d\xdb\x42\x3b\xa3\xd5\x82\x1f\x6b\xc4\x8e\xbd\xe8\xda\xd2\x3c\x04\x49\x66\x3f\xc3\x32\xf8\x23\xec\x28\xb0\xfc\x86\x5e\x9f\x0d\xe8\xab\x82\x20\xf7\xdf\x82\x8c\xec\xfe\xc1\xd2\x3c\xb4\x65\xab\x26\x3a\xae\x50\xc2\xf8\xdd\x74\xa6\x69\xb9\xe9\x53\x3b\x69\xf5\x66\x58\x47\x52\x14\x67\x6f\x4e\xb0\x0d\xce\x17\xf3\xde\x45\x3a\x83\xcc\xfb\x98\xa5\xf9\x70\x5b\xe1\x51\x5a\x5c\x83\xc5\x6e\x39\x36\x38\xfc\x71\x9b\x12\x95\x43\x13\xe3\xbb\xf1\x57\xed\x44\xa3\x6a\x70\x1a\xac\xd0\xd7\xbf\x1b\x9c\xfa\xa8\x2a\x69\x93\x6e\xe8\x71\x9d\x42\x9a\xc7\x47\x10\x24\xc7\xc7\x33\x8b\xfc\x06\x00\x00\xff\xff\xbc\x4b\x6b\x86\x66\x02\x00\x00")

func assetsTmplLogTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplLogTmpl,
		"assets/tmpl/log.tmpl",
	)
}

func assetsTmplLogTmpl() (*asset, error) {
	bytes, err := assetsTmplLogTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/log.tmpl", size: 614, mode: os.FileMode(436), modTime: time.Unix(1484404079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplNavbarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x93\xc1\x8e\x9b\x30\x10\x86\xef\x3c\x85\xe5\x1e\x7a\x22\xbc\x00\x70\xe9\xb5\xc9\xa5\xea\x03\x0c\x78\x20\x56\x1d\x3b\xb5\x4d\x94\x0a\xe5\xdd\x3b\x60\x9c\x02\x25\xd1\xae\x56\x5a\x29\x7b\x01\x66\xff\xf9\x67\xe6\x9b\x49\xdf\x0b\x6c\xa4\x46\xc6\x35\x5c\x2a\xb0\xfc\x76\x4b\x72\x7a\x65\xb5\x02\xe7\x8a\x29\xca\xc2\x23\x25\x2d\x74\xca\xc7\x4f\xa9\x2f\x68\x1d\xc6\xcf\x46\x5e\x51\xa4\xde\x9c\x79\x99\x30\xfa\xcb\x85\xbc\xfb\xd4\x46\x7b\xa0\x3a\xa4\x52\x9d\x14\x93\x62\xad\x9a\x8c\x8e\x08\x02\xed\x4c\x33\xea\xaa\xce\x7b\xa3\x57\x52\x6f\xda\x56\x21\xab\x8d\x52\x70\x76\x28\x38\x13\xe0\x61\x0a\x0f\x65\x43\x3c\x86\xc1\xb6\xe8\x0b\xfe\x25\x64\xef\x51\x77\x8e\x33\xb0\x12\x52\xbc\x9e\x41\x0b\x14\x05\x6f\x40\x51\xc2\xb2\xf8\xd8\x80\x23\x45\x2c\x2f\x69\xa0\x74\xe0\x55\xe6\xd9\x10\xff\x4c\x79\x9e\x05\x14\xcb\x68\xdf\xcb\x86\xed\x7e\x3a\xb4\x07\x38\x21\xad\x71\x91\x02\x2b\x6e\x95\xa5\x69\x39\x3b\x5a\x6c\x0a\x9e\xf1\xb2\xef\x67\xa9\x5f\x1d\xab\x8c\xcf\x33\x58\x57\x40\x22\xf3\x5e\xe7\xfd\x9f\x07\x5e\x5a\xcc\xac\xf2\x8c\xce\xe0\xe9\x51\xc4\x55\xb2\x7f\x3b\x95\x22\xfe\x37\x6c\x72\x85\xa9\x53\x33\x8b\x78\xa4\xf4\xd8\xd8\xed\x08\x0f\x7f\xb3\xdd\x61\x54\x0d\x18\x18\xff\x66\x74\x23\x5b\xbe\x1a\x78\xb4\x56\x72\x66\x9d\x4a\x8f\x27\x06\xb5\x97\x97\xad\xbb\xd9\xc4\xf6\xc0\x65\x3b\x7d\x41\xea\x21\xfc\x54\x49\xfd\xeb\x0e\xbe\x1e\x9b\x27\xfe\x61\x8a\xff\x16\x10\xa0\x2b\x59\x26\x6f\x83\xf1\xdd\xbc\x2a\x09\x65\x06\x0c\xd4\xff\x87\x19\xfc\xf0\xe0\xe9\xcc\x5e\x13\x83\x1b\x9b\x27\x12\x61\x8a\x27\x30\x96\x91\x4e\x95\x5b\xbf\xd2\xe9\x35\xcf\xa8\x50\x99\xc4\x9e\xfe\x06\x00\x00\xff\xff\x32\xc4\x33\xee\x4f\x06\x00\x00")

func assetsTmplNavbarTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplNavbarTmpl,
		"assets/tmpl/navbar.tmpl",
	)
}

func assetsTmplNavbarTmpl() (*asset, error) {
	bytes, err := assetsTmplNavbarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/navbar.tmpl", size: 1615, mode: os.FileMode(436), modTime: time.Unix(1484404079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplStatusTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x41\x8f\xda\x3c\x10\xbd\xf3\x2b\xfc\xe5\xfe\x2d\xea\x1e\xab\x6c\xa4\x0a\xda\xad\xaa\xa2\x22\x41\x0f\x3d\x3a\xf1\x00\xee\x1a\x3b\xb2\x27\x54\x28\xda\xff\xde\x71\x1c\x8b\x94\x0d\xdd\x65\x61\x7b\x4a\x0e\xa0\xf8\xcd\xbc\x37\xf6\x9b\x28\x99\xba\x16\xb0\x92\x1a\x58\xe2\x90\x63\xe5\x92\xc7\xc7\x51\xfa\xdf\xf4\xdb\x64\xf9\x63\xfe\x91\x6d\x70\xab\xb2\x51\xea\xff\x98\xe2\x7a\x7d\x97\x80\x4e\xb2\x51\x5d\x23\x6c\x4b\xc5\x91\xd2\x36\xc0\x05\xd8\x84\xdd\xf8\xc4\xdc\x88\x7d\x36\x62\x74\xa5\x42\xee\x58\xa1\xb8\x73\x77\x49\x61\x34\x72\xd2\xb0\x49\xc0\xfc\xd5\xa5\xd0\x7c\x97\xf3\x96\x22\xe2\xdd\xfc\x9f\xd5\x36\x37\x68\x8d\xee\xe4\x37\x31\x9b\x77\xd9\xdc\x9a\x02\x9c\x63\x8b\xa6\xfa\x74\x4c\x4b\x47\x31\xb7\x91\x46\x51\xa5\x49\x36\xd9\x40\xf1\xc0\xca\x36\x2d\x6c\x1a\x1c\xe3\x5a\x30\xe4\x0f\xc0\xb6\xc0\x5d\x65\x69\x45\xae\x68\x71\xef\x23\x73\x05\x5b\x4f\x7d\x7b\xa0\x4e\xc7\x54\x5f\xd6\x5b\x2d\x72\x8a\xff\x9f\x18\x4a\xa3\x9d\xdc\xc1\x71\xd1\x0d\xfe\x47\x30\x0b\x29\x0e\xad\x2c\x41\xb4\x77\xb9\xb1\x74\xae\x20\x8e\xd2\x03\x85\x3f\xf4\xa7\xeb\x01\xb3\xfd\x40\x00\x45\x3c\xb0\x74\x8c\x27\x18\x62\x60\x3c\xd1\x53\x71\x84\xf4\x48\xd1\x6a\x7f\x71\x29\x1e\x9a\xe3\xec\xa2\x97\xbf\x24\x22\x58\x36\x95\x16\x0a\x64\x33\xda\x00\x5f\x03\xfb\x2a\x1d\x02\xf5\xd5\xf3\x9b\x39\x09\xfa\xab\xae\xc9\xeb\x9b\x56\x23\x70\x4e\x67\x61\xfb\x9d\x8e\xec\xa5\x76\x25\xd7\xd4\x44\x7b\x05\xbe\xcd\x95\xb1\xef\x73\x55\x91\xe5\x1f\x0a\x24\xeb\xd3\xb1\xc7\x9f\x13\x07\xe5\xe0\x7c\x9d\xa6\x35\x16\x68\xca\x17\x8a\x68\xf1\x17\x8d\x73\x5d\x6e\x90\x97\x9a\xf6\xdd\xd1\xcf\xdb\x59\xe5\xe9\xdd\xe0\x56\x44\x2e\x75\x6b\x0e\x56\x1a\x21\x0b\xf6\xc5\xe4\x57\x31\x2b\x58\x13\x3d\x1b\x8c\x8a\xc8\x6b\x8d\x9a\x18\xbd\x92\x6b\xf6\x49\xd2\x8b\x63\x66\xb4\x44\x63\xa5\x5e\x5f\xd3\xaa\x96\x35\x08\x0d\x86\x45\xe4\xd2\x27\x6b\x42\xa5\x82\x46\xc9\xd5\xdb\xfa\xd6\xea\x79\xb9\xc1\xb6\xd7\xdb\x76\x6f\xcc\x9a\x1e\xb1\x89\x32\x95\xf8\x67\xde\xdd\x37\x72\x83\x75\xec\x22\xeb\x3e\x2f\x97\xf3\xeb\x7e\x71\xb4\x2e\x2d\xc0\xee\x86\x77\xd8\x01\xe9\x1f\x00\x9e\x7e\xe8\xd3\xa2\x1f\x6a\x4e\xcf\x4f\x15\x8d\x99\x1d\xd0\xdf\x76\xc2\xd2\x71\xa0\xa4\x19\xac\x19\x48\x63\xcd\xbf\x03\x00\x00\xff\xff\x26\xae\xe4\xfa\xbd\x0e\x00\x00")

func assetsTmplStatusTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplStatusTmpl,
		"assets/tmpl/status.tmpl",
	)
}

func assetsTmplStatusTmpl() (*asset, error) {
	bytes, err := assetsTmplStatusTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/status.tmpl", size: 3773, mode: os.FileMode(436), modTime: time.Unix(1484404079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/custom.css": assetsCssCustomCss,
	"assets/tmpl/config.tmpl": assetsTmplConfigTmpl,
	"assets/tmpl/header.tmpl": assetsTmplHeaderTmpl,
	"assets/tmpl/index.tmpl": assetsTmplIndexTmpl,
	"assets/tmpl/log.tmpl": assetsTmplLogTmpl,
	"assets/tmpl/navbar.tmpl": assetsTmplNavbarTmpl,
	"assets/tmpl/status.tmpl": assetsTmplStatusTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"custom.css": &bintree{assetsCssCustomCss, map[string]*bintree{}},
		}},
		"tmpl": &bintree{nil, map[string]*bintree{
			"config.tmpl": &bintree{assetsTmplConfigTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{assetsTmplHeaderTmpl, map[string]*bintree{}},
			"index.tmpl": &bintree{assetsTmplIndexTmpl, map[string]*bintree{}},
			"log.tmpl": &bintree{assetsTmplLogTmpl, map[string]*bintree{}},
			"navbar.tmpl": &bintree{assetsTmplNavbarTmpl, map[string]*bintree{}},
			"status.tmpl": &bintree{assetsTmplStatusTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

