// Code generated by go-bindata.
// sources:
// assets/css/custom.css
// assets/tmpl/config.tmpl
// assets/tmpl/header.tmpl
// assets/tmpl/index.tmpl
// assets/tmpl/log.tmpl
// assets/tmpl/navbar.tmpl
// assets/tmpl/setup.tmpl
// assets/tmpl/status.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssCustomCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcf\x6a\xf3\x30\x10\xc4\xef\x7e\x0a\xc1\x77\x96\x09\xf8\x83\x16\x05\xf2\x2e\x6b\x69\xed\xa8\x96\xb5\x62\xb5\xce\x9f\x96\xbe\x7b\xb1\x93\x18\x85\x14\x53\x1d\x84\x0e\xf3\x9b\x99\x5d\xd4\x92\xbb\xaa\xaf\x4a\xdd\x4f\x02\xe7\x7c\xec\xb5\x50\x32\xea\x6d\x97\x2e\xfb\xea\xbb\xaa\xea\x8f\x69\x6c\x49\x98\x62\x21\x6d\xc1\x0e\x3d\xd3\x14\x9d\xb6\x14\x88\x8d\x12\x86\x98\x13\x30\x46\xd9\xaf\x32\xc1\x8b\x68\x08\xbe\x8f\x46\x59\x8c\x82\x7c\xb3\xb4\x14\x05\x7c\x44\x2e\x2c\x47\xb8\xe8\xb3\x77\x72\x34\xea\x7d\xb7\x86\x27\x88\x18\xb4\x78\x09\x58\x68\x17\xdf\x25\xb1\x23\x1e\x8d\x9a\x52\x42\xb6\x90\x71\x81\x9c\x3f\x15\xa5\x41\xe5\x04\xb1\xee\xa0\xe0\x3b\x8a\xa2\xb3\xff\x44\xa3\xfe\x3f\xa2\x12\x97\x09\x2d\xb1\x43\x36\x2a\x52\xc4\xfd\x5f\xc7\x9e\x0b\x3f\xe5\xbc\xea\xcf\x47\x2f\x98\x47\x1a\xf0\x21\xd7\x72\xf6\x22\xc8\xf3\x13\xac\xf8\x53\x59\xe3\x4e\xfd\x6b\x9a\xa6\xe9\xba\x15\xe9\x89\xfa\x80\x9b\x44\xd7\xcd\xcc\x4a\x24\xc8\xf9\x57\x61\xcf\x78\x2d\xaa\x20\x8a\x43\x3b\xbc\xea\xda\x00\x76\xd8\xda\x84\x23\xd7\x23\xb7\x61\xba\x4d\x26\xd0\x06\x54\x07\x25\x47\x04\xb7\xb9\x12\x08\xde\xe2\x33\x57\x2f\xb7\xce\xc2\x3e\xa1\x9b\x5d\x96\xaf\x7a\x50\xc2\xb5\xc3\x80\x82\xa5\x25\x25\xb0\x5e\xae\x46\xed\xea\x66\xab\xe1\x63\xd4\x9f\x00\x00\x00\xff\xff\xc6\x0c\x84\x58\xf7\x02\x00\x00")

func assetsCssCustomCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssCustomCss,
		"assets/css/custom.css",
	)
}

func assetsCssCustomCss() (*asset, error) {
	bytes, err := assetsCssCustomCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/custom.css", size: 759, mode: os.FileMode(436), modTime: time.Unix(1483795226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\x5b\x6f\x23\xb7\x15\xc7\xdf\xfd\x29\xd8\x69\x10\x27\x48\x34\x4a\xb3\x45\x1f\x62\x49\x40\xba\x9b\xc5\x6e\xa1\x75\x5c\xdb\x5b\xa0\x28\x0a\x81\xd2\x50\x23\x66\x29\x52\xe5\x50\xb2\x0d\xc3\xdf\xbd\xe0\xdc\x34\x17\x92\x43\xdd\x47\x5e\xfa\x21\x6b\x49\x3c\x9c\xc3\xf3\x27\xcf\x1c\x52\xf3\x8b\x7b\x7f\x7a\xf7\xfb\xdb\xfb\x7f\xdf\xfc\x06\x66\x62\x4e\x06\x17\x3d\xf9\x0f\x20\x90\x86\x7d\x0f\x51\x6f\x70\xf1\xfc\x2c\xd0\x7c\x41\xa0\x40\xc0\x9b\x21\x18\x20\xee\x01\xff\xe5\xe5\xa2\x37\x66\xc1\xd3\xe0\x02\x00\x00\x7a\xd1\x84\xe3\x85\x48\x5e\xc8\x9f\xe9\x92\x4e\x04\x66\x14\x04\x88\x20\x81\x6e\xd9\xc3\x77\xe3\xa5\x10\x8c\xfe\x08\xe6\x2c\x80\xe4\x7b\xf0\x9c\xb7\x95\x3f\x2b\xc8\x81\xe0\xa0\x0f\x92\x56\xfe\x02\x72\x44\xc5\x35\x0b\x50\xe1\xd7\xab\x92\x09\x9e\x82\xef\x04\xf7\x27\x04\x46\xd1\x35\x9c\x23\xd0\xef\xf7\xc1\x65\x72\xbd\xe0\xb2\x7a\x81\xd8\x29\xc6\xc1\x77\xf2\x4a\x18\xf4\xc1\x4f\x57\x00\x83\x1e\x90\x3d\xcc\x30\x09\x64\xff\x91\x4f\x10\x0d\xc5\xec\x0a\xe0\x1f\x7e\x50\x75\x90\x79\x1a\x5b\x80\x7e\xd9\xf8\x3f\xf8\xbf\x4a\x03\xe9\x67\xdc\xca\x17\x4f\x8b\xd4\xcb\x19\x0e\x02\x44\x2f\xc1\xb7\xdf\x26\x7d\xf9\x94\x05\x68\x3d\x88\x8f\xd7\x37\x9f\xef\x95\x43\xc8\x7e\x12\xab\x15\x24\x4b\x04\xfa\xe0\x72\x0a\x49\x84\x2e\xaf\xb4\xcd\xcb\x71\x02\x97\x86\xa6\xa9\x00\x98\x52\xc4\x3f\xdc\x7f\x1a\xca\xe6\xef\xe2\xa0\x6a\x8c\x5e\x6a\xef\x96\xdf\x79\x01\x88\x44\xe8\xab\x92\x43\xf0\xe5\x26\x6a\x64\x73\x76\x33\x51\x6e\xd1\x0a\x71\xb1\xad\x28\x17\xe5\xdf\x7a\xdd\xe2\x0a\xee\x05\x78\x05\x62\x17\xfb\xde\x84\x51\x01\x31\x45\xdc\x5b\xaf\xee\x62\x46\xa0\x70\x35\x86\x69\x46\xc8\x1b\xf4\x66\x3f\x0f\xde\x32\x3a\xc5\x61\xaf\x3b\xfb\xb9\x68\x88\xa7\xc0\xff\x84\xa2\x08\x86\xe8\x65\xed\x44\xf1\x82\x90\x20\x2e\x40\xfc\xdf\x4e\x00\x69\x28\xaf\xfc\xfc\xbc\x36\xea\x75\x03\xbc\x2a\x76\x89\x68\x50\xba\xf6\x94\xf1\x39\xc0\x41\xdf\x63\x2b\xc4\x1f\x38\x16\xc8\x03\x30\xce\x46\x7d\xaf\x3b\x89\xbd\xea\x7a\x60\x8e\xc4\x8c\x05\x7d\x6f\xc1\x22\xe1\x01\x44\x27\x72\x3a\xf4\xbd\xf9\x92\x08\xbc\x80\x5c\x74\x65\x37\x9d\x00\x0a\xe8\x0d\x7a\xf1\x8b\xf5\x35\x7b\x98\x2e\x96\x42\x4e\xe0\x79\xe9\x2a\x49\x17\xd1\x72\x3c\xc7\xc2\x03\xf1\x74\xe8\x7b\x77\x70\x85\xbc\x6c\x70\x63\x41\xc1\x58\xd0\x0e\x09\xe3\x7f\x16\x1c\xcf\x21\x7f\xf2\x40\x24\x9e\x08\xea\x7b\x01\x8e\x16\x04\x3e\xfd\x82\x29\xc1\x14\x5d\xcd\x21\x0f\x31\xed\x70\x1c\xce\xc4\x2f\x6f\x7e\x5a\x3c\x7a\x83\xea\x38\xab\x03\x9b\x62\x82\x0a\xa3\x0b\x91\xd0\x74\x5e\x90\xb3\x30\x24\xe5\x08\xde\xb1\x07\x4a\x18\x0c\x74\xa3\x08\xd0\x14\x2e\x89\x28\xf4\x98\x05\x6c\x33\x67\x2d\xa4\xd8\x79\x2c\x9f\x17\x9b\x8d\xa4\xd6\x9f\xf4\xd9\x03\x14\xce\xa5\x87\x4f\x63\x26\xfc\x64\x30\xcd\xae\xd5\x83\x32\x7b\x33\xb8\x7f\xc0\x42\x20\x0e\xee\xf1\x1c\xc9\xf6\x51\xaf\x3b\x7b\x33\x50\x2e\x0c\x01\xc7\x04\x75\x38\x8a\x16\x8c\x46\x78\x55\x1b\x75\xfc\x79\xa9\x31\x48\x4c\x22\xc1\xf1\x02\x05\xe9\xab\x31\xe3\x01\xe2\x28\xa8\x98\x27\x5d\xc8\xfb\x7b\xfd\xfd\xe4\x33\xae\xfe\x20\xf9\x30\x18\x44\x13\x8e\x10\x8d\x23\x13\xf5\xba\x42\xd3\x4d\xd6\x1a\x3d\x4e\xc8\x32\x40\x80\xa3\x05\xc1\x36\x06\x98\xa6\x06\xc2\xa2\xf1\x84\x2d\xa9\x68\x6e\xc6\xc4\x0c\x71\x8b\xee\xf4\x2d\x7a\x5d\x55\x58\x7a\x5d\x4d\x20\x7b\x62\x5d\x33\x55\x7f\x9e\x9f\xb9\xcc\x76\xe0\x1b\x4c\x03\xf4\xf8\x23\xf8\x46\xa4\x53\x02\xfc\xd2\x07\x7e\x92\x4d\xfd\x74\xba\xf8\xf9\x74\x79\xa9\x67\x7a\xd0\xa8\x96\x31\x7d\x25\x37\xc3\x6c\x8a\x8b\xf4\x82\x99\x33\x91\x9f\xde\xad\xf2\x15\x15\xd7\x1e\x5e\xd7\x1c\x41\xed\x87\xc9\xc8\x09\x8e\xc4\x3d\x7a\x14\x63\xf6\xb8\x1e\xb7\x7f\x17\xcf\x28\x79\x97\x8c\x80\xc2\x91\x64\xc2\x8d\xe2\x09\xe7\x69\xe2\x00\x12\x35\x1a\xf4\x6d\xf0\x6e\xcc\x18\xb9\x43\x04\x4d\x2a\xfe\xfd\x96\xcc\xe1\xdb\x64\x0a\xab\x5c\x4c\x67\xf9\x28\x9d\xe5\x27\xf1\xf2\x63\xb2\x70\x6e\x85\xd2\xc3\x74\x59\x8d\xb8\x38\xac\x77\x22\x51\xf7\xf7\xe9\x47\x2a\x6e\x04\x2f\xf8\xf7\x56\xae\x55\x95\x6b\xf1\x22\x3e\xa0\x53\xbd\xa4\xaa\x4a\xa7\x7d\xf2\xa2\x76\x63\xc0\x74\xca\x3c\x20\xef\x3d\x1d\xc1\xc2\x50\x26\xf8\x78\x03\x93\xbd\x07\x79\x88\x44\xdf\xfb\x73\xea\x7e\x27\x77\xbf\x33\xc5\x44\x20\x3e\x7a\x7e\x4e\x16\xf4\xcb\x8b\x22\xe1\x56\x7f\x02\x24\x20\x26\x11\x98\x21\x8e\xcc\xbe\x77\x13\x7f\x0d\xc3\x3f\x42\x70\xd2\xf2\x0c\x30\x3a\x21\x78\xf2\xa5\xef\xad\x77\x7b\x62\x86\xa3\x1f\xc1\xa5\x45\x58\x2e\xbf\xf7\x06\xc9\x06\x63\x97\x41\xa9\x13\x31\x28\x14\x88\xea\x30\x34\xdc\xd4\xcc\x31\x52\x16\x35\xf9\x50\xbb\x30\x08\x2a\xc5\x4d\xf3\x0c\x30\xd5\x2e\xd7\xe8\xa1\x26\x41\x56\x41\x1a\xf2\x2f\x28\xd4\x1e\xfa\xcf\xb7\xbf\x07\xb6\xa5\x85\xf6\x5e\x5c\xbf\xe7\xf6\xba\x71\x2d\x54\xac\xcd\xe2\x4d\x45\x61\x57\xb1\x87\x9b\x71\xb1\x78\x8b\x93\x06\x98\xc2\x00\x79\xf1\xde\xc4\x26\x5f\xc8\x82\x2d\xfe\xbd\xef\x75\xfe\xe2\x01\xce\x92\xf2\x12\x12\x16\x7a\x00\x72\x0c\x3b\x04\x8e\x11\x21\x28\x18\x3f\x59\xf5\xd8\x11\x58\x90\x6a\xdd\xa8\xf4\xb4\x93\x5d\x26\xbd\x28\x9b\x2c\xe7\x88\xea\x26\x70\xdd\x5c\xee\x1a\xf5\xed\xd5\x36\xe9\xd9\xd2\x0e\x79\x69\x42\x58\x84\xd2\xcc\x1c\xe0\x68\x8e\xf3\xce\xbd\xc1\xb7\x32\x2e\xd1\x55\x73\x8e\x01\x49\x65\x5e\xf6\x2d\x09\x9c\xad\x72\x59\x9c\xdf\x25\xe9\xbc\x5c\xd2\xd7\xae\x55\xde\xcf\x36\xc7\x49\x4e\xe7\xa6\x28\xcd\xde\x0c\xde\xc7\x5e\x99\xaf\x5d\xbd\x40\xc3\x16\x43\x69\xbe\xfb\xb6\x43\xdd\xad\x7e\x2b\xa2\x6e\x6f\xc8\xe4\x6a\x83\x60\x20\x4b\x47\x73\xc6\xd1\x59\xc6\x19\x79\x33\x53\xfd\x1d\x4a\xd1\xd2\x7e\xf0\xa6\x2d\x85\xba\xfd\x16\x81\x5a\x40\x39\xe5\x69\xc3\x56\x49\x67\xbd\x91\x01\x30\x6c\x08\x92\x29\xed\xdf\xa4\xde\xa8\x8a\xc6\x64\x2d\xfa\x99\xc3\xa6\xf2\x51\xe9\xee\x81\x24\x05\xdb\x46\x7e\xc9\x09\x68\x57\xf4\x3f\xdf\x0e\x2d\x04\x58\x72\x32\x7a\x35\x22\xcc\x60\x04\xe6\x28\xc0\xf0\x68\x0a\xe8\x36\x73\xa9\x06\x1f\x60\xf4\x49\xfa\x63\x10\x60\x06\xa3\x51\xec\xf3\xab\x88\xfe\x92\x93\x16\xc5\xfe\xf3\xed\xb0\x21\xf2\x4b\x4e\xce\x3e\xee\x1c\x89\x07\x84\x04\x0a\xda\x12\xf9\xdb\xcc\x21\x43\xf0\x73\xa7\xcf\x3e\xfc\x53\xb8\x62\x1c\x0b\x04\xc4\x8c\xa3\x68\xc6\xc8\xf1\x74\xd0\x1f\xd6\xa4\x4a\xbc\x4f\x7d\xbb\xcf\x5c\x33\x28\x92\x8d\x63\x94\x8f\xe3\xec\xa5\xc9\x27\x59\x1b\xb5\xc9\x57\x89\x8d\x38\xf9\x48\x5e\x91\x3a\x04\xd2\xf0\x48\x72\x98\x4f\xd2\xa5\x54\xfa\x73\xf4\x54\x01\xe9\x6d\x7e\xc2\xf3\xfc\x5c\x93\x73\x08\x69\x68\x75\x76\x58\xf2\xeb\x70\x3b\x13\xbb\xdd\x46\xed\x80\x45\xdd\xc8\xb8\xf3\x05\xa5\x8d\xac\xff\x2f\x1c\x61\x46\xdd\x7e\x56\x6b\xe0\xf6\xb3\x96\x06\x32\x45\x8c\xd1\xf1\x0a\x4a\xe3\x76\x2a\x99\xd6\xfe\x50\x7a\x64\x48\xd4\xab\xa4\x59\xec\xf8\xd9\x67\xe8\x29\x9c\x20\x10\x7f\x77\x00\x08\xfe\x82\x08\x9e\x31\x76\xac\x3b\xe8\x1e\x52\x76\xaa\x85\x1c\x85\x1f\x8f\x62\xb4\x1e\x85\x29\x95\xa7\x52\xbf\x97\x76\xbf\x4a\xbb\x61\x6e\xd6\x9a\x0c\x0f\x76\xd2\x74\x4c\x96\x9c\xa3\xe0\xec\x55\x4d\xc7\xb1\x85\xae\x7f\x4f\x2c\x5f\x9d\xb2\x32\x81\x3f\x20\x78\xfe\x0b\x36\x1b\xc8\x16\xda\x7e\x48\x4d\x5f\x9d\xb8\x7f\xb0\xa7\xb3\xd7\xf5\x0f\xf6\xb4\x85\xa4\xff\x60\x4f\xaf\x49\x4d\x19\xb5\x56\x95\x35\xf2\xf3\xe6\xaa\x26\x16\xfb\xdc\x8b\x1a\x02\x69\x30\x87\xfc\x4b\xab\xe2\x3f\x4c\x9d\xb2\xa9\x2c\x93\x96\xe7\xaf\x03\x0b\x59\xbb\x34\x60\x21\xb3\x88\x3f\x0b\x59\x5b\x62\x7f\xca\x6d\xfe\x10\xd2\x70\x09\x43\xe4\x36\xfa\x5a\x03\xb7\xd1\xb7\x34\x08\x06\x73\x4c\x41\x84\xa8\x5c\x74\x4d\x0f\x04\xeb\xba\xd8\xe5\x8c\xf6\x3d\x61\x50\xfc\xed\xaf\xca\x73\xda\x6c\xa2\xfb\x9f\x30\xbd\xcb\x5c\x34\xe4\x09\x92\xb5\x9f\x63\x3a\xca\xc7\xd4\x96\x94\x01\xb6\x56\x08\x3e\xb6\x5f\x21\xf8\xb8\x99\x42\xf0\xb1\x7d\x0a\x9d\x24\xa9\xff\x1a\x3f\x1c\xe9\x72\xb9\xd6\xc0\xe5\x72\x4b\x83\xfc\x5b\xb7\xa3\xe5\x88\xc9\x0c\x4d\xbe\x94\x0b\xbb\x64\x3a\x67\x5f\xb1\xa9\x52\x41\xf2\x34\x70\xf6\xbd\x5a\x5b\xd6\x3e\xd8\xf5\x4b\xe8\x16\x04\x3d\xfb\xce\xd9\x10\xf5\xcc\xdb\xf3\x0f\x3b\x23\x84\x3d\xb4\x21\xe8\xb1\x23\xa6\x90\xc7\x0d\xce\x3e\xe0\x13\x46\x08\x8a\x47\x74\xea\xa7\xec\xd2\xc0\xbf\x5d\x3b\x64\x88\x7e\xc1\xed\xb6\x48\x70\xd4\x32\x63\xe3\x67\xa7\xa7\x8c\x89\xdd\x9e\x31\xcf\xd9\x97\x14\x15\x55\x3f\x6d\xfe\x96\xb0\xc8\x8a\x67\xd1\xfa\xaf\xf9\x48\xf1\x76\x23\x10\x5d\xc0\x4c\xb3\x24\xfa\xb5\x60\xa6\xaf\x02\x04\xcd\x9f\x04\x53\xb0\x27\xb9\xa0\xc7\x02\x41\x33\x67\x8e\x00\x82\x66\x97\x52\x83\xa0\x6b\x47\x8e\x06\x82\xd6\x9e\xbd\xca\x3d\xac\x40\x8c\x6b\xdf\xce\x12\x62\xcc\xdd\x77\x10\x63\x11\x62\x34\x84\xe5\xb5\x41\x8c\xf9\x50\x1d\xc4\x68\xdf\xe2\xa0\x00\xe2\x36\x37\x01\x1b\x00\xd1\xb4\xd6\xb7\x03\x10\x0d\x3d\x3a\x00\x71\x8f\x00\xa2\x45\x9c\x1d\x80\xe8\xce\xfe\xd6\x66\x67\x7c\xf6\x77\x5a\x04\x2e\x2f\xf3\xb4\x00\xe2\xba\xe0\x73\x00\x62\xb5\x87\x7d\x47\x5f\x09\x20\xd6\x04\x70\x00\xe2\xda\x7c\x0b\x05\x2a\x28\x56\x55\x83\x3a\x80\x58\x13\xc0\x01\x88\x87\x8b\x7d\x09\x40\x54\x46\xde\x01\x88\x07\x88\xbc\x02\x40\xac\x05\xdf\x01\x88\xd5\x7e\xb6\xd0\x41\x7f\xd0\xd2\x0c\x20\xd6\x14\x71\x00\xa2\xbe\xa3\x43\x68\x63\x02\x10\xf5\xcb\xe5\x15\xa9\xd3\x6a\x00\xb1\xa6\x40\x15\x40\xac\xca\xe9\x00\x44\x07\x20\xda\x19\xb8\xfd\xac\xa5\xc1\x49\x01\xc4\xea\xfa\x56\x03\x88\xb5\x34\xe1\x00\x44\x75\x57\xa7\x48\xd9\xb6\x00\xa2\x46\x6a\x07\x20\x36\x76\x76\x6a\x55\xcd\x00\xa2\x49\x57\x07\x20\x36\xf4\x76\x6a\x69\x1b\x00\x44\x93\xb6\x0e\x40\x34\x74\x74\x6a\x5d\xf5\x00\xa2\x49\x52\x07\x20\x1e\xb6\xac\x29\x03\x88\x3a\x01\x1d\x80\x78\xb8\xb2\xb2\x0a\x20\xea\x2b\x4b\x07\x20\x6e\x62\x00\xec\x35\x28\x01\x88\xda\xf8\x3b\x00\xd1\x01\x88\x76\x06\x6e\xa3\x6f\x69\xd0\x2a\x00\x51\x75\xb0\x67\x00\x10\x95\x07\x85\x0e\x40\x54\x75\x71\x78\x85\x94\x00\xa2\x41\x21\x07\x20\x02\x07\x20\x5a\x19\xb8\x5c\x6e\x69\x70\x4a\x00\x31\x4f\x0c\x3a\x00\x71\x9d\x0a\x1c\x80\x58\xb0\xde\x6b\xd0\xeb\x00\x62\x2d\xea\x0e\x40\xdc\x7b\xd0\x2b\x00\x62\x3d\xe4\x0e\x40\xdc\xef\xde\xd1\x04\x20\xd6\xa2\xef\x00\x44\x07\x20\x6e\x04\x20\xde\x21\xc8\x27\xb3\x33\xe6\x0f\xff\xb7\x44\xdc\xea\x0f\x56\x72\x14\x2d\x49\x02\xc1\x7c\x25\x9c\x62\x14\x6b\xab\x02\x54\x32\xd5\x8f\x05\x29\x46\xe9\xf5\x0e\xcf\x28\x26\x57\xf2\xff\x99\xcc\x0a\x50\xf7\x20\x9d\x2f\x07\xe5\x12\xa3\xf5\x23\x8b\xa9\x3f\xb7\xf1\xe4\xbb\x7f\x5a\x20\x85\x4b\xc9\xcc\x1c\xc9\x00\x7a\xc0\xf3\x80\xc7\xd1\x44\xee\x13\x81\x37\xc7\x8f\x32\x58\xde\x82\x2d\x96\x04\xf2\xe3\xc2\x94\xa9\xeb\x15\x94\x32\xf7\xfa\x2c\x49\xca\xcc\x7b\x07\x52\x16\x41\x4a\x7d\x54\x5e\x1b\x47\x99\x8d\xd4\x61\x94\xfb\x6c\x71\x50\xd0\x72\xe3\xbb\x98\x0d\x65\x69\xc8\x03\xdb\x41\x96\xfa\x0e\x1d\x63\xb9\x47\xc6\xb2\x39\xcc\x0e\xb1\x74\xa7\x9b\x6b\xb3\x33\x3e\xdd\x3c\x2d\xe4\x97\x16\x7f\x5a\xc0\x32\x2f\x03\x1d\x5f\x59\xed\x61\xbf\xa1\x57\xd2\x95\xd5\xe8\x3b\xb8\x72\x6d\xbe\x45\xf8\x2b\x98\x59\x59\x80\x3a\x5a\x59\x8d\xbe\x23\x2b\x0f\x15\xf8\x12\x57\xa9\x0a\xbb\xc3\x2a\xf7\x1e\x76\x05\x54\x59\x8d\xbc\x63\x2a\xab\xfd\x6c\x21\x82\xee\xbc\xa5\x99\xa8\xac\xca\xe1\x80\x4a\x7d\x47\xfb\x17\xc6\x84\x53\x6a\x17\xca\x2b\x92\xa6\xd5\x34\x65\x55\x80\x2a\x4c\x59\x96\xd2\xa1\x94\x0e\xa5\xb4\x33\x70\xfb\x56\x4b\x83\x93\xa2\x94\xe5\xd5\xad\x06\x29\xab\x19\xc2\x71\x94\xea\xae\x4e\x90\xac\x6d\x31\x4a\xa5\xcc\x0e\xa2\x6c\xec\xec\xc4\x92\x9a\x19\x4a\xbd\xa8\x8e\xa0\x6c\xe8\xed\xc4\xba\x36\x00\x94\x7a\x61\x1d\x3e\x69\xe8\xe8\xc4\xa2\xea\xe9\x49\xbd\x9e\x8e\x9d\x3c\x64\x1d\x53\x26\x27\x35\xda\x39\x70\xf2\x50\x45\x64\x15\x9b\xd4\xd6\x91\x8e\x9a\xdc\xc4\x00\xd8\x0a\x50\x62\x26\x75\xc1\x77\xc8\xa4\x43\x26\xed\x0c\xdc\x86\xde\xd2\xa0\x55\xc8\x64\xfd\xf8\xce\x00\x4c\xaa\xce\x02\x1d\x2f\xa9\xea\xe2\xd0\xf2\x28\x69\x49\xbd\x3c\x0e\x96\x04\x0e\x96\xb4\x32\x70\x59\xdc\xd2\xe0\x94\xb0\x64\x9a\x15\x74\xa8\x64\x9e\x07\x1c\x29\x59\xb0\xde\x63\xc4\xeb\x9c\x64\x35\xe4\x0e\x93\xdc\x73\xc4\x2b\x90\x64\x2d\xde\x8e\x91\xdc\xe7\x4e\xd1\x44\x48\x56\x43\xef\x00\x49\x07\x48\x6e\x04\x48\xde\x10\x38\x41\xe0\x9a\x09\x3c\xc5\x13\x58\xaf\xc7\xce\x08\x95\x84\x71\x56\x8a\x10\x99\x36\xc3\x1e\xcb\xc8\x08\x36\xee\x11\x5b\xdc\x0d\xf3\x29\x24\xe1\x2a\x1e\x52\xd4\xcc\x8f\x65\xf4\x7f\x95\x11\xb8\x43\x64\xba\x4e\x10\xb4\xd8\x6a\x11\xb7\x8a\xe3\x34\x92\x71\x3a\x28\x70\x57\x4c\x65\x16\xbe\x7f\x96\x8a\x18\xfd\x8e\x35\xdb\xce\xe5\x7d\x12\x3c\x72\xf5\x7c\xa4\x02\x71\xa8\xd8\xbe\x7c\x9d\xcb\x05\x00\x2b\xac\xb8\xcd\xab\xaa\xa0\x68\x71\x19\xe1\xc2\xdb\x27\x5c\x37\x45\xef\xd2\x85\x52\xf4\x6c\x87\x95\x61\xe9\x54\xf5\xa1\x41\x95\x63\x29\x49\x5b\x74\x6c\x07\x88\x76\xdf\x4b\x76\xc8\x42\xb7\x54\xdb\xbd\x06\x87\x2c\x2c\xae\x3d\xc2\xc2\x53\xae\x39\xe9\x4d\xba\xd6\xa4\x27\x2d\xba\xfb\xdc\x21\xbe\xaa\x62\x78\x67\x34\x9b\x9b\xcf\xb4\x62\x56\x83\x45\x16\xff\x87\x8a\x05\xe3\x16\xad\x08\x0b\x41\xfc\x87\xec\xcf\x60\x5d\xd8\x3f\xe7\x10\xc5\xd3\xc0\x97\x2f\x0a\x0f\x30\x64\xd3\x37\x99\x24\xfe\x35\x9c\x23\xe3\xb3\x0a\xbb\xa2\xfa\x9b\xba\x2b\x75\xd5\xbb\xfb\x81\x45\xe2\x74\xee\xd2\xe5\x7c\x8c\x78\xc5\x61\x39\xc5\xf4\x0e\xdf\x30\xde\x36\x87\x09\x0b\x47\xf1\x6c\xd7\x7b\x3d\x64\xe1\x50\xb6\xd8\xd2\xf3\x3d\x24\xb4\xc2\xaf\xbd\x6e\x62\xd6\xeb\xce\xc4\x9c\x0c\x2e\xfe\x1f\x00\x00\xff\xff\x07\xf4\x8c\x5b\x22\xc2\x00\x00")

func assetsTmplConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplConfigTmpl,
		"assets/tmpl/config.tmpl",
	)
}

func assetsTmplConfigTmpl() (*asset, error) {
	bytes, err := assetsTmplConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/config.tmpl", size: 49698, mode: os.FileMode(436), modTime: time.Unix(1483893028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x5d\x4f\xe3\x3a\x10\x7d\xe7\x57\x58\x7e\xb9\x0f\xf7\x36\xbe\xfd\x58\xda\x5d\x35\x95\x58\x58\x4a\x61\xf9\x58\x68\x41\xec\x9b\xeb\x4c\x12\x87\xd8\x0e\x9e\x49\xd3\x6c\xd5\xff\xbe\x6a\x0a\x14\x21\x90\x78\xcb\xcc\xe4\x1c\x9f\xa3\xa3\xb3\x5a\x45\x10\x6b\x0b\x8c\xa7\x20\x23\xf0\x7c\xbd\xde\x1b\x6e\x3e\x47\x7b\x8c\x31\x36\x34\x40\x92\xa9\x54\x7a\x04\x0a\xf9\x6c\x7a\xdc\x1a\xf0\xd7\x27\x2b\x0d\x84\x7c\xa1\xa1\x2a\x9c\x27\xce\x94\xb3\x04\x96\x42\x5e\xe9\x88\xd2\x30\x82\x85\x56\xd0\x6a\x86\xff\x98\xb6\x9a\xb4\xcc\x5b\xa8\x64\x0e\x61\x9b\x8f\xf6\x1a\xa6\xd5\x4a\xc7\x2c\x98\x21\xf8\x0b\x69\x60\xbd\xde\xd2\x93\xa6\x1c\x46\xab\xd5\xab\xc3\x3f\xc8\xe6\x8e\x86\x62\x7b\x7a\xc2\x42\x8e\x6f\x30\xe7\xf5\x3b\x7f\xd9\x68\xbd\xde\x3e\x37\xcc\xb5\x7d\x60\x1e\xf2\x90\x23\xd5\x39\x60\x0a\x40\x9c\xa5\x1e\xe2\x90\xa7\x44\x05\x7e\x13\xc2\xc8\xa5\x8a\x6c\x30\x77\x8e\x90\xbc\x2c\x36\x83\x72\x46\xbc\x2c\x44\x37\xe8\x06\x7d\xa1\x10\x77\xbb\xc0\x68\x1b\x28\x44\xce\xb4\x25\x48\xbc\xa6\x3a\xe4\x98\xca\xee\xa0\xd7\xfa\x7e\x7b\xaf\xf5\xcd\xe4\x18\xce\xda\xd1\xd8\x9c\x5e\x1f\x3c\xd4\xaa\x3c\x39\x38\xb9\x4e\xba\x9d\x4b\x33\x53\x55\xd5\x77\xb6\x7b\x7d\x1f\x25\xbd\x5b\xf9\xef\x95\xb9\x99\xe2\x1f\x71\xb6\x3f\x58\xcc\xa3\x1f\x59\xda\x2b\x39\x53\xde\x21\x3a\xaf\x13\x6d\x43\x2e\xad\xb3\xb5\x71\x25\x3e\xa7\xf1\x19\x53\x2a\xb2\x19\x06\x2a\x77\x65\x14\xe7\xd2\x43\xe3\x48\x66\x72\x29\x72\x3d\x47\x11\x3b\x4b\x2d\x59\x01\x3a\x03\xa2\x17\xec\x07\xdd\xc6\xde\xeb\xf5\x8b\xc3\x4f\xbc\x2a\x24\x22\x10\x36\x1c\xaa\x44\x72\xe6\x09\xb9\x85\xa2\xf2\xba\x20\x86\x5e\xed\x04\x6e\xb4\x04\x89\x73\x49\x0e\xb2\xd0\xf8\x46\x5f\xf6\x58\x82\xaf\x45\x3b\x68\x77\x82\xde\xd3\xd4\x08\xca\x90\x8f\x86\x62\x4b\x38\xfa\x98\xfd\xb3\x99\x66\x6f\x23\xcd\xde\x4d\x74\xaa\xbe\x4c\x7e\xe9\xf9\xff\x9d\xfe\xe3\xa2\xce\x6e\xce\xe3\x93\xec\xf2\x5c\xfe\x7c\x88\xcb\xbb\xdb\xe5\xef\xe5\xec\xca\x1e\x9e\x1e\xf4\xf3\x8e\x39\xbc\xbb\x98\x14\xe3\xaf\x66\x7c\x78\x34\xa8\xc6\x17\x13\x75\x75\xd4\x9f\x2e\xe5\xc7\x89\xee\xbc\x7c\x6c\xa6\xc8\x25\xc5\xce\x9b\x80\x2a\x4d\x04\xbe\x71\x52\xe9\x28\x01\xc2\x46\xf0\x4b\x69\x4b\x8a\x37\xa5\xdd\x91\x0e\xc5\xb6\xe0\xcf\xad\xf8\x1b\x00\x00\xff\xff\xf8\x1d\xf8\x44\x04\x04\x00\x00")

func assetsTmplHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplHeaderTmpl,
		"assets/tmpl/header.tmpl",
	)
}

func assetsTmplHeaderTmpl() (*asset, error) {
	bytes, err := assetsTmplHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/header.tmpl", size: 1028, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\x4b\x8f\xdb\x36\x10\xbe\xef\xaf\x98\xb2\x01\xda\x02\x91\x89\x24\x40\x0f\x01\x2d\x20\x4d\x82\x36\x40\x92\x06\x69\x52\xa0\xc7\x91\x44\x4b\xec\x52\x1c\x95\xa4\xbd\x70\x05\xff\xf7\x82\x92\xed\xb5\x9e\x5e\x3b\x69\xbb\x07\xaf\xa4\x79\x7d\x9c\xb7\x24\xbe\x79\xf5\xeb\xcb\x4f\x7f\x7c\x78\x0d\x85\x2f\x75\x7c\x23\xc2\x3f\xd0\x68\xf2\x25\x93\x86\xc5\x37\x75\xed\x65\x59\x69\xf4\x12\x58\x21\x31\x93\x96\xc1\x62\xb7\xbb\x11\x09\x65\xdb\xf8\x06\x00\x40\x64\x6a\x03\xa9\x46\xe7\x96\x2c\x25\xe3\x51\x19\x69\x59\x4b\x0b\x7f\xa7\x2a\x0c\x6e\x12\xdc\xab\x38\x32\x9c\x2a\xf8\x73\x5d\x26\xe4\x2d\x99\x13\x05\xad\x12\xb5\x82\xc5\x67\x27\xed\x7b\x2c\xe5\x6e\xd7\x21\x8a\xe2\x49\x5c\xd7\x27\xd4\xef\x1c\x24\xe4\x05\x2f\x9e\xf4\xb5\x48\xed\xc6\xa4\xdf\x6d\xa7\xf8\x4d\x36\x60\x7f\x1a\xe3\xda\x53\x89\x5e\xa5\xa8\xf5\x16\x52\xd2\x5a\xa6\x1e\xd0\x64\x90\x58\xc2\x2c\x45\x17\xee\xb6\x70\xab\x4c\xe6\x80\x56\xa0\xcc\x8a\x6c\x90\x20\x03\x2b\xb2\xb0\xa5\xb5\xe0\xc5\xd3\xb1\x33\xfe\x44\x7e\xec\x88\x08\x85\x95\xab\x25\x2b\xbc\xaf\xdc\x73\xce\xfd\x9d\xf2\x5e\xda\x45\x4a\x25\xaf\xeb\x7b\x29\x76\xf0\x64\xe2\x0d\x24\xde\x44\x8e\x52\x85\x3a\x52\x29\xb5\xf7\x7b\x41\x16\x0b\x57\xa1\x39\x70\xaf\x10\x56\x78\xa0\x85\x4b\x4c\xbd\xda\x48\x16\x0b\x1e\xd8\x62\xc1\xf1\x21\xae\xec\xa3\xc4\xaa\x72\x8b\x13\xa8\x5f\x0b\x5d\x85\xce\x9d\x83\x37\x8c\xdc\xd0\x87\x52\xfa\x4c\xa6\xb7\xff\x06\xc4\xa3\xf2\x69\x90\x03\x40\x29\x19\x47\x5a\x2e\x32\xb9\x91\x9a\x2a\x69\xdd\x22\x27\xca\xb5\x6c\xc2\x8c\x95\x72\xe1\x87\x6f\x94\x53\x64\xf6\xa4\xf0\xb4\x21\xff\xb5\x26\x8f\xee\x2c\xfc\x56\x6a\x14\x7d\x4b\x7a\x48\xf4\x07\xc8\x73\xe5\x8b\x75\xd2\xe0\x50\x77\xe8\xf1\x16\x79\x19\x6a\xea\x3c\x9c\x46\x70\x1c\x4e\x43\x3a\x07\x47\xf0\x4c\x6d\xe2\x93\x6e\xb2\xd6\x07\x35\x06\x37\x60\x70\x13\x79\x4c\x5c\xa7\x9f\x08\xad\xc0\x92\x96\x4b\x56\x59\xe9\xa4\xf1\x4d\x65\x1e\xb1\x1e\xcd\x21\x64\xe8\x31\xf2\x94\xe7\x81\xd9\x63\xc2\xf6\xe7\xfe\xb6\xa0\x52\xb2\xf8\x17\x2a\x65\x40\x23\xb8\x56\xa7\x06\xea\xda\xa2\xc9\x25\x3c\xba\x95\xdb\xc7\xf0\x68\x83\x1a\x9e\x2f\x61\xf1\xb2\xed\x14\x8a\xcc\x3b\xac\x3a\xd9\x39\x81\x68\x16\x42\x5d\x07\xf5\xbb\x1d\x8b\x0f\x57\xe3\x50\xba\x95\x20\xf8\x5a\xc7\xe3\xcd\xd7\x63\x12\x85\x0e\x2e\x8d\xef\xb5\xdf\x86\x4b\x65\x4b\xd6\x1c\xfb\x94\xbf\x42\x13\x32\x26\x93\xa0\x0c\x1c\x1c\xd7\x91\xed\x5b\x09\x12\x1a\x9a\xdf\x28\x0b\x5e\xb2\x23\x02\xa3\x42\x51\x98\x40\xca\xe4\x13\xfc\x8d\x4c\xf1\xac\x2b\xe2\x95\xd7\x6d\x28\x5b\xaf\x71\x4d\x39\x67\xf1\x6b\x6b\xc9\xc2\x5b\xca\x5b\x97\x15\xcf\x26\x20\xb4\xc9\x35\x46\x6a\xbb\xf5\x5b\xca\x7b\x5d\x66\xfe\x04\x61\x6c\xb2\x58\x54\x56\xc6\x22\xa5\x4c\x86\xb9\xd5\xe8\x10\xbc\xb9\x15\xbc\x21\xcd\x99\x1d\xe9\xbb\xe7\xec\x4d\x03\x94\x65\xfc\x9e\x7c\xa1\x4c\x0e\x9e\xc0\x15\x74\x27\xb8\x2c\xaf\x70\xc6\xb0\xdd\xce\x88\x4c\xa5\x43\x18\x93\xff\x65\x32\xcc\x0f\x82\xf8\xd3\xbe\x9b\xdf\x97\xad\xbb\x3a\x5d\x2e\x0e\x4d\x9b\x5f\xd3\x1d\xa3\xa7\x3e\x14\xf5\x14\x11\xae\xe9\x48\x23\x36\xba\x8d\x65\x82\xe9\xe0\xdb\xba\x0e\x46\xfa\xdd\x69\xde\x00\x3f\x67\x61\x2a\xcf\xee\x35\xcc\xf9\x61\xb6\x76\xe0\xd2\x72\x38\x87\x67\x2a\xf7\xff\xd7\x92\x68\xb3\xea\x4d\x89\xb9\x7c\x61\x50\x6f\x9d\x72\xaf\xd0\xcf\xfa\x64\xa2\x88\x7e\x6e\x97\x85\xdf\x9b\x5d\x04\x5e\x7c\x78\x03\x1f\xa5\x5b\x6b\x0f\xdf\xd7\xf5\x98\x81\x1f\xa6\xcb\x06\x1e\x14\x9b\x0b\x71\x9c\x35\x77\x69\xe0\xe0\xfa\x2a\x6e\xdc\xf1\xf9\xe3\xdb\x07\x8e\x0a\x4b\x77\x33\x2a\xfb\xdc\x29\xe9\xa8\xcc\xa2\x1f\xcf\x88\x40\xb7\x38\x5b\x4c\xbf\xd1\xda\xa6\xe1\xad\x21\x16\xaa\xcc\xc1\xd9\xf4\x9e\xd6\xe0\x3d\xce\x7a\x55\xe6\x91\x95\xae\x22\xd3\x2c\xde\x8f\x01\xb5\x5f\xb2\x86\x11\x30\x04\xfa\x6f\x99\x41\xb2\x85\x41\x38\xd8\x70\x7b\x1c\xc0\x9a\x76\xf8\x97\x1e\xb8\x33\x68\x3b\x59\xd9\x66\x49\x6f\xf0\x7e\x09\xcc\xab\x87\xf6\x25\x4d\xe7\xeb\x34\x9c\x91\x47\x57\xcc\x87\xe3\x52\x78\x5c\x44\x47\x17\xc3\xb1\x75\x10\x8f\x9c\xed\x88\x8d\x72\xab\x32\x36\x98\x1c\xc3\xf7\x8e\x31\xe0\xfd\xfd\xf6\xfe\x7d\x60\x7f\x2d\x78\xfb\xb5\x42\xf0\xf6\x2b\xc7\x3f\x01\x00\x00\xff\xff\x12\xe9\x92\xa2\xf6\x10\x00\x00")

func assetsTmplIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplIndexTmpl,
		"assets/tmpl/index.tmpl",
	)
}

func assetsTmplIndexTmpl() (*asset, error) {
	bytes, err := assetsTmplIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/index.tmpl", size: 4342, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplLogTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\xb1\xaa\xc3\x30\x0c\x45\x77\x7f\x85\x9e\x3f\x20\x86\xcc\x8a\x97\xd7\x6c\x81\x76\xe8\xd2\x51\x89\x45\x1c\x70\xec\xe0\x98\x40\x31\xfe\xf7\x12\xdc\xd2\x6a\x11\xe2\xa2\x73\x0f\xfe\x5d\xae\xff\xf7\xc7\xad\x07\x9b\x56\xa7\x05\x9e\x0b\x1c\xf9\xb9\x93\xec\xa5\x16\x39\x27\x5e\x37\x47\x89\x41\x5a\x26\xc3\x51\x42\x53\x8a\xc0\x31\x98\xa7\x16\x00\x00\x68\x96\x03\x26\x47\xfb\xde\xc9\x29\xf8\x44\x8b\xe7\x28\x6b\x76\xce\x2f\xc2\xd3\x31\xd2\x1b\xf1\xc9\xd1\xb6\xba\x8f\x31\x44\x18\xc2\x8c\xca\xb6\xdf\x57\xdc\x22\xeb\x9c\x9b\x21\xcc\xa5\xa0\x3a\xaf\x5a\xa9\xcc\x72\x68\x81\xaa\x5a\xa0\xaa\xf6\xaf\x00\x00\x00\xff\xff\xcd\x10\xe5\xfc\xce\x00\x00\x00")

func assetsTmplLogTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplLogTmpl,
		"assets/tmpl/log.tmpl",
	)
}

func assetsTmplLogTmpl() (*asset, error) {
	bytes, err := assetsTmplLogTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/log.tmpl", size: 206, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplNavbarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\xcb\x92\x9b\x30\x10\xbc\xfb\x2b\x54\xca\x21\x27\xa2\x1f\x10\x5c\x72\x8d\x73\x49\xe5\x03\x06\x34\xc2\x53\x91\x47\x94\x24\x28\xa7\x28\xfe\x7d\x8b\x97\x17\x63\xef\xd6\xee\x61\x7d\x62\x68\x7a\xba\x99\xe9\xe9\x7b\x83\x96\x18\x85\x64\xe8\x4a\x08\x72\x18\x0e\x9a\xa1\x13\x95\x83\x18\xf3\x05\x15\xf3\x23\x33\x68\xa1\x75\x69\x7d\xb5\x74\x41\x93\x25\xdf\xc8\xe2\x20\x84\x10\xda\xd0\xb5\xb1\xf2\x9c\x80\x18\x43\x66\x5d\x4b\x66\x61\xec\x59\x8b\xd0\x09\xc1\x60\xd8\x70\x26\x5e\xd9\xa6\xe4\x79\x47\x4d\xbe\xae\x1d\x8a\xca\x3b\x07\x4d\x44\x23\x85\x81\x04\x0b\x3c\xda\xce\xf8\x0a\x43\xa8\x31\xe5\xf2\xdb\xdc\x7d\x44\x6e\xa3\x14\x10\x08\x32\xbc\x34\xc0\x06\x4d\x2e\x2d\xb8\x88\x3b\xf3\xe9\x07\x62\x03\x57\x7b\xaa\x3c\x67\xe3\x82\x0a\xad\x46\xfc\x99\x74\xad\xe6\x55\xdc\xa2\x7d\x4f\x56\xfc\xf8\x1b\x31\xfc\x86\x33\x0e\xc3\x6d\x0b\xec\xf6\x56\x06\x60\x23\xc5\x29\xa0\xcd\xa5\x92\x45\xdf\x6f\x5a\xbf\x47\x51\xfa\xa4\x15\xec\x1d\xd0\xc5\x4f\x2b\x1f\xff\xbf\xa1\xc5\x66\x23\xa5\x95\xa1\xee\xdd\xa3\x58\xa3\x14\xaf\x99\x92\x59\xbf\xce\x49\xee\xd6\xd4\xba\x8d\xc4\x7a\xa4\x0c\xdd\xa3\x6c\x1d\x6d\xb8\x19\x25\x3c\x3f\x60\xdd\xcd\x9b\x39\xe2\x7f\xd7\x59\x2b\xcf\x96\x6a\x25\x8b\x9f\x53\x71\x37\xf3\x3c\xa7\xa3\x2f\xb2\x77\x7e\xf4\xfe\xe5\x9f\x6e\x1c\x13\xa4\x36\x2a\x59\xfc\x99\x8a\x0f\xda\x6b\xd5\xba\xe2\x51\xfe\x4b\xa9\x15\x43\x57\x1c\xd6\x43\x79\x09\x00\x00\xff\xff\xf1\xcc\x8c\x67\x9a\x04\x00\x00")

func assetsTmplNavbarTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplNavbarTmpl,
		"assets/tmpl/navbar.tmpl",
	)
}

func assetsTmplNavbarTmpl() (*asset, error) {
	bytes, err := assetsTmplNavbarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/navbar.tmpl", size: 1178, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplSetupTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x4d\x8f\xdb\x20\x10\xbd\xe7\x57\x4c\xb9\x3b\x1c\xf6\x56\x61\x4b\xd5\xf6\xe3\x50\x55\xad\xb4\x7b\xd9\x53\x35\x86\x89\x8d\x82\x01\xc1\x38\xab\xc8\xda\xff\x5e\xf9\x23\xdb\x34\x49\xa5\x3d\x64\x93\x03\x88\x0c\xbc\x37\xef\x61\x66\xd4\x87\xcf\x3f\xef\x1f\x9f\x7e\x7d\x81\x96\x3b\x57\xad\xd4\x38\x81\x43\xdf\x94\x82\xbc\xa8\x56\xc3\xc0\xd4\x45\x87\x4c\x20\x5a\x42\x43\x49\xc0\xfa\xe5\x65\xa5\xea\x60\xf6\xd5\x0a\x00\x40\x19\xbb\x03\xed\x30\xe7\x52\xe8\xe0\x19\xad\xa7\x24\xe6\xd8\xf8\x3b\x86\xf0\xb8\xab\x71\x81\x38\xc4\xd5\x26\xa4\x0e\x50\xb3\x0d\xbe\x14\x32\x13\xf7\x51\x0a\xe8\x88\xdb\x60\x4a\x11\x43\x66\x01\xe4\x35\xef\x23\x95\xa2\xeb\x1d\xdb\x88\x89\xe5\x78\xac\x30\xc8\x78\xc4\x35\xe1\x59\x1f\x7b\x86\x79\x7b\xee\xeb\xce\xb2\x38\xe4\x57\xb3\x87\x9a\x7d\xe1\x9a\x69\x8a\xc9\x76\x98\xf6\x02\x76\xe8\x7a\x2a\xc5\x03\xee\xe8\x14\xad\xbd\xab\x1e\x9f\x2d\x33\x25\x25\xdb\xbb\x7f\x83\xc3\x60\x37\xb0\xfe\x41\x39\x63\x43\x47\x92\x4e\x6d\x41\x47\x89\x61\x1a\x0b\x83\xbe\x19\xfd\x19\x86\xbf\x07\x95\x34\x76\x77\x0a\x4d\xde\xbc\x11\xd2\xfa\x4d\x10\xd5\x53\xe8\x41\xa3\x07\xdd\x92\xde\x4a\x9d\x68\x74\x7c\x49\x1d\x30\x46\x67\x35\x8e\x1e\x83\x42\x68\x13\x6d\x4a\xd1\x32\xc7\xfc\x51\x4a\x8c\x31\xaf\x79\xde\xb9\xd6\xa1\x13\xc0\x98\x1a\xe2\x52\xfc\xae\x1d\xfa\xad\xa8\x5a\x4a\xa4\x24\x56\x17\x12\x55\x8c\xb5\xa3\x43\x5a\xf3\x62\x1a\x8b\xcc\xc9\x46\x32\xcb\xaa\x0e\xc9\x50\x7a\x5d\x26\xca\x31\xf8\x6c\xcf\x0c\x9f\x31\xd3\xf9\x9f\x73\xc0\x54\xf7\xc1\xe7\xbe\xa3\x04\xdf\x69\xaf\x24\x9b\xff\xef\xbc\x18\x38\xfb\x44\x22\xe6\xfc\x1c\x92\x11\xe0\xb1\xa3\x52\x2c\x46\x14\x7a\xe1\x29\xb6\xb4\xbf\x90\xe3\x84\x73\x91\x5e\xc9\x4b\xe9\xbf\x4d\xd3\x03\xe9\x44\x7c\x13\x59\x79\xa2\x7a\x6f\x65\x9f\xb4\xa6\x9c\xe1\x31\x6c\xc9\xbf\xa7\x2c\x9c\x78\x0a\x1e\x79\x6e\xa9\xe9\x06\x37\x76\x2c\xed\x3a\xb7\xa6\xe4\xf4\x08\xcf\x2b\xdd\xb7\x10\x1a\x47\x70\xef\x42\x6f\xce\xcb\xdd\xed\x9f\x7a\x22\x43\x9e\x2d\x3a\xf8\x6a\x1d\x5d\xc3\xe4\x8d\x75\x74\x30\xb8\xd1\xa3\xce\x42\xbf\xb2\x14\x53\xf4\xca\xde\xaa\xa9\x53\x2d\xbd\x72\xae\x9f\x4a\xce\xed\x53\xc9\xb9\xed\xfe\x09\x00\x00\xff\xff\xbe\x65\xa9\xfd\x87\x07\x00\x00")

func assetsTmplSetupTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplSetupTmpl,
		"assets/tmpl/setup.tmpl",
	)
}

func assetsTmplSetupTmpl() (*asset, error) {
	bytes, err := assetsTmplSetupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/setup.tmpl", size: 1927, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplStatusTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x97\x51\x6b\xdb\x30\x10\xc7\xdf\xfd\x29\x6e\x7e\x5f\x04\x7d\x1c\xaa\x61\x64\x5b\x61\xac\xb4\x90\xee\xa1\x8f\x72\x74\x49\x0e\x54\xc9\x9c\xce\x2e\xa1\xf4\xbb\x0f\x5b\x1e\xd3\xd6\x24\xf3\x20\x79\x9a\xf3\x12\x94\xbf\xee\x77\xe4\x7e\xd8\x96\xf5\xbb\x4f\x77\xcb\x87\xc7\xfb\xcf\xb0\x93\x27\x57\x15\xba\xff\x02\x67\xfc\xf6\xba\x44\x5f\x56\xc5\xcb\x8b\xe0\x53\xe3\x8c\x20\x94\x3b\x34\x16\xb9\x84\xc5\xeb\x6b\xa1\xeb\x60\xf7\x55\x01\x00\xa0\x2d\x75\xb0\x76\x26\xc6\xeb\x72\x1d\xbc\x18\xf2\xc8\x65\xca\xfa\x4f\x8e\xf0\xa6\xab\xcd\x88\xf8\x99\xeb\xdd\x55\xb5\x12\x23\x6d\xd4\x6a\x77\xf5\xab\x2e\xe7\x8a\xa9\x1d\xbe\x67\x8c\x4d\xf0\x91\x3a\xcc\xf0\xc3\xd6\x21\xff\x6d\x33\xa4\x92\x28\x4c\x0d\xda\x71\x55\x07\xb6\xc8\x68\xff\x28\x4f\x08\x7e\xfb\x63\x0a\x6c\xf5\xf0\x4c\x22\xc8\xf0\x18\x5a\x86\xbb\x67\x0f\xdf\x28\x0a\x7a\x64\xad\xc4\x1e\x2f\x3b\x18\xa4\x91\xd0\x06\x16\xe9\x4f\x2f\x46\x78\x42\xde\xee\x23\xba\x4d\x4a\xb2\x19\xbd\xa1\xc7\xc6\x78\x88\xb2\x77\xd8\x0f\xdd\x05\xfe\x50\xbb\x16\xcb\xea\xe3\x5a\xa8\x43\xad\xfa\xfc\x54\x7f\x74\x11\xff\x8d\x3f\x8c\x6d\x25\xa1\x99\x00\xf7\xf6\x08\xfb\xf0\xbc\xb4\x3a\x34\xfc\x49\x46\xbe\x47\xe4\xcb\xd9\xe8\xe9\x71\x96\x31\x55\xc6\x3d\x32\x05\x4b\x6b\xf8\x1a\xea\x33\xba\x98\x05\xfc\x4d\xc0\x32\xf8\x0d\x6d\xe1\x0b\x39\x84\xdb\xe0\x49\x02\x93\xdf\x9e\x43\xc1\x48\x4b\x0d\x66\x11\x53\xaf\x84\x25\xa3\x45\x2f\x64\xdc\x65\x7c\x8c\x7d\xfa\x36\xb3\x8e\xe3\x33\xbd\x09\x61\xeb\x10\x96\x2e\xb4\xf6\xe2\x4e\x6e\x86\x36\xb3\x92\xd3\x4a\x56\xc8\xdd\x79\x9e\xd4\x89\xf4\xdf\xdf\x93\xb4\x1a\xce\xb6\xd9\xb9\x59\x59\xea\xb2\x65\xeb\xaa\x22\x0b\xfb\x65\xb6\x4d\xab\x74\x92\xd7\x2a\xbd\x01\xfc\x08\x00\x00\xff\xff\x4e\x3d\xb1\x15\x12\x0c\x00\x00")

func assetsTmplStatusTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplStatusTmpl,
		"assets/tmpl/status.tmpl",
	)
}

func assetsTmplStatusTmpl() (*asset, error) {
	bytes, err := assetsTmplStatusTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/status.tmpl", size: 3090, mode: os.FileMode(436), modTime: time.Unix(1483814045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/custom.css": assetsCssCustomCss,
	"assets/tmpl/config.tmpl": assetsTmplConfigTmpl,
	"assets/tmpl/header.tmpl": assetsTmplHeaderTmpl,
	"assets/tmpl/index.tmpl": assetsTmplIndexTmpl,
	"assets/tmpl/log.tmpl": assetsTmplLogTmpl,
	"assets/tmpl/navbar.tmpl": assetsTmplNavbarTmpl,
	"assets/tmpl/setup.tmpl": assetsTmplSetupTmpl,
	"assets/tmpl/status.tmpl": assetsTmplStatusTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"custom.css": &bintree{assetsCssCustomCss, map[string]*bintree{}},
		}},
		"tmpl": &bintree{nil, map[string]*bintree{
			"config.tmpl": &bintree{assetsTmplConfigTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{assetsTmplHeaderTmpl, map[string]*bintree{}},
			"index.tmpl": &bintree{assetsTmplIndexTmpl, map[string]*bintree{}},
			"log.tmpl": &bintree{assetsTmplLogTmpl, map[string]*bintree{}},
			"navbar.tmpl": &bintree{assetsTmplNavbarTmpl, map[string]*bintree{}},
			"setup.tmpl": &bintree{assetsTmplSetupTmpl, map[string]*bintree{}},
			"status.tmpl": &bintree{assetsTmplStatusTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

