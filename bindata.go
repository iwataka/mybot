// Code generated by go-bindata.
// sources:
// assets/css/custom.css
// assets/tmpl/config.tmpl
// assets/tmpl/header.tmpl
// assets/tmpl/index.tmpl
// assets/tmpl/log.tmpl
// assets/tmpl/navbar.tmpl
// assets/tmpl/setup.tmpl
// assets/tmpl/status.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssCustomCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcf\x6a\xf3\x30\x10\xc4\xef\x7e\x0a\xc1\x77\x96\x09\xf8\x83\x16\x05\xf2\x2e\x6b\x69\xed\xa8\x96\xb5\x62\xb5\xce\x9f\x96\xbe\x7b\xb1\x93\x18\x85\x14\x53\x1d\x84\x0e\xf3\x9b\x99\x5d\xd4\x92\xbb\xaa\xaf\x4a\xdd\x4f\x02\xe7\x7c\xec\xb5\x50\x32\xea\x6d\x97\x2e\xfb\xea\xbb\xaa\xea\x8f\x69\x6c\x49\x98\x62\x21\x6d\xc1\x0e\x3d\xd3\x14\x9d\xb6\x14\x88\x8d\x12\x86\x98\x13\x30\x46\xd9\xaf\x32\xc1\x8b\x68\x08\xbe\x8f\x46\x59\x8c\x82\x7c\xb3\xb4\x14\x05\x7c\x44\x2e\x2c\x47\xb8\xe8\xb3\x77\x72\x34\xea\x7d\xb7\x86\x27\x88\x18\xb4\x78\x09\x58\x68\x17\xdf\x25\xb1\x23\x1e\x8d\x9a\x52\x42\xb6\x90\x71\x81\x9c\x3f\x15\xa5\x41\xe5\x04\xb1\xee\xa0\xe0\x3b\x8a\xa2\xb3\xff\x44\xa3\xfe\x3f\xa2\x12\x97\x09\x2d\xb1\x43\x36\x2a\x52\xc4\xfd\x5f\xc7\x9e\x0b\x3f\xe5\xbc\xea\xcf\x47\x2f\x98\x47\x1a\xf0\x21\xd7\x72\xf6\x22\xc8\xf3\x13\xac\xf8\x53\x59\xe3\x4e\xfd\x6b\x9a\xa6\xe9\xba\x15\xe9\x89\xfa\x80\x9b\x44\xd7\xcd\xcc\x4a\x24\xc8\xf9\x57\x61\xcf\x78\x2d\xaa\x20\x8a\x43\x3b\xbc\xea\xda\x00\x76\xd8\xda\x84\x23\xd7\x23\xb7\x61\xba\x4d\x26\xd0\x06\x54\x07\x25\x47\x04\xb7\xb9\x12\x08\xde\xe2\x33\x57\x2f\xb7\xce\xc2\x3e\xa1\x9b\x5d\x96\xaf\x7a\x50\xc2\xb5\xc3\x80\x82\xa5\x25\x25\xb0\x5e\xae\x46\xed\xea\x66\xab\xe1\x63\xd4\x9f\x00\x00\x00\xff\xff\xc6\x0c\x84\x58\xf7\x02\x00\x00")

func assetsCssCustomCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssCustomCss,
		"assets/css/custom.css",
	)
}

func assetsCssCustomCss() (*asset, error) {
	bytes, err := assetsCssCustomCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/custom.css", size: 759, mode: os.FileMode(436), modTime: time.Unix(1483795226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6f\x6f\xdb\xb8\x1d\x7e\x9f\x4f\xc1\x69\x87\xcb\x1d\xee\x22\x6f\xd7\x77\xab\x6d\xa0\xd7\x5c\xd1\x0e\xbe\xac\x4b\xd2\x01\xc3\x30\x18\xb4\x45\xdb\xbc\xd2\xa2\x47\x51\x4e\x02\x23\xdf\x7d\x20\x29\xc9\xfa\x43\x52\xb2\x93\x58\x52\x4a\xbe\x68\x62\x8b\x14\x1f\x3e\x0f\x7f\xe4\x8f\xf2\xe3\x74\xf8\xa7\xcb\x7f\xbc\xbf\xfd\xf7\xe7\xdf\xc0\x8a\xaf\xc9\xf8\x6c\x28\x7e\x00\x02\xc3\xe5\xc8\x43\xa1\x37\x3e\xdb\xed\x38\x5a\x6f\x08\xe4\x08\x78\x2b\x04\x03\xc4\x3c\xe0\x3f\x3e\x9e\x0d\x67\x34\x78\x18\x9f\x01\x00\xc0\x30\x9a\x33\xbc\xe1\xea\x85\x28\x8b\x38\x9c\x73\x4c\x43\x10\x20\x82\x38\xba\xa6\x77\x3f\xcc\x62\xce\x69\xf8\x33\x58\xd3\x00\x92\x1f\xc1\x2e\xab\x2b\xca\x16\x32\xc0\x19\x18\x01\x55\xcb\xdf\x40\x86\x42\x7e\x45\x03\x94\xfb\xf5\x6d\xa1\x09\x5e\x80\x1f\x38\xf3\xe7\x04\x46\xd1\x15\x5c\x23\x30\x1a\x8d\xc0\xb9\xea\x2f\x38\x2f\x77\x20\x41\x51\x06\x7e\x10\x3d\x61\x30\x02\x7f\x79\x0b\x30\x18\x02\x71\x87\x15\x26\x81\xb8\x7f\xe4\x13\x14\x2e\xf9\xea\x2d\xc0\x3f\xfd\xa4\xbb\x41\x8a\x54\xb6\x00\xa3\x62\xe3\xff\xe0\xff\x6a\x1b\x08\x9c\xb2\x96\xcf\x1f\x36\x09\xca\x15\x0e\x02\x14\x9e\x83\xef\xbf\x57\xf7\xf2\x43\x1a\xa0\xfd\x20\x3e\x5d\x7d\xfe\x72\xab\x1d\x42\x5a\x54\xab\x2d\x24\x31\x02\x23\x70\xbe\x80\x24\x42\xe7\x6f\x8d\xd5\x8b\x3c\x81\x73\x4b\xd5\x44\x00\x1c\x86\x88\x7d\xbc\xfd\x7d\x22\xaa\x5f\x4a\x52\x0d\x8d\x1e\x2b\xef\x16\xdf\x79\x04\x88\x44\xe8\x9b\x92\x83\xb3\xf8\x10\x35\xd2\x39\x7b\x98\x28\xd7\x68\x8b\x18\x3f\x56\x94\xb3\xe2\x6f\xc3\x41\x3e\x82\x87\x01\xde\x02\x09\x71\xe4\xcd\x69\xc8\x21\x0e\x11\xf3\xf6\xd1\x9d\x5f\x11\x42\xb8\x9d\xc1\x64\x45\xc8\x2a\x0c\x17\x94\xad\x01\x0e\x46\x1e\xdd\x22\x76\xc7\x30\x47\x1e\x80\x72\x45\x18\x79\x83\x39\x0d\x17\x78\x39\xf0\xc0\x1a\xf1\x15\x0d\x46\xde\x86\x46\xdc\x03\x28\x9c\x0b\x49\x46\xde\x3a\x26\x1c\x6f\x20\xe3\x03\x71\x9b\x8b\x00\x72\xe8\x8d\x87\xf2\xc5\x38\xd7\xc7\xea\x97\xf1\x7b\x79\xa7\xe1\x60\xf5\xcb\x1e\xdc\x10\x87\x9b\x98\x8b\xd9\xb5\x2e\x74\xaf\xee\x1d\xc5\xb3\x35\xe6\x1e\x90\x5a\x8d\xbc\x1b\xb8\x45\x5e\x3a\xd4\x19\x0f\xc1\x8c\x87\x17\x64\x29\x7f\x6c\x18\x5e\x43\xf6\xe0\x15\xfa\x7c\x33\xbe\xbd\xc3\x9c\x23\x06\x6e\xf1\x1a\x11\x1c\xa2\x68\x38\x58\xbd\xc9\x75\xcf\xe1\x8c\xa0\xf4\x96\xea\x85\xfc\xf7\x22\xe2\x0c\x6f\x50\x90\xbc\x9a\x51\x16\x20\x96\xbd\x64\x28\xda\xd0\x30\xc2\x5b\x94\xe3\x59\xdd\x4f\xac\xb9\xe3\x8a\x9e\x43\xce\xaa\x6f\xaa\x0b\xc1\x38\x9a\x33\x84\x42\x10\xc2\xb5\x80\xc7\x35\xcd\xd3\x9a\xe8\x7e\x4e\xe2\x00\x01\x86\x36\x04\xd7\x55\xc6\x61\x52\x99\xd7\x54\x9c\xd3\x38\xe4\xf6\x2a\x94\xaf\x10\xab\xb9\x8d\xfe\xea\x70\x50\x1e\xfa\x70\xa0\x21\x69\xc8\xf7\xfb\x53\xbe\xec\x76\x0c\x86\x4b\x04\xbe\xc3\x61\x80\xee\x7f\x06\xdf\xf1\x44\x48\xf0\xb7\x11\xf0\xd5\x8c\xf2\x13\x91\xfd\x4c\xe4\xc7\x6a\x44\x99\x15\xb0\xce\x40\xb5\xd8\x78\x52\x9c\x91\xc7\x93\x8e\x52\x10\x91\x9f\xac\x06\xd9\x14\x95\x6b\xbb\x37\x30\xb3\x64\x5c\x35\x76\x3b\x82\x23\x7e\x8b\xee\xf9\x8c\xde\xef\xc7\xe9\xdf\xc8\xd9\x21\x56\x9f\x08\x68\x00\xa8\xc9\x33\x95\x93\xc7\xd3\x8c\x3b\x61\xdc\xa2\x9b\x05\xd1\x8c\x52\x72\x83\x08\x9a\x97\x30\xfd\xa6\xe6\xe1\xb5\x9a\x86\x3a\x58\xc9\x4c\x9d\x26\x33\xf5\x64\xc8\x3e\xa9\x49\x7f\xcd\xb5\xa8\x92\x90\x98\x32\xfe\xdc\x88\xec\xb3\x28\x8c\xd7\x33\x91\x88\x99\x66\x91\x8c\xc0\x6c\x0e\xed\x76\xfb\xf1\xbc\x17\x57\x1e\x1f\x3d\x03\xa4\x23\xc1\xaa\x1d\x2a\x01\xa7\x5e\x54\xd6\x55\x1c\x2e\xa8\x07\xc4\x72\x7e\xc1\xe9\x72\x49\xc4\x52\x2f\x92\xc1\xf4\x3d\xc8\x96\x88\x8f\xbc\x3f\x27\xa3\xb9\xc8\x46\x73\xb1\xc0\x84\x23\x36\xdd\xed\x54\xd0\x1a\xd1\xa7\x25\x40\x1c\x62\x12\x81\x15\x62\xc8\x8c\x79\xa0\x70\x9e\x9e\x88\x40\x2c\x40\xcc\x03\x34\x9c\x13\x3c\xff\x3a\xf2\xf6\x59\x32\x5f\xe1\xe8\x67\x70\xde\x80\x82\xf3\x1f\xbd\xb1\x4a\xcc\x8e\x19\x48\x75\x11\x05\x32\x0a\x50\x18\x1c\xb4\xd4\x59\xb9\x90\x59\x40\x79\xdb\xcf\x86\x34\x80\x41\x50\xca\x01\xec\xaa\x26\x11\xa1\xdd\xc8\xaf\xd0\x5d\x85\xe6\x74\x03\x37\xac\x9d\x8a\x06\x95\x55\xe8\xaf\x1d\xbe\x37\xb5\x75\x55\xbb\x27\x16\xf7\xbf\xe1\x40\x66\x1a\xb9\x6c\xe6\x59\x76\xc2\x7c\xae\x28\xa3\x19\x2c\x60\x80\x3c\x99\xfc\x35\x09\x64\x91\xff\xc8\xdf\x47\xde\xc5\x5f\x3d\xc0\xa8\x58\x16\x02\x0c\x09\x5d\x7a\x00\x32\x0c\x2f\x08\x9c\x21\x42\x50\x30\x7b\x68\x74\xc7\x0b\x8e\x39\x29\x67\x51\x5a\xa4\x17\x69\x37\x49\xa7\x74\x1e\xaf\x51\x68\x9a\x85\xd5\xe6\x22\x35\x36\xd7\xd7\xb7\x49\x0e\xd0\x35\x13\x7d\xf5\xa6\xd8\x4a\x0d\xa9\x29\xa7\x29\x03\x97\x6a\x15\x2c\xe6\xa7\xd5\x99\x13\xe0\xed\x21\x23\x10\xb3\xaa\x1e\xff\xf8\x83\x44\x65\xef\x1b\xbc\x40\xbe\xac\xef\x43\x9f\x43\xeb\xeb\x1a\x96\x3a\x7d\xe5\x60\x2c\x76\x60\x73\xc8\x9a\x5a\xc9\x65\xab\x79\x33\xfd\x72\xad\xa9\xd5\x6c\xa0\xa6\xdc\x58\x5f\xf7\x40\x42\x36\x50\x4c\xd0\xd0\x92\xdb\x9b\x5a\x36\xae\x0c\x2c\xd9\xad\x9a\x78\xfe\xe7\x04\x85\x2e\x69\x53\x11\xe3\xa7\x40\x4d\x89\x9b\x16\xe6\x33\x4b\x06\x8e\x61\x38\x66\x04\x74\x83\xe5\x2f\xd7\x93\x06\x44\xc7\x8c\x4c\x7b\x4b\xf6\x0a\x46\x60\x8d\x02\x0c\x5f\x9c\x69\xd3\x09\x24\xe1\xfa\x23\x8c\x7e\x17\x38\x2c\x44\xaf\x60\x34\x95\x58\x7b\xc9\x72\xcc\x48\x07\x38\xfe\x72\x3d\xa9\x61\x38\x66\xa4\x77\xfc\x32\xc4\xef\x10\xe2\x28\x68\x9b\xe1\xeb\x14\x88\x85\xe4\x0c\x6c\xef\x68\x5e\xc0\x2d\x15\xc7\x74\xc0\x57\x0c\x45\x2b\x4a\x5e\x9a\xef\xa7\x3d\x25\x48\xf8\x4e\x51\x4f\x33\xd4\xda\x27\x07\x89\x82\x1f\x92\xda\xb7\x69\xe5\xda\xe3\x78\x01\x70\x17\x64\xca\x26\x58\xbf\x74\xca\x60\x37\x13\x2a\x0b\xb5\x1e\x2b\x45\x60\xb8\x6c\x55\x1a\x8e\xee\x79\xad\x30\x02\xa5\x4d\x89\x09\x0c\x97\xad\x72\x5f\x79\x1a\x60\xa8\xa4\x9e\x10\x58\x2b\x65\x67\x3b\xff\x5f\x38\xc2\x34\x74\x47\x3c\x43\xab\x57\x7c\xc4\x93\x8f\x64\xda\x3d\x79\xa8\xc9\xe7\x4f\x04\x12\x4b\x2a\xb1\x55\xd5\x24\xe0\x1e\x66\x13\x73\x04\xe4\xb3\x62\x40\xf0\x57\x44\xf0\x8a\xd2\x76\x37\xaa\x46\xab\x61\xc2\xb9\x40\xef\x4b\xf4\xd3\x3d\x7a\xdb\x2a\x99\x48\xfa\x41\xb4\x7b\x27\xda\x4d\xb2\x66\xfd\xdb\xb8\xa4\x76\x33\x12\x33\xb1\xa0\xf5\x55\xbd\x04\xff\x11\xfa\xfd\xaa\x5a\xf6\x5e\x41\xb1\xd8\xde\x21\xd8\xdf\x00\x4c\x07\x70\x84\x86\x1f\x93\xa6\xbd\x17\xf1\x0f\xfa\xd0\x5b\xfd\xfe\xa0\x0f\x47\x48\xf7\x77\xfa\xd0\x67\xd5\x04\x4b\x9d\x48\x2f\xc4\xf5\xfa\xec\x42\x8a\xda\xb7\xe4\x82\xc0\x30\x58\x43\xf6\xb5\x13\x3c\x4f\x12\x30\x4d\x32\x39\x55\xb3\x7f\x7c\xd3\x25\xed\x06\xd7\x74\x49\x1b\xf0\x4c\x97\xb4\x4d\x8e\x9f\xf7\xc4\xfa\x4e\x9a\x10\xdc\x51\xd5\xd0\xea\x15\x1f\x55\x93\x67\x66\x2f\x1e\x79\xf3\x15\x9a\x7f\x2d\x86\x9d\x9a\x74\xe9\x63\x38\x5d\xc8\x29\x6f\x4c\xfa\x5c\xaf\x77\x4b\x5a\xfa\xdc\xb8\x45\x72\xd3\x87\xd1\x16\x76\x53\x94\xfd\xa3\x97\x12\x42\xef\xda\x24\x57\x02\xb0\x51\x2b\x2b\xf4\x8e\xd8\x39\x25\x04\xc9\x11\xb4\xf5\xf1\x79\x42\xf0\xfb\x3d\x10\x0b\xcb\x39\xb8\xfd\xdf\x91\x0f\xf6\x1b\x2d\x28\xe5\x56\xc7\x94\xe5\x8e\x86\x4b\x9a\xb7\x4b\x6f\xa5\x46\xc8\xec\x8d\xbc\xf3\x3f\x5d\x73\xfa\xed\xfc\xef\x95\x47\x3f\xfb\x5c\x55\xe3\x4c\xcc\xe4\x78\x69\x8f\x7e\x0a\xe2\x05\x3d\xfa\x69\x17\x7a\x8f\xfe\x1e\xc0\xd3\x3d\xfa\xc7\x7c\x20\xb9\xef\xbf\x62\x2f\xcf\x80\x67\xf6\xf2\x2e\x39\xc9\x33\xe0\xdf\xae\x93\xdc\x42\x41\x5f\x9d\xe4\xd9\x90\x9c\x93\xbc\xd2\xdf\x33\xb8\xc1\x8f\x59\x73\x9b\xb8\xc1\x6d\xc1\x78\x9c\x1b\xdc\x72\xc7\x6f\xc4\x0d\xde\x80\x01\xe7\x06\xcf\xfa\x70\xcf\x5f\x4a\x08\x5e\x9d\x1b\x3c\x4b\x47\x8c\x6e\xf0\x7d\x2e\xe3\xdc\xe0\x8d\x4b\x0d\xcb\x5a\x37\x78\x85\x68\xe7\x06\x6f\x50\x2a\x3e\xda\x32\xd7\x55\x37\x78\x85\x68\xe7\x06\xb7\x97\x26\x1c\x17\xdc\xe0\x5a\x86\x9d\x1b\xdc\x5c\x6a\x19\xd6\xb8\xc1\x2b\x24\x3b\x37\x78\xe3\xf2\xb4\x43\x7d\x23\x37\x78\x59\x41\xe7\x06\x6f\x4b\xa7\x1a\x37\xb8\x31\xd4\x7a\xac\x54\x27\xdd\xe0\x15\x61\xca\x6e\xf0\xb2\x12\xce\x0d\xee\x8e\x78\xb5\x4d\x7a\x74\xc4\x6b\xc1\x0d\x5e\x0e\x29\xbd\x1b\xbc\x12\x99\xce\x0d\x7e\xfa\xd5\xb0\xa9\x1b\xdc\x20\xa9\x73\x83\x17\x6e\xd4\xa6\x7a\x76\x37\xb8\x4d\x3f\xe7\x06\xcf\xdd\xa9\x4d\x09\x6b\xdc\xe0\x36\x0d\x9d\x1b\xbc\x03\xfa\x99\xdd\xe0\x36\xe9\x9c\x1b\xbc\xae\x34\x4b\x2f\x8a\x6e\x70\x93\x50\xce\x0d\x6e\x2e\x4d\xd3\xb8\xb2\x1b\xdc\x9c\xc9\x39\x37\xb8\xa9\x34\xe4\xba\xe0\x06\x37\xf2\xec\xdc\xe0\xee\xa8\x6a\x6a\xd2\xa3\xa3\xea\xe9\xdd\xe0\x59\xd8\x99\xdc\xe0\xfb\x90\x73\x6e\xf0\x26\xc5\x46\x6e\xd5\x0d\x5e\x61\xd7\xb9\xc1\x6d\xc5\x4a\x6e\xc9\x0d\x5e\xa5\xd6\xb9\xc1\xed\xc5\xb4\x23\xdb\xdc\xe0\x15\x96\x9d\x1b\xbc\x5b\x6e\xf0\x1b\x04\xd9\x7c\xd5\x49\x33\xf8\xff\x62\xc4\x6a\xff\xa8\x3b\x43\x51\x4c\x94\x17\xf2\x15\x19\xc6\x23\xa9\x8a\xce\xba\x98\xea\xf5\xd2\x6e\xf1\x28\xe9\xe7\xe5\xcc\xe2\xaa\x07\xff\x9f\x4a\x65\x50\xed\x39\xd1\xff\xd9\xff\x54\x7a\xb4\xff\x40\x3f\xc1\x70\x2d\x27\xd1\xed\xc3\x06\x69\x60\xa8\x19\x36\x15\x64\x79\xc0\xf3\x80\xc7\xd0\x1c\x85\xdc\x03\xde\x1a\xdf\x0b\x62\xbc\x0d\xdd\xc4\x04\xb2\xd3\x39\xd9\x33\x6c\x15\x23\x7b\x32\xa0\x4e\xda\xd8\x53\xd4\xdf\xae\x8b\xdd\xcc\x40\x5f\x4d\xec\xe9\x88\x9c\x87\xfd\x90\xab\xcf\xe3\x70\x3f\x78\x93\x68\x62\x6f\xb7\x04\xe9\x71\xee\x76\xf3\x0d\xbf\x11\x73\x7b\x3d\x01\xce\xdb\x9e\xf5\xe1\x9e\x26\x95\x10\xbc\x3a\x6f\x7b\x92\xa1\x18\x9d\xed\x59\x6e\xe3\x8c\xed\x8d\x8b\x95\x62\xad\xad\xbd\xcc\xb2\x73\xb5\x37\x28\x15\x3f\x70\x91\xe8\xaa\xa7\xbd\xcc\xb2\xb3\xb4\xdb\x4b\x3d\xc1\x05\x43\xbb\x8e\x5e\xe7\x67\x37\x97\x1a\x7a\x35\x6e\xf6\x32\xc3\xce\xcc\xde\xb8\x3c\xe9\x5c\xdf\xc8\xcb\x5e\x54\xcf\x39\xd9\x5b\x12\xa9\xc6\xc8\x6e\x88\xb1\x1e\xcb\xd4\x49\x1b\x7b\x59\x95\xb2\x8b\xbd\x28\x83\xf3\xb0\xbb\xa3\x5c\x6d\x93\x1e\x1d\xe5\x5a\xf0\xb0\x17\x03\x4a\xef\x60\x2f\x07\xa5\x33\xb0\x9f\x7c\x1d\x6c\xea\x5f\xd7\xca\xe9\xdc\xeb\x85\x1b\xb5\x28\x9d\xdd\xbc\x6e\x16\xcf\x59\xd7\x73\x77\x6a\x51\xbf\x1a\xe7\xba\x59\x40\xe7\x5b\x6f\x5f\x3c\xb3\x6d\xdd\xac\x9b\x33\xad\xd7\x95\x26\xf9\x44\xd1\xb2\x6e\xd0\xc8\x39\xd6\xcd\xa5\x59\xd2\x56\xf6\xab\x1b\xf3\x36\x67\x57\x37\x95\x46\x44\x17\xcc\xea\x26\x92\x9d\x57\xdd\x1d\x49\x4d\x4d\x7a\x74\x24\x3d\xbd\x57\x3d\x89\x39\x93\x53\x3d\x8b\x37\x67\x54\x6f\x52\xcc\xcc\x56\x6d\xea\x65\x6a\x9d\x4b\xdd\x56\x2c\xcc\x96\x3c\xea\x15\x5e\x9d\x45\xdd\x5e\xf4\xbb\xb0\xcd\xa0\x5e\xa6\xd8\xf9\xd3\xbb\xe5\x4f\xff\x4c\xc4\xe1\xf1\x8a\x72\xbc\xc0\x73\x58\x4d\x26\x3a\xe1\x54\x87\x32\x6c\x23\x44\x16\x76\x37\x60\x1c\x19\xfd\xe5\x4f\x74\x90\x1f\xe7\xe9\xcc\xad\x44\x65\x0b\x61\x9e\x71\x5f\x8a\xe0\xbf\x13\xa3\xbc\x41\x64\xb1\x8f\x9e\x30\x5f\x6b\x23\x6b\x49\x2e\xa6\x82\x8b\x67\x37\x6e\xe7\x63\xbb\x01\xde\x2f\x82\x6d\x2b\x56\xa9\xc7\x61\x30\x8f\xb2\x6e\x8a\x09\x7d\x09\x39\x9c\xc1\x08\x75\x70\xfa\x06\x0c\x6f\x11\xb3\xcb\x12\x40\x0e\x41\x44\x63\x36\xaf\xf9\x9e\x85\x3a\xc6\x28\x9c\x1d\x9a\xea\xcd\x9f\x08\x05\x33\x5f\x11\x92\x7b\xd0\x93\xce\xb6\xcb\x5f\xfd\x4b\x79\xcd\xf8\x44\xe7\x58\xa3\xf9\x41\xf0\x20\x87\x53\xa5\x85\x01\x23\xe4\xf0\x46\x5e\x6f\x15\xa7\x9a\x0a\x53\x39\x15\xf4\x40\xd5\xc1\xf8\x56\x54\x38\x10\xe9\xd1\x71\xf8\x29\xe4\x88\x41\xcd\xb1\xb4\x1b\xa1\x18\xb3\x64\x93\xb3\xc9\xf3\x0c\xfb\x0d\x00\xb5\x5f\x8b\xea\x78\x9c\xe2\xbd\x90\x7e\x4a\x5b\x6e\x96\xe1\x45\xb6\x47\xe4\x24\xf7\x2f\x93\x9a\x8f\x8f\xfb\x89\x68\xba\x2e\xd3\x92\xe7\x8d\x1f\xcd\x8e\x9b\xef\x3d\xb7\xc5\xe6\x87\x77\xe2\x3d\x35\x8f\x28\xd9\x44\xf3\x68\x8e\xd8\x35\x6b\x81\x1c\x62\xc4\xc9\x63\x29\x7f\x01\x4a\x37\x84\xec\xcb\x50\xa7\x58\x5e\x26\x74\xd9\xc1\x65\xe5\x15\x25\xa8\x13\xba\xcc\x87\x09\xa1\xcb\x53\x87\x87\x40\x90\x84\x85\xe8\xfd\x94\x49\xe4\x0d\x62\xdb\xf2\x97\x35\x3a\x31\xc1\xec\x8f\x3f\xa5\x83\x98\x46\x35\x5f\xbf\xdd\x50\x56\x53\x83\xd0\x25\x90\xff\xb7\x58\x87\xa6\x68\xf3\x0d\x2b\x92\xe2\xf9\xe2\x85\x66\xc5\x52\xd2\xfa\x57\x70\xdd\x62\xd2\x96\x40\x14\x5a\x99\x21\x7e\xa4\xd1\xa1\xcb\xe9\x13\x21\x16\xd7\xff\x04\xa4\x98\x2e\x66\x90\x9f\x29\xeb\x02\x48\x42\x97\x53\x39\x63\xcd\x48\x27\x74\x39\x11\x35\x5e\x70\x87\x02\xfb\x87\x2e\xc3\x81\xaa\x33\x1c\xac\xf8\x9a\x8c\xcf\xfe\x1f\x00\x00\xff\xff\x53\xd4\x16\x01\x40\xa3\x00\x00")

func assetsTmplConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplConfigTmpl,
		"assets/tmpl/config.tmpl",
	)
}

func assetsTmplConfigTmpl() (*asset, error) {
	bytes, err := assetsTmplConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/config.tmpl", size: 41792, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x5d\x4f\xe3\x3a\x10\x7d\xe7\x57\x58\x7e\xb9\x0f\xf7\x36\xbe\xfd\x58\xda\x5d\x35\x95\x58\x58\x4a\x61\xf9\x58\x68\x41\xec\x9b\xeb\x4c\x12\x87\xd8\x0e\x9e\x49\xd3\x6c\xd5\xff\xbe\x6a\x0a\x14\x21\x90\x78\xcb\xcc\xe4\x1c\x9f\xa3\xa3\xb3\x5a\x45\x10\x6b\x0b\x8c\xa7\x20\x23\xf0\x7c\xbd\xde\x1b\x6e\x3e\x47\x7b\x8c\x31\x36\x34\x40\x92\xa9\x54\x7a\x04\x0a\xf9\x6c\x7a\xdc\x1a\xf0\xd7\x27\x2b\x0d\x84\x7c\xa1\xa1\x2a\x9c\x27\xce\x94\xb3\x04\x96\x42\x5e\xe9\x88\xd2\x30\x82\x85\x56\xd0\x6a\x86\xff\x98\xb6\x9a\xb4\xcc\x5b\xa8\x64\x0e\x61\x9b\x8f\xf6\x1a\xa6\xd5\x4a\xc7\x2c\x98\x21\xf8\x0b\x69\x60\xbd\xde\xd2\x93\xa6\x1c\x46\xab\xd5\xab\xc3\x3f\xc8\xe6\x8e\x86\x62\x7b\x7a\xc2\x42\x8e\x6f\x30\xe7\xf5\x3b\x7f\xd9\x68\xbd\xde\x3e\x37\xcc\xb5\x7d\x60\x1e\xf2\x90\x23\xd5\x39\x60\x0a\x40\x9c\xa5\x1e\xe2\x90\xa7\x44\x05\x7e\x13\xc2\xc8\xa5\x8a\x6c\x30\x77\x8e\x90\xbc\x2c\x36\x83\x72\x46\xbc\x2c\x44\x37\xe8\x06\x7d\xa1\x10\x77\xbb\xc0\x68\x1b\x28\x44\xce\xb4\x25\x48\xbc\xa6\x3a\xe4\x98\xca\xee\xa0\xd7\xfa\x7e\x7b\xaf\xf5\xcd\xe4\x18\xce\xda\xd1\xd8\x9c\x5e\x1f\x3c\xd4\xaa\x3c\x39\x38\xb9\x4e\xba\x9d\x4b\x33\x53\x55\xd5\x77\xb6\x7b\x7d\x1f\x25\xbd\x5b\xf9\xef\x95\xb9\x99\xe2\x1f\x71\xb6\x3f\x58\xcc\xa3\x1f\x59\xda\x2b\x39\x53\xde\x21\x3a\xaf\x13\x6d\x43\x2e\xad\xb3\xb5\x71\x25\x3e\xa7\xf1\x19\x53\x2a\xb2\x19\x06\x2a\x77\x65\x14\xe7\xd2\x43\xe3\x48\x66\x72\x29\x72\x3d\x47\x11\x3b\x4b\x2d\x59\x01\x3a\x03\xa2\x17\xec\x07\xdd\xc6\xde\xeb\xf5\x8b\xc3\x4f\xbc\x2a\x24\x22\x10\x36\x1c\xaa\x44\x72\xe6\x09\xb9\x85\xa2\xf2\xba\x20\x86\x5e\xed\x04\x6e\xb4\x04\x89\x73\x49\x0e\xb2\xd0\xf8\x46\x5f\xf6\x58\x82\xaf\x45\x3b\x68\x77\x82\xde\xd3\xd4\x08\xca\x90\x8f\x86\x62\x4b\x38\xfa\x98\xfd\xb3\x99\x66\x6f\x23\xcd\xde\x4d\x74\xaa\xbe\x4c\x7e\xe9\xf9\xff\x9d\xfe\xe3\xa2\xce\x6e\xce\xe3\x93\xec\xf2\x5c\xfe\x7c\x88\xcb\xbb\xdb\xe5\xef\xe5\xec\xca\x1e\x9e\x1e\xf4\xf3\x8e\x39\xbc\xbb\x98\x14\xe3\xaf\x66\x7c\x78\x34\xa8\xc6\x17\x13\x75\x75\xd4\x9f\x2e\xe5\xc7\x89\xee\xbc\x7c\x6c\xa6\xc8\x25\xc5\xce\x9b\x80\x2a\x4d\x04\xbe\x71\x52\xe9\x28\x01\xc2\x46\xf0\x4b\x69\x4b\x8a\x37\xa5\xdd\x91\x0e\xc5\xb6\xe0\xcf\xad\xf8\x1b\x00\x00\xff\xff\xf8\x1d\xf8\x44\x04\x04\x00\x00")

func assetsTmplHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplHeaderTmpl,
		"assets/tmpl/header.tmpl",
	)
}

func assetsTmplHeaderTmpl() (*asset, error) {
	bytes, err := assetsTmplHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/header.tmpl", size: 1028, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\x4b\x8f\xdb\x36\x10\xbe\xef\xaf\x98\xb2\x01\xda\x02\x91\x89\x24\x40\x0f\x01\x2d\x20\x4d\x82\x36\x40\x92\x06\x69\x52\xa0\xc7\x91\x44\x4b\xec\x52\x1c\x95\xa4\xbd\x70\x05\xff\xf7\x82\x92\xed\xb5\x9e\x5e\x3b\x69\xbb\x07\xaf\xa4\x79\x7d\x9c\xb7\x24\xbe\x79\xf5\xeb\xcb\x4f\x7f\x7c\x78\x0d\x85\x2f\x75\x7c\x23\xc2\x3f\xd0\x68\xf2\x25\x93\x86\xc5\x37\x75\xed\x65\x59\x69\xf4\x12\x58\x21\x31\x93\x96\xc1\x62\xb7\xbb\x11\x09\x65\xdb\xf8\x06\x00\x40\x64\x6a\x03\xa9\x46\xe7\x96\x2c\x25\xe3\x51\x19\x69\x59\x4b\x0b\x7f\xa7\x2a\x0c\x6e\x12\xdc\xab\x38\x32\x9c\x2a\xf8\x73\x5d\x26\xe4\x2d\x99\x13\x05\xad\x12\xb5\x82\xc5\x67\x27\xed\x7b\x2c\xe5\x6e\xd7\x21\x8a\xe2\x49\x5c\xd7\x27\xd4\xef\x1c\x24\xe4\x05\x2f\x9e\xf4\xb5\x48\xed\xc6\xa4\xdf\x6d\xa7\xf8\x4d\x36\x60\x7f\x1a\xe3\xda\x53\x89\x5e\xa5\xa8\xf5\x16\x52\xd2\x5a\xa6\x1e\xd0\x64\x90\x58\xc2\x2c\x45\x17\xee\xb6\x70\xab\x4c\xe6\x80\x56\xa0\xcc\x8a\x6c\x90\x20\x03\x2b\xb2\xb0\xa5\xb5\xe0\xc5\xd3\xb1\x33\xfe\x44\x7e\xec\x88\x08\x85\x95\xab\x25\x2b\xbc\xaf\xdc\x73\xce\xfd\x9d\xf2\x5e\xda\x45\x4a\x25\xaf\xeb\x7b\x29\x76\xf0\x64\xe2\x0d\x24\xde\x44\x8e\x52\x85\x3a\x52\x29\xb5\xf7\x7b\x41\x16\x0b\x57\xa1\x39\x70\xaf\x10\x56\x78\xa0\x85\x4b\x4c\xbd\xda\x48\x16\x0b\x1e\xd8\x62\xc1\xf1\x21\xae\xec\xa3\xc4\xaa\x72\x8b\x13\xa8\x5f\x0b\x5d\x85\xce\x9d\x83\x37\x8c\xdc\xd0\x87\x52\xfa\x4c\xa6\xb7\xff\x06\xc4\xa3\xf2\x69\x90\x03\x40\x29\x19\x47\x5a\x2e\x32\xb9\x91\x9a\x2a\x69\xdd\x22\x27\xca\xb5\x6c\xc2\x8c\x95\x72\xe1\x87\x6f\x94\x53\x64\xf6\xa4\xf0\xb4\x21\xff\xb5\x26\x8f\xee\x2c\xfc\x56\x6a\x14\x7d\x4b\x7a\x48\xf4\x07\xc8\x73\xe5\x8b\x75\xd2\xe0\x50\x77\xe8\xf1\x16\x79\x19\x6a\xea\x3c\x9c\x46\x70\x1c\x4e\x43\x3a\x07\x47\xf0\x4c\x6d\xe2\x93\x6e\xb2\xd6\x07\x35\x06\x37\x60\x70\x13\x79\x4c\x5c\xa7\x9f\x08\xad\xc0\x92\x96\x4b\x56\x59\xe9\xa4\xf1\x4d\x65\x1e\xb1\x1e\xcd\x21\x64\xe8\x31\xf2\x94\xe7\x81\xd9\x63\xc2\xf6\xe7\xfe\xb6\xa0\x52\xb2\xf8\x17\x2a\x65\x40\x23\xb8\x56\xa7\x06\xea\xda\xa2\xc9\x25\x3c\xba\x95\xdb\xc7\xf0\x68\x83\x1a\x9e\x2f\x61\xf1\xb2\xed\x14\x8a\xcc\x3b\xac\x3a\xd9\x39\x81\x68\x16\x42\x5d\x07\xf5\xbb\x1d\x8b\x0f\x57\xe3\x50\xba\x95\x20\xf8\x5a\xc7\xe3\xcd\xd7\x63\x12\x85\x0e\x2e\x8d\xef\xb5\xdf\x86\x4b\x65\x4b\xd6\x1c\xfb\x94\xbf\x42\x13\x32\x26\x93\xa0\x0c\x1c\x1c\xd7\x91\xed\x5b\x09\x12\x1a\x9a\xdf\x28\x0b\x5e\xb2\x23\x02\xa3\x42\x51\x98\x40\xca\xe4\x13\xfc\x8d\x4c\xf1\xac\x2b\xe2\x95\xd7\x6d\x28\x5b\xaf\x71\x4d\x39\x67\xf1\x6b\x6b\xc9\xc2\x5b\xca\x5b\x97\x15\xcf\x26\x20\xb4\xc9\x35\x46\x6a\xbb\xf5\x5b\xca\x7b\x5d\x66\xfe\x04\x61\x6c\xb2\x58\x54\x56\xc6\x22\xa5\x4c\x86\xb9\xd5\xe8\x10\xbc\xb9\x15\xbc\x21\xcd\x99\x1d\xe9\xbb\xe7\xec\x4d\x03\x94\x65\xfc\x9e\x7c\xa1\x4c\x0e\x9e\xc0\x15\x74\x27\xb8\x2c\xaf\x70\xc6\xb0\xdd\xce\x88\x4c\xa5\x43\x18\x93\xff\x65\x32\xcc\x0f\x82\xf8\xd3\xbe\x9b\xdf\x97\xad\xbb\x3a\x5d\x2e\x0e\x4d\x9b\x5f\xd3\x1d\xa3\xa7\x3e\x14\xf5\x14\x11\xae\xe9\x48\x23\x36\xba\x8d\x65\x82\xe9\xe0\xdb\xba\x0e\x46\xfa\xdd\x69\xde\x00\x3f\x67\x61\x2a\xcf\xee\x35\xcc\xf9\x61\xb6\x76\xe0\xd2\x72\x38\x87\x67\x2a\xf7\xff\xd7\x92\x68\xb3\xea\x4d\x89\xb9\x7c\x61\x50\x6f\x9d\x72\xaf\xd0\xcf\xfa\x64\xa2\x88\x7e\x6e\x97\x85\xdf\x9b\x5d\x04\x5e\x7c\x78\x03\x1f\xa5\x5b\x6b\x0f\xdf\xd7\xf5\x98\x81\x1f\xa6\xcb\x06\x1e\x14\x9b\x0b\x71\x9c\x35\x77\x69\xe0\xe0\xfa\x2a\x6e\xdc\xf1\xf9\xe3\xdb\x07\x8e\x0a\x4b\x77\x33\x2a\xfb\xdc\x29\xe9\xa8\xcc\xa2\x1f\xcf\x88\x40\xb7\x38\x5b\x4c\xbf\xd1\xda\xa6\xe1\xad\x21\x16\xaa\xcc\xc1\xd9\xf4\x9e\xd6\xe0\x3d\xce\x7a\x55\xe6\x91\x95\xae\x22\xd3\x2c\xde\x8f\x01\xb5\x5f\xb2\x86\x11\x30\x04\xfa\x6f\x99\x41\xb2\x85\x41\x38\xd8\x70\x7b\x1c\xc0\x9a\x76\xf8\x97\x1e\xb8\x33\x68\x3b\x59\xd9\x66\x49\x6f\xf0\x7e\x09\xcc\xab\x87\xf6\x25\x4d\xe7\xeb\x34\x9c\x91\x47\x57\xcc\x87\xe3\x52\x78\x5c\x44\x47\x17\xc3\xb1\x75\x10\x8f\x9c\xed\x88\x8d\x72\xab\x32\x36\x98\x1c\xc3\xf7\x8e\x31\xe0\xfd\xfd\xf6\xfe\x7d\x60\x7f\x2d\x78\xfb\xb5\x42\xf0\xf6\x2b\xc7\x3f\x01\x00\x00\xff\xff\x12\xe9\x92\xa2\xf6\x10\x00\x00")

func assetsTmplIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplIndexTmpl,
		"assets/tmpl/index.tmpl",
	)
}

func assetsTmplIndexTmpl() (*asset, error) {
	bytes, err := assetsTmplIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/index.tmpl", size: 4342, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplLogTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\xb1\xaa\xc3\x30\x0c\x45\x77\x7f\x85\x9e\x3f\x20\x86\xcc\x8a\x97\xd7\x6c\x81\x76\xe8\xd2\x51\x89\x45\x1c\x70\xec\xe0\x98\x40\x31\xfe\xf7\x12\xdc\xd2\x6a\x11\xe2\xa2\x73\x0f\xfe\x5d\xae\xff\xf7\xc7\xad\x07\x9b\x56\xa7\x05\x9e\x0b\x1c\xf9\xb9\x93\xec\xa5\x16\x39\x27\x5e\x37\x47\x89\x41\x5a\x26\xc3\x51\x42\x53\x8a\xc0\x31\x98\xa7\x16\x00\x00\x68\x96\x03\x26\x47\xfb\xde\xc9\x29\xf8\x44\x8b\xe7\x28\x6b\x76\xce\x2f\xc2\xd3\x31\xd2\x1b\xf1\xc9\xd1\xb6\xba\x8f\x31\x44\x18\xc2\x8c\xca\xb6\xdf\x57\xdc\x22\xeb\x9c\x9b\x21\xcc\xa5\xa0\x3a\xaf\x5a\xa9\xcc\x72\x68\x81\xaa\x5a\xa0\xaa\xf6\xaf\x00\x00\x00\xff\xff\xcd\x10\xe5\xfc\xce\x00\x00\x00")

func assetsTmplLogTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplLogTmpl,
		"assets/tmpl/log.tmpl",
	)
}

func assetsTmplLogTmpl() (*asset, error) {
	bytes, err := assetsTmplLogTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/log.tmpl", size: 206, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplNavbarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\xcb\x92\x9b\x30\x10\xbc\xfb\x2b\x54\xca\x21\x27\xa2\x1f\x10\x5c\x72\x8d\x73\x49\xe5\x03\x06\x34\xc2\x53\x91\x47\x94\x24\x28\xa7\x28\xfe\x7d\x8b\x97\x17\x63\xef\xd6\xee\x61\x7d\x62\x68\x7a\xba\x99\xe9\xe9\x7b\x83\x96\x18\x85\x64\xe8\x4a\x08\x72\x18\x0e\x9a\xa1\x13\x95\x83\x18\xf3\x05\x15\xf3\x23\x33\x68\xa1\x75\x69\x7d\xb5\x74\x41\x93\x25\xdf\xc8\xe2\x20\x84\x10\xda\xd0\xb5\xb1\xf2\x9c\x80\x18\x43\x66\x5d\x4b\x66\x61\xec\x59\x8b\xd0\x09\xc1\x60\xd8\x70\x26\x5e\xd9\xa6\xe4\x79\x47\x4d\xbe\xae\x1d\x8a\xca\x3b\x07\x4d\x44\x23\x85\x81\x04\x0b\x3c\xda\xce\xf8\x0a\x43\xa8\x31\xe5\xf2\xdb\xdc\x7d\x44\x6e\xa3\x14\x10\x08\x32\xbc\x34\xc0\x06\x4d\x2e\x2d\xb8\x88\x3b\xf3\xe9\x07\x62\x03\x57\x7b\xaa\x3c\x67\xe3\x82\x0a\xad\x46\xfc\x99\x74\xad\xe6\x55\xdc\xa2\x7d\x4f\x56\xfc\xf8\x1b\x31\xfc\x86\x33\x0e\xc3\x6d\x0b\xec\xf6\x56\x06\x60\x23\xc5\x29\xa0\xcd\xa5\x92\x45\xdf\x6f\x5a\xbf\x47\x51\xfa\xa4\x15\xec\x1d\xd0\xc5\x4f\x2b\x1f\xff\xbf\xa1\xc5\x66\x23\xa5\x95\xa1\xee\xdd\xa3\x58\xa3\x14\xaf\x99\x92\x59\xbf\xce\x49\xee\xd6\xd4\xba\x8d\xc4\x7a\xa4\x0c\xdd\xa3\x6c\x1d\x6d\xb8\x19\x25\x3c\x3f\x60\xdd\xcd\x9b\x39\xe2\x7f\xd7\x59\x2b\xcf\x96\x6a\x25\x8b\x9f\x53\x71\x37\xf3\x3c\xa7\xa3\x2f\xb2\x77\x7e\xf4\xfe\xe5\x9f\x6e\x1c\x13\xa4\x36\x2a\x59\xfc\x99\x8a\x0f\xda\x6b\xd5\xba\xe2\x51\xfe\x4b\xa9\x15\x43\x57\x1c\xd6\x43\x79\x09\x00\x00\xff\xff\xf1\xcc\x8c\x67\x9a\x04\x00\x00")

func assetsTmplNavbarTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplNavbarTmpl,
		"assets/tmpl/navbar.tmpl",
	)
}

func assetsTmplNavbarTmpl() (*asset, error) {
	bytes, err := assetsTmplNavbarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/navbar.tmpl", size: 1178, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplSetupTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x4d\x8f\xdb\x20\x10\xbd\xe7\x57\x4c\xb9\x3b\x1c\xf6\x56\x61\x4b\xd5\xf6\xe3\x50\x55\xad\xb4\x7b\xd9\x53\x35\x86\x89\x8d\x82\x01\xc1\x38\xab\xc8\xda\xff\x5e\xf9\x23\xdb\x34\x49\xa5\x3d\x64\x93\x03\x88\x0c\xbc\x37\xef\x61\x66\xd4\x87\xcf\x3f\xef\x1f\x9f\x7e\x7d\x81\x96\x3b\x57\xad\xd4\x38\x81\x43\xdf\x94\x82\xbc\xa8\x56\xc3\xc0\xd4\x45\x87\x4c\x20\x5a\x42\x43\x49\xc0\xfa\xe5\x65\xa5\xea\x60\xf6\xd5\x0a\x00\x40\x19\xbb\x03\xed\x30\xe7\x52\xe8\xe0\x19\xad\xa7\x24\xe6\xd8\xf8\x3b\x86\xf0\xb8\xab\x71\x81\x38\xc4\xd5\x26\xa4\x0e\x50\xb3\x0d\xbe\x14\x32\x13\xf7\x51\x0a\xe8\x88\xdb\x60\x4a\x11\x43\x66\x01\xe4\x35\xef\x23\x95\xa2\xeb\x1d\xdb\x88\x89\xe5\x78\xac\x30\xc8\x78\xc4\x35\xe1\x59\x1f\x7b\x86\x79\x7b\xee\xeb\xce\xb2\x38\xe4\x57\xb3\x87\x9a\x7d\xe1\x9a\x69\x8a\xc9\x76\x98\xf6\x02\x76\xe8\x7a\x2a\xc5\x03\xee\xe8\x14\xad\xbd\xab\x1e\x9f\x2d\x33\x25\x25\xdb\xbb\x7f\x83\xc3\x60\x37\xb0\xfe\x41\x39\x63\x43\x47\x92\x4e\x6d\x41\x47\x89\x61\x1a\x0b\x83\xbe\x19\xfd\x19\x86\xbf\x07\x95\x34\x76\x77\x0a\x4d\xde\xbc\x11\xd2\xfa\x4d\x10\xd5\x53\xe8\x41\xa3\x07\xdd\x92\xde\x4a\x9d\x68\x74\x7c\x49\x1d\x30\x46\x67\x35\x8e\x1e\x83\x42\x68\x13\x6d\x4a\xd1\x32\xc7\xfc\x51\x4a\x8c\x31\xaf\x79\xde\xb9\xd6\xa1\x13\xc0\x98\x1a\xe2\x52\xfc\xae\x1d\xfa\xad\xa8\x5a\x4a\xa4\x24\x56\x17\x12\x55\x8c\xb5\xa3\x43\x5a\xf3\x62\x1a\x8b\xcc\xc9\x46\x32\xcb\xaa\x0e\xc9\x50\x7a\x5d\x26\xca\x31\xf8\x6c\xcf\x0c\x9f\x31\xd3\xf9\x9f\x73\xc0\x54\xf7\xc1\xe7\xbe\xa3\x04\xdf\x69\xaf\x24\x9b\xff\xef\xbc\x18\x38\xfb\x44\x22\xe6\xfc\x1c\x92\x11\xe0\xb1\xa3\x52\x2c\x46\x14\x7a\xe1\x29\xb6\xb4\xbf\x90\xe3\x84\x73\x91\x5e\xc9\x4b\xe9\xbf\x4d\xd3\x03\xe9\x44\x7c\x13\x59\x79\xa2\x7a\x6f\x65\x9f\xb4\xa6\x9c\xe1\x31\x6c\xc9\xbf\xa7\x2c\x9c\x78\x0a\x1e\x79\x6e\xa9\xe9\x06\x37\x76\x2c\xed\x3a\xb7\xa6\xe4\xf4\x08\xcf\x2b\xdd\xb7\x10\x1a\x47\x70\xef\x42\x6f\xce\xcb\xdd\xed\x9f\x7a\x22\x43\x9e\x2d\x3a\xf8\x6a\x1d\x5d\xc3\xe4\x8d\x75\x74\x30\xb8\xd1\xa3\xce\x42\xbf\xb2\x14\x53\xf4\xca\xde\xaa\xa9\x53\x2d\xbd\x72\xae\x9f\x4a\xce\xed\x53\xc9\xb9\xed\xfe\x09\x00\x00\xff\xff\xbe\x65\xa9\xfd\x87\x07\x00\x00")

func assetsTmplSetupTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplSetupTmpl,
		"assets/tmpl/setup.tmpl",
	)
}

func assetsTmplSetupTmpl() (*asset, error) {
	bytes, err := assetsTmplSetupTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/setup.tmpl", size: 1927, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTmplStatusTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x96\xc1\x6a\xdc\x30\x10\x40\xef\xfe\x8a\xa9\xee\x5d\x43\x8e\x45\x11\x94\x6d\x1b\x28\x0d\x09\x6c\x7a\xc8\x51\xb6\x66\xed\x01\x45\x32\xa3\xb1\xc3\x12\xf2\xef\xc5\x2b\xbb\x75\x9a\x94\x14\xb2\x39\xed\xfa\x60\x7b\x66\xd0\xb3\xe7\x61\xac\xd1\x1f\xbe\x5c\xad\x6f\x6e\xaf\xbf\x42\x2b\x77\xde\x14\x7a\xbc\x80\xb7\xa1\x39\x57\x18\x94\x29\x1e\x1e\x04\xef\x3a\x6f\x05\x41\xb5\x68\x1d\xb2\x82\xd5\xe3\x63\xa1\xab\xe8\x76\xa6\x00\x00\xd0\x8e\x06\xa8\xbd\x4d\xe9\x5c\xd5\x31\x88\xa5\x80\xac\x72\x6d\x3c\x96\x88\x60\x87\xca\x4e\x88\xb9\xae\xdb\x33\xb3\x11\x2b\x7d\xd2\x65\x7b\xf6\x67\x9d\x16\x5b\x79\x9c\xc9\x39\xd8\x9f\x3f\x26\x61\xea\xd0\x4d\x51\x15\xd9\x21\xff\x0e\x19\x53\x17\x43\xa2\x01\x17\xef\x90\x79\xfc\x34\x91\x93\xce\xdc\xdc\x93\x08\x32\xdc\xc6\x9e\xe1\xea\x3e\xc0\x0f\x4a\x82\x01\x59\x97\xe2\x5e\x5e\xf2\x2c\x99\x1b\xa5\x2d\xac\x72\x2b\xab\x09\x9a\x51\x97\xbb\x84\x7e\x9b\x2b\x8b\xce\x9f\x50\x53\x67\x03\x24\xd9\x79\x1c\x35\xfa\xc8\x9f\x2a\xdf\xa3\x32\x9f\x6b\xa1\x01\x75\x39\xd6\xff\xf5\x5c\xf4\x09\xff\x9f\xcb\xe8\x94\xd9\x48\xec\x5e\x81\x06\xf7\x02\xf3\xb9\x13\x5d\xfe\x2d\xf6\x55\xd3\x3f\x13\xf2\xe1\x2d\x8f\xd4\x74\x92\x3c\x4b\xbe\x46\xa6\xe8\xa8\x86\xef\xb1\x3a\x80\xe3\x93\xd8\x75\x0c\x5b\x6a\xe0\x1b\x79\x84\xcb\x18\x48\x22\x53\x68\xde\xa2\x76\xa2\x64\xf0\x49\xf0\xfc\xe5\xae\x19\x1d\x06\x21\xeb\x0f\xeb\x79\xe2\x8f\xf8\x63\xd6\x7c\x11\x63\xe3\x11\xd6\x3e\xf6\xee\xdd\x5c\x5f\xec\xf1\xc7\xae\x7a\x83\x3c\xbc\x6d\x87\xcb\x84\xa3\xf8\x37\xe8\x72\x3f\xc1\x2d\x12\xbd\x37\xc5\xa2\x3c\x86\xf9\xce\xd1\x60\x0a\x5d\xe6\x21\x54\x97\x79\x78\xfd\x15\x00\x00\xff\xff\x78\xbf\x5f\x14\xcd\x0a\x00\x00")

func assetsTmplStatusTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTmplStatusTmpl,
		"assets/tmpl/status.tmpl",
	)
}

func assetsTmplStatusTmpl() (*asset, error) {
	bytes, err := assetsTmplStatusTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tmpl/status.tmpl", size: 2765, mode: os.FileMode(436), modTime: time.Unix(1483797711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/custom.css": assetsCssCustomCss,
	"assets/tmpl/config.tmpl": assetsTmplConfigTmpl,
	"assets/tmpl/header.tmpl": assetsTmplHeaderTmpl,
	"assets/tmpl/index.tmpl": assetsTmplIndexTmpl,
	"assets/tmpl/log.tmpl": assetsTmplLogTmpl,
	"assets/tmpl/navbar.tmpl": assetsTmplNavbarTmpl,
	"assets/tmpl/setup.tmpl": assetsTmplSetupTmpl,
	"assets/tmpl/status.tmpl": assetsTmplStatusTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"custom.css": &bintree{assetsCssCustomCss, map[string]*bintree{}},
		}},
		"tmpl": &bintree{nil, map[string]*bintree{
			"config.tmpl": &bintree{assetsTmplConfigTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{assetsTmplHeaderTmpl, map[string]*bintree{}},
			"index.tmpl": &bintree{assetsTmplIndexTmpl, map[string]*bintree{}},
			"log.tmpl": &bintree{assetsTmplLogTmpl, map[string]*bintree{}},
			"navbar.tmpl": &bintree{assetsTmplNavbarTmpl, map[string]*bintree{}},
			"setup.tmpl": &bintree{assetsTmplSetupTmpl, map[string]*bintree{}},
			"status.tmpl": &bintree{assetsTmplStatusTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

