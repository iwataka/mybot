// Automatically generated by MockGen. DO NOT EDIT!
// Source: models/slack.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	slack "github.com/nlopes/slack"
)

// Mock of SlackAPI interface
type MockSlackAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockSlackAPIRecorder
}

// Recorder for MockSlackAPI (not exported)
type _MockSlackAPIRecorder struct {
	mock *MockSlackAPI
}

func NewMockSlackAPI(ctrl *gomock.Controller) *MockSlackAPI {
	mock := &MockSlackAPI{ctrl: ctrl}
	mock.recorder = &_MockSlackAPIRecorder{mock}
	return mock
}

func (_m *MockSlackAPI) EXPECT() *_MockSlackAPIRecorder {
	return _m.recorder
}

func (_m *MockSlackAPI) PostMessage(ch string, msg string, params slack.PostMessageParameters) (string, string, error) {
	ret := _m.ctrl.Call(_m, "PostMessage", ch, msg, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSlackAPIRecorder) PostMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostMessage", arg0, arg1, arg2)
}

func (_m *MockSlackAPI) CreateChannel(name string) (*slack.Channel, error) {
	ret := _m.ctrl.Call(_m, "CreateChannel", name)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSlackAPIRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateChannel", arg0)
}

func (_m *MockSlackAPI) NewRTM() *slack.RTM {
	ret := _m.ctrl.Call(_m, "NewRTM")
	ret0, _ := ret[0].(*slack.RTM)
	return ret0
}

func (_mr *_MockSlackAPIRecorder) NewRTM() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewRTM")
}

func (_m *MockSlackAPI) GetChannels(excludeArchived bool) ([]slack.Channel, error) {
	ret := _m.ctrl.Call(_m, "GetChannels", excludeArchived)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSlackAPIRecorder) GetChannels(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetChannels", arg0)
}

func (_m *MockSlackAPI) AddPin(ch string, item slack.ItemRef) error {
	ret := _m.ctrl.Call(_m, "AddPin", ch, item)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSlackAPIRecorder) AddPin(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddPin", arg0, arg1)
}

func (_m *MockSlackAPI) AddStar(ch string, item slack.ItemRef) error {
	ret := _m.ctrl.Call(_m, "AddStar", ch, item)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSlackAPIRecorder) AddStar(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddStar", arg0, arg1)
}

func (_m *MockSlackAPI) AddReaction(name string, item slack.ItemRef) error {
	ret := _m.ctrl.Call(_m, "AddReaction", name, item)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSlackAPIRecorder) AddReaction(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddReaction", arg0, arg1)
}

func (_m *MockSlackAPI) AuthTest() (*slack.AuthTestResponse, error) {
	ret := _m.ctrl.Call(_m, "AuthTest")
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSlackAPIRecorder) AuthTest() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthTest")
}
