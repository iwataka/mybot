// Code generated by MockGen. DO NOT EDIT.
// Source: core/language.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/iwataka/mybot/models"
	reflect "reflect"
)

// MockLanguageMatcher is a mock of LanguageMatcher interface
type MockLanguageMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageMatcherMockRecorder
}

// MockLanguageMatcherMockRecorder is the mock recorder for MockLanguageMatcher
type MockLanguageMatcherMockRecorder struct {
	mock *MockLanguageMatcher
}

// NewMockLanguageMatcher creates a new mock instance
func NewMockLanguageMatcher(ctrl *gomock.Controller) *MockLanguageMatcher {
	mock := &MockLanguageMatcher{ctrl: ctrl}
	mock.recorder = &MockLanguageMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLanguageMatcher) EXPECT() *MockLanguageMatcherMockRecorder {
	return m.recorder
}

// MatchText mocks base method
func (m *MockLanguageMatcher) MatchText(arg0 string, arg1 models.LanguageCondition) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchText", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MatchText indicates an expected call of MatchText
func (mr *MockLanguageMatcherMockRecorder) MatchText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchText", reflect.TypeOf((*MockLanguageMatcher)(nil).MatchText), arg0, arg1)
}

// Enabled mocks base method
func (m *MockLanguageMatcher) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled
func (mr *MockLanguageMatcherMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockLanguageMatcher)(nil).Enabled))
}
