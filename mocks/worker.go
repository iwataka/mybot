// Code generated by MockGen. DO NOT EDIT.
// Source: models/worker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWorkerMessageHandler is a mock of WorkerMessageHandler interface
type MockWorkerMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMessageHandlerMockRecorder
}

// MockWorkerMessageHandlerMockRecorder is the mock recorder for MockWorkerMessageHandler
type MockWorkerMessageHandlerMockRecorder struct {
	mock *MockWorkerMessageHandler
}

// NewMockWorkerMessageHandler creates a new mock instance
func NewMockWorkerMessageHandler(ctrl *gomock.Controller) *MockWorkerMessageHandler {
	mock := &MockWorkerMessageHandler{ctrl: ctrl}
	mock.recorder = &MockWorkerMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkerMessageHandler) EXPECT() *MockWorkerMessageHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockWorkerMessageHandler) Handle(msg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockWorkerMessageHandlerMockRecorder) Handle(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockWorkerMessageHandler)(nil).Handle), msg)
}

// MockWorker is a mock of Worker interface
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockWorker) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockWorkerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorker)(nil).Start))
}

// Stop mocks base method
func (m *MockWorker) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorker)(nil).Stop))
}

// Name mocks base method
func (m *MockWorker) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockWorkerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWorker)(nil).Name))
}
