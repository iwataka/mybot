// Automatically generated by MockGen. DO NOT EDIT!
// Source: models/twitter.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	anaconda "github.com/iwataka/anaconda"
	url "net/url"
)

// Mock of TwitterAPI interface
type MockTwitterAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockTwitterAPIRecorder
}

// Recorder for MockTwitterAPI (not exported)
type _MockTwitterAPIRecorder struct {
	mock *MockTwitterAPI
}

func NewMockTwitterAPI(ctrl *gomock.Controller) *MockTwitterAPI {
	mock := &MockTwitterAPI{ctrl: ctrl}
	mock.recorder = &_MockTwitterAPIRecorder{mock}
	return mock
}

func (_m *MockTwitterAPI) EXPECT() *_MockTwitterAPIRecorder {
	return _m.recorder
}

func (_m *MockTwitterAPI) VerifyCredentials() (bool, error) {
	ret := _m.ctrl.Call(_m, "VerifyCredentials")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) VerifyCredentials() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyCredentials")
}

func (_m *MockTwitterAPI) PostDMToScreenName(_param0 string, _param1 string) (anaconda.DirectMessage, error) {
	ret := _m.ctrl.Call(_m, "PostDMToScreenName", _param0, _param1)
	ret0, _ := ret[0].(anaconda.DirectMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) PostDMToScreenName(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostDMToScreenName", arg0, arg1)
}

func (_m *MockTwitterAPI) GetCollectionListByUserId(_param0 int64, _param1 url.Values) (anaconda.CollectionListResult, error) {
	ret := _m.ctrl.Call(_m, "GetCollectionListByUserId", _param0, _param1)
	ret0, _ := ret[0].(anaconda.CollectionListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetCollectionListByUserId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCollectionListByUserId", arg0, arg1)
}

func (_m *MockTwitterAPI) PostTweet(_param0 string, _param1 url.Values) (anaconda.Tweet, error) {
	ret := _m.ctrl.Call(_m, "PostTweet", _param0, _param1)
	ret0, _ := ret[0].(anaconda.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) PostTweet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostTweet", arg0, arg1)
}

func (_m *MockTwitterAPI) GetFriendsList(_param0 url.Values) (anaconda.UserCursor, error) {
	ret := _m.ctrl.Call(_m, "GetFriendsList", _param0)
	ret0, _ := ret[0].(anaconda.UserCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetFriendsList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFriendsList", arg0)
}

func (_m *MockTwitterAPI) GetSelf(_param0 url.Values) (anaconda.User, error) {
	ret := _m.ctrl.Call(_m, "GetSelf", _param0)
	ret0, _ := ret[0].(anaconda.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetSelf(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSelf", arg0)
}

func (_m *MockTwitterAPI) GetUserTimeline(_param0 url.Values) ([]anaconda.Tweet, error) {
	ret := _m.ctrl.Call(_m, "GetUserTimeline", _param0)
	ret0, _ := ret[0].([]anaconda.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetUserTimeline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserTimeline", arg0)
}

func (_m *MockTwitterAPI) GetFavorites(_param0 url.Values) ([]anaconda.Tweet, error) {
	ret := _m.ctrl.Call(_m, "GetFavorites", _param0)
	ret0, _ := ret[0].([]anaconda.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetFavorites(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFavorites", arg0)
}

func (_m *MockTwitterAPI) GetSearch(_param0 string, _param1 url.Values) (anaconda.SearchResponse, error) {
	ret := _m.ctrl.Call(_m, "GetSearch", _param0, _param1)
	ret0, _ := ret[0].(anaconda.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetSearch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSearch", arg0, arg1)
}

func (_m *MockTwitterAPI) Retweet(_param0 int64, _param1 bool) (anaconda.Tweet, error) {
	ret := _m.ctrl.Call(_m, "Retweet", _param0, _param1)
	ret0, _ := ret[0].(anaconda.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) Retweet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Retweet", arg0, arg1)
}

func (_m *MockTwitterAPI) Favorite(_param0 int64) (anaconda.Tweet, error) {
	ret := _m.ctrl.Call(_m, "Favorite", _param0)
	ret0, _ := ret[0].(anaconda.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) Favorite(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Favorite", arg0)
}

func (_m *MockTwitterAPI) CreateCollection(_param0 string, _param1 url.Values) (anaconda.CollectionShowResult, error) {
	ret := _m.ctrl.Call(_m, "CreateCollection", _param0, _param1)
	ret0, _ := ret[0].(anaconda.CollectionShowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) CreateCollection(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCollection", arg0, arg1)
}

func (_m *MockTwitterAPI) AddEntryToCollection(_param0 string, _param1 int64, _param2 url.Values) (anaconda.CollectionEntryAddResult, error) {
	ret := _m.ctrl.Call(_m, "AddEntryToCollection", _param0, _param1, _param2)
	ret0, _ := ret[0].(anaconda.CollectionEntryAddResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) AddEntryToCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddEntryToCollection", arg0, arg1, arg2)
}

func (_m *MockTwitterAPI) GetUsersLookup(_param0 string, _param1 url.Values) ([]anaconda.User, error) {
	ret := _m.ctrl.Call(_m, "GetUsersLookup", _param0, _param1)
	ret0, _ := ret[0].([]anaconda.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetUsersLookup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUsersLookup", arg0, arg1)
}

func (_m *MockTwitterAPI) PublicStreamFilter(_param0 url.Values) *anaconda.Stream {
	ret := _m.ctrl.Call(_m, "PublicStreamFilter", _param0)
	ret0, _ := ret[0].(*anaconda.Stream)
	return ret0
}

func (_mr *_MockTwitterAPIRecorder) PublicStreamFilter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublicStreamFilter", arg0)
}

func (_m *MockTwitterAPI) UserStream(_param0 url.Values) *anaconda.Stream {
	ret := _m.ctrl.Call(_m, "UserStream", _param0)
	ret0, _ := ret[0].(*anaconda.Stream)
	return ret0
}

func (_mr *_MockTwitterAPIRecorder) UserStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserStream", arg0)
}

func (_m *MockTwitterAPI) GetUsersShow(_param0 string, _param1 url.Values) (anaconda.User, error) {
	ret := _m.ctrl.Call(_m, "GetUsersShow", _param0, _param1)
	ret0, _ := ret[0].(anaconda.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetUsersShow(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUsersShow", arg0, arg1)
}

func (_m *MockTwitterAPI) GetUserSearch(_param0 string, _param1 url.Values) ([]anaconda.User, error) {
	ret := _m.ctrl.Call(_m, "GetUserSearch", _param0, _param1)
	ret0, _ := ret[0].([]anaconda.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTwitterAPIRecorder) GetUserSearch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserSearch", arg0, arg1)
}
