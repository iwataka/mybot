// Code generated by MockGen. DO NOT EDIT.
// Source: models/mgo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/iwataka/mybot/models"
	mgo "gopkg.in/mgo.v2"
	reflect "reflect"
)

// MockMgoCollection is a mock of MgoCollection interface
type MockMgoCollection struct {
	ctrl     *gomock.Controller
	recorder *MockMgoCollectionMockRecorder
}

// MockMgoCollectionMockRecorder is the mock recorder for MockMgoCollection
type MockMgoCollectionMockRecorder struct {
	mock *MockMgoCollection
}

// NewMockMgoCollection creates a new mock instance
func NewMockMgoCollection(ctrl *gomock.Controller) *MockMgoCollection {
	mock := &MockMgoCollection{ctrl: ctrl}
	mock.recorder = &MockMgoCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMgoCollection) EXPECT() *MockMgoCollectionMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockMgoCollection) Find(query interface{}) models.MgoQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", query)
	ret0, _ := ret[0].(models.MgoQuery)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockMgoCollectionMockRecorder) Find(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMgoCollection)(nil).Find), query)
}

// RemoveAll mocks base method
func (m *MockMgoCollection) RemoveAll(selector interface{}) (*mgo.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", selector)
	ret0, _ := ret[0].(*mgo.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockMgoCollectionMockRecorder) RemoveAll(selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockMgoCollection)(nil).RemoveAll), selector)
}

// Upsert mocks base method
func (m *MockMgoCollection) Upsert(selector, update interface{}) (*mgo.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", selector, update)
	ret0, _ := ret[0].(*mgo.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert
func (mr *MockMgoCollectionMockRecorder) Upsert(selector, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockMgoCollection)(nil).Upsert), selector, update)
}

// MockMgoQuery is a mock of MgoQuery interface
type MockMgoQuery struct {
	ctrl     *gomock.Controller
	recorder *MockMgoQueryMockRecorder
}

// MockMgoQueryMockRecorder is the mock recorder for MockMgoQuery
type MockMgoQueryMockRecorder struct {
	mock *MockMgoQuery
}

// NewMockMgoQuery creates a new mock instance
func NewMockMgoQuery(ctrl *gomock.Controller) *MockMgoQuery {
	mock := &MockMgoQuery{ctrl: ctrl}
	mock.recorder = &MockMgoQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMgoQuery) EXPECT() *MockMgoQueryMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockMgoQuery) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockMgoQueryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockMgoQuery)(nil).Count))
}

// One mocks base method
func (m *MockMgoQuery) One(result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// One indicates an expected call of One
func (mr *MockMgoQueryMockRecorder) One(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockMgoQuery)(nil).One), result)
}
