// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iwataka/mybot/data (interfaces: Cache)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	data "github.com/iwataka/mybot/data"
	models "github.com/iwataka/mybot/models"
	reflect "reflect"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetLatestDMID mocks base method
func (m *MockCache) GetLatestDMID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestDMID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetLatestDMID indicates an expected call of GetLatestDMID
func (mr *MockCacheMockRecorder) GetLatestDMID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestDMID", reflect.TypeOf((*MockCache)(nil).GetLatestDMID))
}

// GetLatestFavoriteID mocks base method
func (m *MockCache) GetLatestFavoriteID(arg0 string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestFavoriteID", arg0)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetLatestFavoriteID indicates an expected call of GetLatestFavoriteID
func (mr *MockCacheMockRecorder) GetLatestFavoriteID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestFavoriteID", reflect.TypeOf((*MockCache)(nil).GetLatestFavoriteID), arg0)
}

// GetLatestImages mocks base method
func (m *MockCache) GetLatestImages(arg0 int) []models.ImageCacheData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestImages", arg0)
	ret0, _ := ret[0].([]models.ImageCacheData)
	return ret0
}

// GetLatestImages indicates an expected call of GetLatestImages
func (mr *MockCacheMockRecorder) GetLatestImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestImages", reflect.TypeOf((*MockCache)(nil).GetLatestImages), arg0)
}

// GetLatestTweetID mocks base method
func (m *MockCache) GetLatestTweetID(arg0 string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTweetID", arg0)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetLatestTweetID indicates an expected call of GetLatestTweetID
func (mr *MockCacheMockRecorder) GetLatestTweetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTweetID", reflect.TypeOf((*MockCache)(nil).GetLatestTweetID), arg0)
}

// GetTweetAction mocks base method
func (m *MockCache) GetTweetAction(arg0 int64) data.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweetAction", arg0)
	ret0, _ := ret[0].(data.Action)
	return ret0
}

// GetTweetAction indicates an expected call of GetTweetAction
func (mr *MockCacheMockRecorder) GetTweetAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweetAction", reflect.TypeOf((*MockCache)(nil).GetTweetAction), arg0)
}

// Save mocks base method
func (m *MockCache) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCacheMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCache)(nil).Save))
}

// SetImage mocks base method
func (m *MockCache) SetImage(arg0 models.ImageCacheData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetImage", arg0)
}

// SetImage indicates an expected call of SetImage
func (mr *MockCacheMockRecorder) SetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImage", reflect.TypeOf((*MockCache)(nil).SetImage), arg0)
}

// SetLatestDMID mocks base method
func (m *MockCache) SetLatestDMID(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLatestDMID", arg0)
}

// SetLatestDMID indicates an expected call of SetLatestDMID
func (mr *MockCacheMockRecorder) SetLatestDMID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLatestDMID", reflect.TypeOf((*MockCache)(nil).SetLatestDMID), arg0)
}

// SetLatestFavoriteID mocks base method
func (m *MockCache) SetLatestFavoriteID(arg0 string, arg1 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLatestFavoriteID", arg0, arg1)
}

// SetLatestFavoriteID indicates an expected call of SetLatestFavoriteID
func (mr *MockCacheMockRecorder) SetLatestFavoriteID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLatestFavoriteID", reflect.TypeOf((*MockCache)(nil).SetLatestFavoriteID), arg0, arg1)
}

// SetLatestTweetID mocks base method
func (m *MockCache) SetLatestTweetID(arg0 string, arg1 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLatestTweetID", arg0, arg1)
}

// SetLatestTweetID indicates an expected call of SetLatestTweetID
func (mr *MockCacheMockRecorder) SetLatestTweetID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLatestTweetID", reflect.TypeOf((*MockCache)(nil).SetLatestTweetID), arg0, arg1)
}

// SetTweetAction mocks base method
func (m *MockCache) SetTweetAction(arg0 int64, arg1 data.Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTweetAction", arg0, arg1)
}

// SetTweetAction indicates an expected call of SetTweetAction
func (mr *MockCacheMockRecorder) SetTweetAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTweetAction", reflect.TypeOf((*MockCache)(nil).SetTweetAction), arg0, arg1)
}
