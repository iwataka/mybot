// Code generated by MockGen. DO NOT EDIT.
// Source: models/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	goth "github.com/markbates/goth"
	http "net/http"
	reflect "reflect"
)

// MockAuthenticator is a mock of Authenticator interface
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// SetProvider mocks base method
func (m *MockAuthenticator) SetProvider(name string, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProvider", name, r)
}

// SetProvider indicates an expected call of SetProvider
func (mr *MockAuthenticatorMockRecorder) SetProvider(name, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProvider", reflect.TypeOf((*MockAuthenticator)(nil).SetProvider), name, r)
}

// InitProvider mocks base method
func (m *MockAuthenticator) InitProvider(provider, callback, consumerKey, consumerSecret string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitProvider", provider, callback, consumerKey, consumerSecret)
}

// InitProvider indicates an expected call of InitProvider
func (mr *MockAuthenticatorMockRecorder) InitProvider(provider, callback, consumerKey, consumerSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitProvider", reflect.TypeOf((*MockAuthenticator)(nil).InitProvider), provider, callback, consumerKey, consumerSecret)
}

// CompleteUserAuth mocks base method
func (m *MockAuthenticator) CompleteUserAuth(provider string, w http.ResponseWriter, r *http.Request) (goth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteUserAuth", provider, w, r)
	ret0, _ := ret[0].(goth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteUserAuth indicates an expected call of CompleteUserAuth
func (mr *MockAuthenticatorMockRecorder) CompleteUserAuth(provider, w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteUserAuth", reflect.TypeOf((*MockAuthenticator)(nil).CompleteUserAuth), provider, w, r)
}

// Login mocks base method
func (m *MockAuthenticator) Login(user goth.User, w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user, w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockAuthenticatorMockRecorder) Login(user, w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthenticator)(nil).Login), user, w, r)
}

// GetLoginUser mocks base method
func (m *MockAuthenticator) GetLoginUser(r *http.Request) (goth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginUser", r)
	ret0, _ := ret[0].(goth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginUser indicates an expected call of GetLoginUser
func (mr *MockAuthenticatorMockRecorder) GetLoginUser(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginUser", reflect.TypeOf((*MockAuthenticator)(nil).GetLoginUser), r)
}

// Logout mocks base method
func (m *MockAuthenticator) Logout(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockAuthenticatorMockRecorder) Logout(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthenticator)(nil).Logout), w, r)
}
